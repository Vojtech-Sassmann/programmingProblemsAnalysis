126;root{Module{FunctionDef{For{Call{Call{}, }, If{Compare{Mod{}, }, Print{}, Print{Str{}, }, }, }, For{Call{Call{}, }, If{Mod{}, Print{}, Print{Str{}, }, }, }, }, }, }
71;root{Module{FunctionDef{For{Call{}, For{Call{Call{}, }, If{BoolOp{Or{}, BoolOp{And{}, Compare{Mod{}, }, }, BoolOp{And{}, Compare{Mod{}, }, }, }, Print{}, Print{Str{}, }, }, }, Print{}, }, }, }, }
14;root{Module{FunctionDef{Assign{Str{}, }, Assign{Call{}, }, For{Call{}, If{Compare{Mod{}, }, Print{}, If{Compare{Lt{}, Call{}, Sub{}, }, Print{Str{}, }, }, }, }, }, }, }
6;root{Module{FunctionDef{Assign{Str{}, }, Assign{Str{}, }, For{Call{Call{}, }, If{Compare{Mod{}, }, AugAssign{Add{}, Add{}, Str{}, }, AugAssign{Add{}, Str{}, }, AugAssign{Add{}, Str{}, }, AugAssign{Add{}, Mod{}, }, }, }, }, }, }
5;root{Module{FunctionDef{Assign{Call{}, }, If{Compare{Mod{}, }, For{Call{Sub{}, }, Print{Str{}, }, }, Print{Subscript{Index{Sub{}, }, }, }, For{Call{Sub{}, }, Print{Str{}, }, }, Expr{}, }, }, }, }
4;root{Module{FunctionDef{Print{}, For{Subscript{Slice{}, }, Print{Str{}, }, Print{}, }, Print{}, For{Subscript{Slice{}, }, Print{Str{}, }, Print{}, }, Print{Str{}, }, }, }, }
2;root{Module{FunctionDef{Assign{Subscript{Slice{}, }, Add{}, Subscript{Slice{}, }, }, Assign{Call{Attribute{Str{}, }, }, }, If{Compare{Call{}, Mod{}, }, AugAssign{Add{}, Str{}, }, }, Print{Call{Attribute{Str{}, }, Subscript{Slice{Call{}, Div{}, }, }, }, }, Print{Call{Attribute{Str{}, }, Subscript{Slice{Call{}, Div{}, }, }, }, }, }, }, }
2;root{Module{FunctionDef{Assign{}, For{Call{Call{}, }, Assign{Call{}, Mult{}, }, If{Compare{Lt{}, }, Print{}, AugAssign{Add{}, }, }, If{Assign{}, Print{}, }, If{Compare{Lt{}, }, Expr{}, }, }, }, }, }
2;root{Module{FunctionDef{Assign{List{}, }, Assign{List{}, }, For{Call{Call{}, }, If{Compare{Add{}, Mod{}, }, Expr{Call{Attribute{}, }, }, Expr{Call{Attribute{}, Str{}, }, }, Expr{Call{Attribute{}, Str{}, }, }, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Subscript{Slice{}, }, Add{}, Subscript{Slice{}, }, }, Assign{Call{Attribute{Str{}, }, ListComp{Add{}, Str{}, comprehension{}, }, }, }, Print{Subscript{Slice{Call{}, Div{}, Sub{}, }, }, }, Print{Subscript{Slice{Call{}, Div{}, Call{}, Sub{}, }, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, Assign{}, Assign{}, While{Compare{Lt{}, Call{}, }, Assign{}, Print{}, If{Compare{Lt{}, Call{}, Sub{}, }, Assign{Str{}, }, Print{}, }, AugAssign{Add{}, }, }, If{Compare{Str{}, }, Assign{}, }, Expr{}, }, }, }
1;root{Module{FunctionDef{Print{}, Assign{Call{}, }, For{Call{FloorDiv{}, Add{}, }, Print{Str{}, }, Print{Subscript{Index{Mult{}, }, }, }, }, Print{}, For{Call{FloorDiv{}, }, Print{Str{}, }, Print{Subscript{Index{Mult{}, Add{}, }, }, }, }, Expr{}, }, }, }
1;root{Module{FunctionDef{For{Call{Call{}, Add{}, }, If{Compare{Mod{}, }, Print{Str{}, }, Print{Subscript{Index{Sub{}, }, }, }, }, }, Print{}, For{Call{Call{}, Div{}, }, Print{Str{}, Subscript{Index{Mult{}, Sub{}, }, }, }, }, Print{Str{}, }, }, }, }
1;root{Module{FunctionDef{Print{}, Print{Str{}, }, Assign{}, While{Compare{Mult{}, Lt{}, Call{}, Sub{}, }, Print{Subscript{Index{Mult{}, }, }, }, Print{Str{}, }, AugAssign{Add{}, }, }, If{Compare{Call{}, Mod{}, NotEq{}, }, Print{Subscript{Index{Call{}, Sub{}, }, }, }, Assign{}, }, }, }, }
1;root{Module{FunctionDef{Assign{Tuple{}, Tuple{List{}, List{}, }, }, Assign{}, For{If{Compare{Mod{}, NotEq{}, }, Expr{Call{Attribute{}, }, }, Expr{Call{Attribute{}, }, }, }, AugAssign{Add{}, }, }, For{Call{Call{}, Sub{}, }, Print{}, }, }, }, }
