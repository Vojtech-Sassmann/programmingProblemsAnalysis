49;root{Module{FunctionDef{Assign{Str{}, }, Assign{Str{}, }, For{Call{Call{}, }, If{Compare{Mod{}, }, Assign{Add{}, }, Assign{Add{}, }, }, }, Return{Add{}, }, }, }, }
39;root{Module{FunctionDef{Assign{Subscript{Slice{}, }, }, }, }, }
14;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Call{}, }, AugAssign{Add{}, }, }, For{Call{Call{}, Sub{}, Sub{}, Call{}, Mod{}, }, AugAssign{Add{}, }, }, Return{}, }, }, }
9;root{Module{FunctionDef{Assign{Call{}, }, If{Compare{Mod{}, }, Return{Subscript{Slice{}, }, Add{}, Subscript{Slice{Sub{}, }, }, }, Return{Subscript{Slice{}, }, Add{}, Subscript{Slice{Sub{}, }, }, }, }, }, }, }
7;root{Module{FunctionDef{Assign{Str{}, }, Assign{Str{}, }, For{Call{Call{}, }, If{Compare{Mod{}, }, AugAssign{Add{}, }, }, }, For{Call{Call{}, }, If{Compare{Mod{}, }, AugAssign{Add{}, Subscript{Index{Call{}, Sub{}, Sub{}, }, }, }, }, }, Return{}, }, }, }
5;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Call{}, }, If{Compare{Lt{}, Call{}, Div{}, }, AugAssign{Add{}, Subscript{Index{Mult{}, }, }, }, AugAssign{Add{}, Subscript{Index{Call{}, Sub{}, Sub{}, Mult{}, }, }, }, }, }, Return{}, }, }, }
4;root{Module{FunctionDef{Assign{Call{}, }, Assign{Tuple{Str{}, Str{}, Str{}, }, }, Assign{Call{}, }, Assign{Call{}, }, Assign{Call{}, }, Assign{}, If{Compare{Mod{}, }, For{Call{}, Pass{}, }, }, }, }, }
3;root{Module{FunctionDef{Assign{Subscript{Slice{}, }, }, Assign{Str{}, }, For{Call{Call{}, Div{}, }, AugAssign{Add{}, Subscript{Index{Mult{}, }, }, }, }, For{Call{Call{}, Div{}, Sub{}, Call{}, Mod{}, }, AugAssign{Add{}, Subscript{Index{Call{}, Sub{}, Sub{}, Mult{}, Sub{}, Call{}, Mod{}, }, }, }, }, Expr{}, }, }, }
3;root{Module{FunctionDef{Assign{List{}, }, Assign{}, For{If{Compare{Mod{}, }, Expr{Call{Attribute{}, }, }, }, AugAssign{Add{}, }, }, Assign{}, For{Subscript{Slice{}, }, If{Compare{Mod{}, }, Expr{Call{Attribute{}, }, }, }, AugAssign{Add{}, }, }, Expr{}, }, }, }
2;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Call{}, Div{}, }, If{Compare{Subscript{Index{Mult{}, }, }, NotEq{}, }, AugAssign{Add{}, Subscript{Index{Mult{}, }, }, }, }, }, For{Call{Call{}, Div{}, }, If{Compare{Subscript{Subscript{Slice{}, }, Index{Mult{}, }, }, NotEq{}, }, Expr{}, }, }, }, }, }
2;root{Module{FunctionDef{Assign{Str{}, }, Assign{Call{}, }, While{Compare{LtE{}, Call{}, Sub{}, }, AugAssign{Add{}, }, AugAssign{Add{}, }, }, AugAssign{Sub{}, }, While{Compare{GtE{}, }, AugAssign{Add{}, }, AugAssign{Sub{}, }, }, Return{}, }, }, }
1;root{Module{FunctionDef{Assign{ListComp{comprehension{Call{Call{}, }, }, }, }, For{Call{Call{}, }, If{Mod{}, Assign{Subscript{Index{Sub{}, FloorDiv{}, }, }, }, Assign{Subscript{Index{FloorDiv{}, }, }, }, }, }, Assign{Str{}, }, For{AugAssign{Add{}, }, }, Return{}, }, }, }
1;root{Module{FunctionDef{If{Compare{Call{}, Mod{}, }, Assign{Str{}, }, AugAssign{Add{}, Subscript{Slice{}, }, }, AugAssign{Add{}, Subscript{Subscript{Slice{}, }, Slice{}, }, }, Return{}, Assign{Str{}, }, AugAssign{Add{}, Subscript{Slice{}, }, }, AugAssign{Add{}, Subscript{Subscript{Subscript{Slice{}, }, Slice{}, }, Slice{}, }, }, Return{}, }, }, }, }
1;root{Module{FunctionDef{Assign{Tuple{}, Tuple{Str{}, Str{}, Str{}, }, }, For{Call{Call{}, }, If{Compare{Mod{}, }, AugAssign{Add{}, }, AugAssign{Add{}, }, }, }, For{Call{Call{}, Add{}, }, AugAssign{Add{}, Subscript{Index{Sub{}, Mult{}, }, }, }, }, AugAssign{Add{}, }, Expr{}, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Call{}, Add{}, }, If{BoolOp{Or{}, BoolOp{And{}, Compare{Mod{}, }, Compare{Call{}, Mod{}, }, }, BoolOp{And{}, Compare{Mod{}, }, Compare{Call{}, Mod{}, }, }, }, Assign{Subscript{Index{UnaryOp{USub{}, }, }, }, Add{}, }, Assign{Add{}, Subscript{Index{UnaryOp{USub{}, }, }, }, }, }, }, Return{}, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Call{}, }, AugAssign{Add{}, Subscript{Index{Call{}, Sub{}, Sub{}, }, }, }, }, Return{}, }, FunctionDef{Assign{Subscript{Slice{}, }, }, AugAssign{Add{}, Call{Subscript{Slice{}, }, }, }, Return{}, }, }, }
1;root{Module{FunctionDef{Assign{Subscript{Slice{}, }, }, Assign{Subscript{Slice{}, }, }, Assign{Subscript{Slice{}, }, }, Assign{Subscript{Slice{}, }, }, Assign{Call{}, }, If{Compare{Mod{}, }, Return{Add{}, }, Return{Add{}, }, }, }, }, }
1;root{Module{FunctionDef{Assign{}, Assign{Str{}, }, While{Compare{LtE{}, Call{}, Sub{}, }, Assign{Add{}, }, Assign{Add{}, }, }, If{Compare{Call{}, Mod{}, }, Assign{Call{}, Sub{}, }, Assign{Call{}, Sub{}, }, }, While{Compare{GtE{}, }, Assign{Add{}, }, }, }, }, }
