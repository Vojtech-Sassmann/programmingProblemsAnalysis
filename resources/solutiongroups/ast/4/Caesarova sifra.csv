5;root{Module{FunctionDef{Assign{Str{}, }, }, }, }
5;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Call{}, }, If{Compare{Str{}, }, AugAssign{Add{}, Str{}, }, Assign{Call{}, Add{}, }, If{Compare{Gt{}, Call{Str{}, }, }, Expr{}, }, }, }, }, }, }
5;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Call{}, }, If{Compare{Str{}, }, Assign{Add{}, Str{}, }, Assign{Call{}, Add{}, }, If{Compare{Gt{}, Call{Str{}, }, }, Assign{Sub{}, }, }, Assign{Add{}, }, }, }, }, }, }
4;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Call{}, }, Assign{Call{}, Add{}, }, If{Compare{Gt{}, }, Assign{Add{}, }, If{Compare{Str{}, }, Assign{}, }, }, Assign{Add{}, Call{}, }, }, Return{}, }, }, }
3;root{Module{FunctionDef{Assign{Str{}, }, Assign{Call{Attribute{}, }, }, For{Call{Call{}, }, If{Compare{Str{}, }, Assign{Add{}, Str{}, }, Assign{Call{}, Add{}, }, If{Compare{Gt{}, Call{Str{}, }, }, Assign{Sub{}, }, }, }, }, }, }, }
3;root{Module{FunctionDef{Assign{Call{}, }, Assign{Str{}, }, For{Call{Call{}, }, If{Compare{NotEq{}, Str{}, }, AugAssign{Add{}, Call{Call{}, Add{}, Sub{}, BitAnd{}, UnaryOp{UAdd{}, }, }, }, AugAssign{Add{}, Str{}, }, }, }, Return{}, }, }, }
2;root{Module{FunctionDef{Assign{Str{}, }, For{If{Compare{Str{}, }, AugAssign{Add{}, Str{}, }, AugAssign{Add{}, Call{Call{}, Sub{}, Call{Str{}, }, Add{}, BitAnd{}, UnaryOp{UAdd{}, Call{Str{}, }, }, }, }, }, }, Return{}, }, }, }
2;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Call{}, }, Assign{Call{}, }, If{Compare{Gt{}, }, AugAssign{Sub{}, }, Print{}, }, AugAssign{Add{}, Call{Add{}, }, }, }, Return{}, }, }, }
2;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Call{}, }, AugAssign{Add{}, Call{Call{}, Add{}, }, }, }, Return{}, }, }, }
2;root{Module{FunctionDef{Assign{Str{}, }, Assign{}, For{Call{Call{}, }, Assign{Call{}, }, If{Compare{NotEq{}, }, If{Compare{Add{}, GtE{}, }, Assign{Add{}, Sub{}, }, }, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Call{}, }, If{Compare{Str{}, }, AugAssign{Add{}, Str{}, }, Continue{}, }, Assign{Call{}, Add{}, }, If{Compare{Gt{}, }, AugAssign{Sub{}, }, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Call{}, }, Assign{Call{}, Sub{}, }, If{Compare{LtE{}, LtE{}, }, Assign{Add{}, }, AugAssign{Add{}, Call{Add{}, }, }, Assign{}, Assign{Add{}, }, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, Assign{Call{Attribute{}, }, }, For{Call{Call{}, }, Assign{Call{}, Sub{}, }, If{Compare{LtE{}, LtE{}, }, Assign{Add{}, }, AugAssign{Add{}, Call{Add{}, }, }, Assign{}, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Call{}, }, Assign{Call{}, Add{}, }, If{Compare{Str{}, }, Assign{Add{}, Str{}, }, If{Compare{Gt{}, Call{Str{}, }, }, Assign{Sub{}, }, }, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Call{}, Sub{}, Call{Str{}, }, }, Assign{Add{}, }, Assign{Mod{}, }, Assign{Call{Add{}, Call{Str{}, }, }, }, Return{}, }, FunctionDef{Assign{Str{}, }, For{Expr{}, }, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, Assign{}, For{Call{Call{}, }, If{Compare{Str{}, }, AugAssign{Add{}, Str{}, }, If{Compare{Call{}, Add{}, Gt{}, Call{Str{}, }, }, Assign{}, }, AugAssign{Add{}, Call{Call{}, Add{}, Sub{}, }, }, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Call{}, }, Assign{Call{}, }, If{Assign{Str{}, }, }, If{Assign{Call{Add{}, Sub{}, }, }, }, If{BoolOp{And{}, Compare{NotEq{}, }, Compare{NotEq{}, }, }, Expr{}, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Call{}, }, Assign{Call{}, }, If{Assign{Str{}, }, }, If{BoolOp{And{}, Compare{NotEq{}, }, Compare{Add{}, Gt{}, }, }, Assign{Sub{}, }, Assign{Sub{}, }, Assign{}, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Call{}, }, If{Compare{NotEq{}, Str{}, }, Assign{Call{}, }, AugAssign{Add{}, }, Assign{Add{}, Call{}, }, Assign{Add{}, Str{}, }, }, }, Return{}, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Call{}, }, If{BoolOp{And{}, Compare{NotEq{}, Str{}, }, Compare{Call{}, Add{}, Lt{}, }, }, Assign{Call{}, }, AugAssign{Add{}, }, Assign{Add{}, Call{}, }, If{Compare{Str{}, }, Expr{}, }, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Call{}, }, If{Compare{Str{}, }, AugAssign{Add{}, Str{}, }, AugAssign{Add{}, Call{Call{}, Add{}, }, }, }, }, Return{}, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Call{}, }, If{Compare{Str{}, }, AugAssign{Add{}, Str{}, }, If{Compare{Call{}, Add{}, Gt{}, }, AugAssign{Add{}, Call{Call{}, Add{}, Sub{}, }, }, }, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, If{Compare{Lt{}, }, Assign{UnaryOp{USub{}, }, Mod{}, }, Assign{}, Assign{Mod{}, }, }, For{Call{Call{}, }, If{Compare{Str{}, }, AugAssign{Add{}, Str{}, }, Expr{}, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Call{}, }, If{Compare{NotEq{}, Str{}, }, Assign{Call{}, }, AugAssign{Add{}, }, If{Compare{LtE{}, }, Assign{Call{}, }, AugAssign{Add{}, }, }, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, For{If{Compare{Call{}, }, AugAssign{Add{}, Call{}, }, If{Compare{Sub{}, Call{}, Add{}, Gt{}, }, AugAssign{Add{}, Call{Call{}, Add{}, }, }, AugAssign{Add{}, }, }, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Call{}, }, If{Compare{Call{}, }, Assign{Add{}, Str{}, }, If{Compare{Call{}, Add{}, Gt{}, }, Assign{Call{Call{}, Add{}, Sub{}, Add{}, }, }, }, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, For{If{Compare{Str{}, }, AugAssign{Add{}, Str{}, }, Assign{Call{}, Add{}, }, AugAssign{Add{}, Call{}, }, }, }, Return{}, }, }, }
1;root{Module{FunctionDef{Assign{List{}, }, Assign{}, For{Call{Call{}, }, If{Compare{Call{}, Gt{}, }, Assign{}, }, Expr{Call{Attribute{}, Call{Call{}, Add{}, Add{}, }, }, }, Assign{}, }, Return{Call{Attribute{Str{}, }, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Call{}, }, If{Compare{Str{}, }, AugAssign{Add{}, Str{}, }, Assign{Call{Call{}, Add{}, Mod{}, }, }, If{Compare{Call{}, Gt{}, }, Expr{}, }, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Call{}, }, If{Compare{Str{}, }, Assign{Add{}, Str{}, }, Assign{Call{}, Add{}, }, If{BoolOp{And{}, Compare{Gt{}, }, Compare{Lt{}, }, }, AugAssign{Sub{}, }, }, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, For{Assign{Call{}, Add{}, }, If{Compare{Str{}, }, AugAssign{Add{}, Str{}, }, Continue{}, If{Compare{Gt{}, Call{Str{}, }, }, AugAssign{Sub{}, Call{Str{}, }, Sub{}, Call{Str{}, }, Add{}, }, }, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, For{Assign{Add{}, Call{Call{}, Sub{}, Add{}, Mod{}, Add{}, }, }, }, Return{}, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, Assign{Str{}, }, For{If{Compare{Str{}, }, AugAssign{Add{}, Str{}, }, If{Compare{Call{}, Add{}, Gt{}, Call{Str{}, }, }, Assign{Call{Call{}, Add{}, Sub{}, }, }, AugAssign{Add{}, }, }, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, Assign{}, For{Call{Call{}, }, Assign{Call{}, }, AugAssign{Add{}, }, If{Compare{Gt{}, }, Assign{Sub{}, }, }, If{Compare{Str{}, }, AugAssign{Add{}, Str{}, }, AugAssign{Add{}, }, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, For{Assign{Call{}, Add{}, }, If{Compare{Gt{}, }, AugAssign{Sub{}, }, }, If{Compare{Call{Str{}, }, Add{}, }, Assign{Call{Str{}, }, }, }, Assign{Call{}, }, AugAssign{Add{}, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, Assign{}, For{Assign{Call{}, }, If{Compare{Add{}, Gt{}, }, AugAssign{Add{}, Call{Call{Sub{}, Add{}, }, }, }, If{Expr{}, }, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, Assign{Call{}, }, For{If{Compare{Str{}, }, Assign{Add{}, Str{}, }, Assign{Call{}, }, Assign{Add{}, Sub{}, Call{Str{}, }, }, Assign{BitAnd{}, UnaryOp{UAdd{}, Call{Str{}, }, }, }, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, For{If{Compare{Call{}, }, AugAssign{Add{}, Call{Call{}, }, }, If{Compare{Call{}, Gt{}, Sub{}, }, AugAssign{Add{}, Call{Call{}, Add{}, Sub{}, }, }, Expr{Mod{}, }, }, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Call{}, }, Assign{Call{}, }, If{Compare{NotEq{}, }, If{Compare{Add{}, GtE{}, }, Assign{}, }, AugAssign{Add{}, }, Expr{}, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Call{}, }, For{Call{Call{}, }, Assign{Call{}, }, If{Compare{NotEq{}, }, If{Compare{Add{}, LtE{}, }, Assign{Add{}, }, Assign{Call{}, }, }, Expr{}, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Call{}, }, If{Compare{NotEq{}, Str{}, }, Assign{Call{}, Add{}, }, If{Compare{Gt{}, Call{Str{}, }, }, Assign{Sub{}, }, }, AugAssign{Add{}, Call{}, }, }, Expr{}, }, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, Assign{Call{Attribute{}, }, }, For{Call{Call{}, }, If{Compare{Str{}, }, Assign{Add{}, Str{}, }, Continue{}, Assign{Call{}, Add{}, }, }, }, }, }, }
