31;root{Module{FunctionDef{Assign{Subscript{Slice{}, }, }, }, }, }
26;root{Module{FunctionDef{Assign{Str{}, }, Assign{Str{}, }, For{Call{Call{}, }, If{Compare{Mod{}, }, Assign{Add{}, }, Assign{Add{}, }, }, }, Return{Add{}, }, }, }, }
9;root{Module{FunctionDef{If{Compare{Call{}, Mod{}, }, Return{Subscript{Slice{}, }, Add{}, Subscript{Slice{}, }, }, Return{Subscript{Slice{}, }, Add{}, Subscript{Slice{}, }, }, }, }, }, }
9;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Call{}, }, AugAssign{Add{}, }, }, For{Call{Call{}, }, AugAssign{Add{}, Subscript{Index{Call{}, Sub{}, }, }, }, }, Return{}, }, }, }
8;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Call{}, }, If{Compare{Mod{}, }, AugAssign{Add{}, }, }, }, For{Call{Call{}, }, If{Compare{Mod{}, NotEq{}, }, AugAssign{Add{}, Subscript{Index{UnaryOp{USub{}, }, }, }, }, }, }, Return{}, }, }, }
7;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Call{}, Add{}, }, If{Compare{Mod{}, }, Assign{Subscript{Index{UnaryOp{USub{}, }, }, }, Add{}, }, AugAssign{Add{}, Subscript{Index{UnaryOp{USub{}, }, }, }, }, }, }, Return{}, }, }, }
4;root{Module{FunctionDef{Assign{Str{}, }, AugAssign{Add{}, Subscript{Slice{}, }, }, AugAssign{Add{}, Subscript{Subscript{Slice{}, }, Slice{}, }, }, Return{}, }, }, }
4;root{Module{FunctionDef{Assign{Subscript{Slice{}, }, }, Assign{Str{}, }, For{Call{Call{}, Div{}, }, AugAssign{Add{}, Subscript{Index{Mult{}, }, }, }, }, For{Call{Call{}, Div{}, }, AugAssign{Add{}, Subscript{Index{Call{}, Sub{}, Mult{}, Sub{}, }, }, }, }, Return{}, }, }, }
3;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Call{}, }, If{Compare{Mod{}, }, Assign{Subscript{Index{Call{}, Sub{}, Sub{}, }, }, Add{}, }, Assign{Add{}, Subscript{Index{Call{}, Sub{}, Sub{}, }, }, }, }, }, Return{}, }, }, }
3;root{Module{FunctionDef{Assign{Call{}, }, Assign{}, For{Call{Call{}, }, If{Compare{Mod{}, }, Assign{}, AugAssign{Add{}, }, Assign{Subscript{Index{Call{}, Sub{}, }, }, }, }, }, }, }, }
3;root{Module{FunctionDef{If{Compare{Call{}, FloorDiv{}, }, Assign{Subscript{Slice{}, }, }, Assign{Subscript{Slice{}, }, }, Assign{Subscript{Slice{}, }, }, Assign{Subscript{Slice{}, }, }, }, Return{Add{}, }, }, }, }
2;root{Module{FunctionDef{Assign{}, Assign{Call{}, Sub{}, }, Assign{Str{}, }, For{Call{}, If{Mod{}, AugAssign{Add{}, Tuple{}, }, AugAssign{Add{}, }, AugAssign{Add{}, Tuple{}, }, AugAssign{Sub{}, }, }, }, Return{}, }, }, }
2;root{Module{FunctionDef{Assign{Str{}, }, Assign{Str{}, }, Assign{}, For{If{Compare{Mod{}, }, AugAssign{Add{}, }, }, If{Compare{Mod{}, }, Assign{Add{}, }, }, AugAssign{Add{}, }, }, Return{Add{}, }, }, }, }
2;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Call{}, Div{}, }, AugAssign{Add{}, Subscript{Index{Mult{}, }, }, }, }, For{Call{Call{}, Div{}, Sub{}, }, AugAssign{Add{}, Subscript{Subscript{Slice{}, }, Index{Mult{}, Add{}, }, }, }, }, Return{}, }, }, }
2;root{Module{FunctionDef{Assign{Subscript{Slice{}, }, }, Assign{List{}, }, For{Call{Call{}, }, Assign{Add{}, }, Assign{Subscript{Index{Add{}, }, }, Add{}, }, }, Return{}, }, }, }
2;root{Module{FunctionDef{Assign{Call{}, }, Assign{Call{}, }, Assign{Call{Str{}, }, }, Assign{Call{Str{}, }, }, Assign{Call{Str{}, }, }, Assign{}, If{Compare{Mod{}, }, For{Call{Div{}, }, Assign{Subscript{Index{Mult{}, }, }, }, }, }, }, }, }
2;root{Module{FunctionDef{Assign{Str{}, }, Assign{Call{}, }, While{Compare{LtE{}, Call{}, Sub{}, }, AugAssign{Add{}, }, AugAssign{Add{}, }, }, AugAssign{Sub{}, }, While{Compare{GtE{}, }, AugAssign{Add{}, }, AugAssign{Sub{}, }, }, Return{}, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Call{}, Div{}, }, If{Compare{Subscript{Index{Mult{}, }, }, NotEq{}, }, AugAssign{Add{}, Subscript{Index{Mult{}, }, }, }, }, }, For{Call{Call{}, Div{}, }, If{Compare{Subscript{Subscript{Slice{}, }, Index{Mult{}, }, }, NotEq{}, }, Expr{}, }, }, }, }, }
1;root{Module{FunctionDef{Assign{ListComp{comprehension{Call{Call{}, }, }, }, }, For{Call{Call{}, }, If{Mod{}, Assign{Subscript{Index{Sub{}, FloorDiv{}, }, }, }, Assign{Subscript{Index{FloorDiv{}, }, }, }, }, }, Assign{Str{}, }, For{AugAssign{Add{}, }, }, Return{}, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, Assign{Subscript{Slice{}, }, }, Assign{Call{}, Mod{}, }, For{If{Assign{Add{}, }, Assign{Add{}, }, }, Assign{Sub{}, }, }, Expr{}, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, Assign{Str{}, }, For{Call{Call{}, }, AugAssign{Add{}, }, }, For{Call{Call{}, }, AugAssign{Add{}, }, }, Assign{Subscript{Slice{}, }, }, AugAssign{Add{}, }, Return{}, }, }, }
1;root{Module{FunctionDef{Assign{Call{}, }, Assign{Tuple{Str{}, Str{}, Str{}, }, }, Assign{Call{}, }, Assign{Call{}, }, Assign{Call{}, }, Assign{}, If{Compare{Mod{}, }, For{Call{}, Pass{}, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Call{}, }, If{Compare{Lt{}, Call{}, Div{}, }, AugAssign{Add{}, Subscript{Index{Mult{}, }, }, }, AugAssign{Add{}, Subscript{Index{Call{}, Sub{}, Sub{}, Mult{}, }, }, }, }, }, Return{}, }, }, }
1;root{Module{FunctionDef{Assign{}, Assign{Str{}, }, Assign{}, For{Call{Call{}, Div{}, }, If{AugAssign{Add{}, Add{}, Subscript{Index{Call{}, Sub{}, Sub{}, }, }, }, Assign{}, AugAssign{Add{}, Subscript{Index{Call{}, Sub{}, Sub{}, }, }, Add{}, }, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, If{Compare{Call{}, Mod{}, }, Assign{}, Assign{}, }, For{Call{Call{}, }, AugAssign{Add{}, }, }, If{For{Call{Call{}, }, AugAssign{Add{}, }, }, }, }, }, }
1;root{Module{FunctionDef{If{Compare{Call{}, Mod{}, }, Assign{Str{}, }, AugAssign{Add{}, Subscript{Slice{}, }, }, AugAssign{Add{}, Subscript{Subscript{Slice{}, }, Slice{}, }, }, Return{}, Assign{Str{}, }, AugAssign{Add{}, Subscript{Slice{}, }, }, AugAssign{Add{}, Subscript{Subscript{Subscript{Slice{}, }, Slice{}, }, Slice{}, }, }, Return{}, }, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Call{}, }, AugAssign{Add{}, IfExp{Compare{Lt{}, Call{}, FloorDiv{}, }, Subscript{Index{Mult{}, }, }, Subscript{Index{UnaryOp{USub{}, Sub{}, Call{}, FloorDiv{}, }, Add{}, }, }, }, }, }, Return{}, }, }, }
1;root{Module{FunctionDef{Assign{List{}, }, Assign{}, For{If{Compare{Mod{}, }, Expr{Call{Attribute{}, }, }, }, AugAssign{Add{}, }, }, Assign{}, For{Subscript{Slice{}, }, If{Compare{Mod{}, }, Expr{Call{Attribute{}, }, }, }, AugAssign{Add{}, }, }, Expr{}, }, }, }
1;root{Module{FunctionDef{Assign{List{}, }, Assign{}, For{If{Compare{Mod{}, }, Expr{Call{Attribute{}, }, }, }, AugAssign{Add{}, }, }, Assign{}, If{Compare{Call{}, Mod{}, }, Assign{}, }, For{Subscript{Slice{}, }, If{Compare{Mod{}, }, Expr{}, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Tuple{}, Tuple{Str{}, Str{}, Str{}, }, }, For{Call{Call{}, }, If{Compare{Mod{}, }, AugAssign{Add{}, }, AugAssign{Add{}, }, }, }, For{Call{Call{}, Add{}, }, AugAssign{Add{}, Subscript{Index{Sub{}, Mult{}, }, }, }, }, AugAssign{Add{}, }, Expr{}, }, }, }
1;root{Module{FunctionDef{Assign{Call{}, }, Assign{ListComp{Str{}, comprehension{Call{}, }, }, }, Assign{}, Assign{Call{}, Sub{}, }, For{Call{}, If{Compare{Mod{}, }, Assign{}, }, }, }, }, }
1;root{Module{FunctionDef{Assign{}, Assign{Str{}, }, Assign{Call{}, Div{}, }, For{Call{}, AugAssign{Add{}, }, AugAssign{Add{}, }, }, Assign{Call{}, Sub{}, }, For{Call{Call{}, Sub{}, }, AugAssign{Add{}, }, AugAssign{Add{}, }, }, Return{}, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Call{}, Add{}, }, If{BoolOp{Or{}, BoolOp{And{}, Compare{Mod{}, }, Compare{Call{}, Mod{}, }, }, BoolOp{And{}, Compare{Mod{}, }, Compare{Call{}, Mod{}, }, }, }, Assign{Subscript{Index{UnaryOp{USub{}, }, }, }, Add{}, }, Assign{Add{}, Subscript{Index{UnaryOp{USub{}, }, }, }, }, }, }, Return{}, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Call{}, }, AugAssign{Add{}, Subscript{Index{Call{}, Sub{}, Sub{}, }, }, }, }, Return{}, }, FunctionDef{Assign{Subscript{Slice{}, }, }, AugAssign{Add{}, Call{Subscript{Slice{}, }, }, }, Return{}, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, Assign{}, Assign{}, While{Compare{Call{}, Lt{}, Call{}, }, AugAssign{Add{}, }, If{Compare{Add{}, Lt{}, Call{}, }, AugAssign{Add{}, }, Assign{}, }, }, }, }, }
1;root{Module{FunctionDef{Assign{List{}, }, For{Call{Call{}, }, If{Compare{Mod{}, }, Expr{Call{Attribute{}, }, }, }, }, For{Call{Call{}, }, If{Compare{Mod{}, }, Expr{Call{Attribute{}, Subscript{Index{Call{}, Sub{}, }, }, }, }, }, }, Expr{}, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Call{}, }, If{Compare{Mod{}, }, AugAssign{Add{}, }, }, }, If{Compare{Call{}, Mod{}, }, Assign{}, Assign{}, }, For{Call{Call{}, Add{}, }, Expr{}, }, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Call{}, }, AugAssign{Add{}, }, }, If{Compare{Call{}, Mod{}, }, For{Call{Call{}, Sub{}, }, AugAssign{Add{}, }, }, }, If{Compare{Call{}, Mod{}, }, Expr{}, }, }, }, }
1;root{Module{FunctionDef{Assign{Subscript{Slice{}, }, }, Assign{Subscript{Slice{}, }, }, Assign{Subscript{Slice{}, }, }, Assign{Subscript{Slice{}, }, }, Assign{Call{}, }, If{Compare{Mod{}, }, Return{Add{}, }, Return{Add{}, }, }, }, }, }
1;root{Module{FunctionDef{Assign{}, Assign{Str{}, }, While{Compare{LtE{}, Call{}, Sub{}, }, Assign{Add{}, }, Assign{Add{}, }, }, If{Compare{Call{}, Mod{}, }, Assign{Call{}, Sub{}, }, Assign{Call{}, Sub{}, }, }, While{Compare{GtE{}, }, Assign{Add{}, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Subscript{Slice{}, }, }, Assign{Str{}, }, For{Call{Call{}, }, If{Compare{Mod{}, }, AugAssign{Add{}, }, }, }, For{Call{Call{}, }, If{Compare{Mod{}, }, AugAssign{Add{}, }, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Subscript{Slice{}, }, }, If{Compare{Call{}, Mod{}, }, AugAssign{Add{}, Subscript{Slice{}, }, }, Assign{Subscript{Slice{}, }, }, AugAssign{Add{}, Subscript{Slice{}, }, }, }, Return{}, }, }, }
