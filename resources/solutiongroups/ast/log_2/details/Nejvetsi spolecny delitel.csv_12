7;root{Module{FunctionDef{Assign{Call{}, }, While{Compare{GtE{}, }, If{BoolOp{And{}, Compare{Mod{}, }, Compare{Mod{}, }, }, Return{}, AugAssign{Sub{}, }, }, }, Return{}, }, }, }
def nsd(a, b):
    x = min(a, b)
    
    while  x >= 1:
        if (a % x == 0) and (b % x == 0):
            return x
        else:
            x -= 1
    return x 
def nsd(a, b):
    x = a
    while(x > 0):
        if(a % x == 0) and (b % x == 0):
            return x
        x -= 1 
def nsd(a, b):
   i=abs(a-b)
   while i>0:
        if a%i == 0 and b%i == 0:
         return i
        i-=1 
def nsd(a, b):
    fic = min(a,b)
    while not (a % fic == 0 and b % fic == 0):
        fic -= 1
    return fic
        
 
def nsd(a, b):
    x=a
    while x>0:
        if (a%x==0 and b%x==0): return x
        else: x=x-1
 
def nsd(a, b):
    i = a + b + 1
    while i != 0:
        if(a % i == 0 and b % i == 0):
            return i
        i-=1
 
def nsd(a, b):
    p=a
    while True:
        if b%a==0 or (b%p==0 and a%p==0):
            return p
        else: p-=1
        
    return 1
 
