48;root{Module{FunctionDef{Assign{Call{Attribute{}, Str{}, }, }, Assign{Str{}, }, For{If{Compare{Call{}, Gt{}, Call{}, }, Assign{}, }, }, Return{}, }, }, }
47;root{Module{FunctionDef{Assign{Call{Attribute{}, Str{}, }, }, Expr{Call{Attribute{}, }, }, Return{}, }, }, }
23;root{Module{FunctionDef{Assign{Call{Attribute{}, Str{}, }, }, Assign{Str{}, }, For{If{BoolOp{Or{}, Compare{Call{}, Lt{}, Call{}, }, BoolOp{And{}, Compare{Call{}, Call{}, }, Compare{Gt{}, }, }, }, Assign{}, }, }, Return{}, }, }, }
14;root{Module{FunctionDef{Assign{Call{Attribute{}, Str{}, }, }, Assign{}, Assign{}, For{Call{Call{}, }, If{Compare{Call{}, GtE{}, }, Assign{Call{}, }, Assign{}, }, }, Return{}, }, }, }
13;root{Module{FunctionDef{Assign{Str{}, }, Assign{Call{Attribute{}, Str{}, }, }, For{Call{Call{}, }, If{Compare{Call{}, GtE{}, Call{}, }, Assign{}, }, }, Return{}, }, }, }
9;root{Module{FunctionDef{Assign{Call{Attribute{}, Str{}, }, }, Assign{}, For{Call{Call{}, }, If{BoolOp{And{}, Compare{Call{}, GtE{}, Call{}, }, Compare{Call{}, Lt{}, Call{}, }, }, Assign{}, }, }, Return{}, }, }, }
8;root{Module{FunctionDef{Return{Call{Call{Attribute{}, }, keyword{}, }, }, }, }, }
6;root{Module{FunctionDef{Assign{Call{Attribute{}, Str{}, }, }, Expr{Call{Attribute{}, }, }, Assign{Str{}, }, For{Call{Call{}, }, If{Compare{Call{}, Gt{}, Call{}, }, Assign{}, }, Return{}, }, }, }, }
6;root{Module{FunctionDef{Assign{Call{Attribute{}, Str{}, }, }, Assign{}, For{Call{Call{}, Sub{}, }, If{Compare{Call{}, Gt{}, Call{Subscript{Index{Add{}, }, }, }, }, Assign{}, }, }, Return{}, }, }, }
4;root{Module{FunctionDef{Assign{Call{Attribute{}, Str{}, }, }, Assign{Str{}, }, For{If{Compare{Call{}, Gt{}, Call{}, }, Assign{}, }, If{BoolOp{And{}, Compare{Call{}, Call{}, }, Compare{Lt{}, }, }, Assign{}, }, }, Return{}, }, }, }
4;root{Module{FunctionDef{Assign{Call{Attribute{}, Str{}, }, }, Assign{Str{}, }, For{If{Compare{Call{}, Gt{}, Call{}, }, Assign{}, If{Compare{Call{}, Call{}, }, Assign{List{}, }, Expr{Call{Attribute{}, }, }, }, }, }, }, }, }
4;root{Module{FunctionDef{Assign{}, Assign{}, Assign{Call{Attribute{}, Str{}, }, }, For{Call{Call{}, }, If{Compare{Call{}, Gt{}, }, Assign{}, Assign{Call{}, }, }, }, }, }, }
4;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Attribute{}, }, If{Compare{Call{}, Gt{}, Call{}, }, Assign{}, If{Compare{Call{}, Call{}, }, Assign{Call{}, }, }, }, Return{}, }, }, }, }
3;root{Module{FunctionDef{Assign{Call{Attribute{}, Str{}, }, }, Expr{Call{Attribute{}, }, }, Expr{Call{Attribute{}, }, }, Assign{}, For{If{Compare{Call{}, GtE{}, Call{}, }, Assign{}, }, }, Return{}, }, }, }
3;root{Module{FunctionDef{Assign{Call{Attribute{}, }, }, Assign{}, For{If{Compare{Call{}, GtE{}, Call{}, }, If{Compare{Call{}, Call{}, }, Assign{Call{}, }, Assign{}, }, }, }, Return{}, }, }, }
3;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Attribute{}, Str{}, }, If{Compare{Call{}, Gt{}, Call{}, }, Assign{}, If{BoolOp{And{}, Compare{Call{}, Call{}, }, Compare{Lt{}, }, }, Assign{}, }, }, }, Return{}, }, }, }
3;root{Module{FunctionDef{Assign{Str{}, }, Assign{Call{Attribute{}, Str{}, }, }, For{Call{Call{}, }, If{BoolOp{And{}, Compare{Call{}, Gt{}, Call{Subscript{Index{Sub{}, }, }, }, }, Compare{Call{}, Lt{}, Call{Subscript{Subscript{Index{Sub{}, }, }, }, }, }, }, Assign{}, }, }, Return{}, }, }, }
2;root{Module{FunctionDef{Assign{Call{Attribute{}, Str{}, }, }, Assign{List{}, }, For{Call{Call{}, Sub{}, }, If{Compare{Lt{}, Subscript{Index{Add{}, }, }, }, Expr{Call{Attribute{}, }, }, }, }, Expr{Call{Attribute{}, }, }, Return{}, }, }, }
2;root{Module{FunctionDef{Assign{Call{Attribute{}, Str{}, }, }, Expr{Call{Attribute{}, }, }, Assign{}, Assign{}, While{Compare{Add{}, Lt{}, Call{}, }, If{Compare{Call{}, Gt{}, Call{Subscript{Index{Add{}, }, }, }, }, Assign{}, Assign{Subscript{Index{Add{}, }, }, }, }, }, }, }, }
2;root{Module{FunctionDef{Assign{}, Assign{}, Assign{Call{Attribute{}, Str{}, }, }, Expr{Call{Attribute{}, }, }, Assign{}, For{If{Compare{Call{}, Gt{}, }, Assign{Call{}, }, Assign{}, }, AugAssign{Add{}, }, }, }, }, }
2;root{Module{FunctionDef{Assign{Call{Attribute{}, Str{}, }, }, Assign{}, Assign{List{}, }, For{If{Compare{Call{}, Gt{}, }, Assign{}, }, }, For{If{Compare{Call{}, Call{}, }, Expr{Call{Attribute{}, }, }, }, }, Expr{Call{Attribute{}, }, }, }, }, }
2;root{Module{FunctionDef{Assign{Call{Attribute{}, Str{}, }, }, Assign{}, For{Call{Call{}, }, If{Compare{Call{}, Call{}, }, For{Call{Call{}, }, If{Compare{Call{}, Lt{}, Call{}, }, Expr{}, }, }, }, }, }, }, }
2;root{Module{FunctionDef{Assign{Call{Attribute{}, Str{}, }, }, Assign{List{}, }, For{Call{Call{}, }, Expr{Call{Attribute{}, Call{}, }, }, }, Assign{Call{}, }, Return{Subscript{Index{Call{Attribute{}, }, }, }, }, }, }, }
2;root{Module{FunctionDef{Assign{Call{Attribute{}, Str{}, }, }, For{Call{Call{}, }, If{Compare{Call{}, Lt{}, Call{}, }, Assign{}, If{Compare{Call{}, Call{}, }, Assign{}, Expr{}, }, }, }, }, }, }
2;root{Module{FunctionDef{Assign{Call{Attribute{}, Str{}, }, }, Expr{Call{Attribute{}, }, }, Assign{Str{}, }, Assign{}, For{If{Compare{Call{}, Gt{}, }, Assign{Call{}, }, Assign{}, }, }, Return{}, }, }, }
2;root{Module{FunctionDef{Assign{Call{Attribute{}, Str{}, }, }, Assign{Str{}, }, For{Call{Call{}, }, If{Compare{Call{}, Gt{}, Call{}, }, Assign{}, If{Compare{Call{}, Call{}, }, If{Compare{Call{}, Lt{}, Call{}, }, Assign{}, }, }, }, }, Expr{}, }, }, }
2;root{Module{FunctionDef{Assign{Call{Attribute{}, }, }, Assign{}, Assign{Call{}, }, For{Call{}, Assign{Call{}, }, If{Compare{GtE{}, }, Assign{}, Expr{}, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Call{Attribute{}, Str{}, }, }, Assign{List{}, }, For{Expr{Call{Attribute{}, Tuple{UnaryOp{USub{}, Call{}, }, }, }, }, }, Expr{Call{Attribute{}, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Call{Attribute{}, Str{}, }, }, Assign{Dict{List{}, }, }, For{If{Compare{Call{}, NotIn{}, }, Assign{Subscript{Index{Call{}, }, }, List{}, }, }, Expr{Call{Attribute{Subscript{Index{Call{}, }, }, }, }, }, }, Assign{Subscript{Index{Call{Call{Attribute{}, }, }, }, }, }, Expr{Call{Attribute{}, }, }, Return{}, }, }, }
1;root{Module{FunctionDef{Assign{Call{Attribute{}, }, }, Expr{Call{Attribute{}, }, }, Assign{ListComp{Call{}, comprehension{}, }, }, Assign{Subscript{Slice{}, }, }, Expr{Call{Attribute{}, }, }, Assign{Subscript{Index{Call{}, Sub{}, }, }, }, Assign{}, Assign{}, While{Compare{Lt{}, }, Assign{}, AugAssign{Add{}, }, }, Expr{}, }, }, }
1;root{Module{FunctionDef{Assign{Call{Attribute{}, Str{}, }, }, Assign{}, For{Call{Call{}, }, Assign{}, Assign{Call{}, }, For{Call{}, AugAssign{Add{}, }, }, If{Compare{Gt{}, Call{}, }, Expr{}, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Call{Attribute{}, Str{}, }, }, Assign{Call{ListComp{Call{}, comprehension{}, }, }, }, Assign{List{}, }, For{If{Compare{Call{}, }, Expr{Call{Attribute{}, }, }, }, }, Expr{}, }, }, }
1;root{Module{FunctionDef{Assign{Call{Attribute{}, Str{}, }, }, Assign{}, Assign{Str{}, }, For{Assign{Call{}, }, If{Compare{Gt{}, }, Assign{}, Assign{}, If{Assign{}, }, }, }, }, }, }
1;root{Module{FunctionDef{Assign{}, Assign{List{}, }, Assign{Call{Attribute{}, Str{}, }, }, For{If{Compare{Call{}, Gt{}, }, Assign{Call{}, }, }, }, For{If{Compare{Call{}, }, Expr{Attribute{}, }, }, }, }, }, }
1;root{Module{FunctionDef{Assign{}, Assign{}, Assign{Str{}, }, Assign{Call{Attribute{}, Str{}, }, }, For{If{Compare{Call{}, Gt{}, }, Assign{Call{}, }, Assign{}, Expr{}, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Call{Attribute{}, Str{}, }, }, Assign{}, Assign{Str{}, }, For{If{Compare{Call{}, Gt{}, }, Assign{Call{}, }, Assign{}, If{BoolOp{And{}, Compare{Call{}, }, Compare{Gt{}, }, }, Assign{}, }, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, Assign{Str{}, }, Assign{}, Assign{}, For{Call{Call{}, }, If{Compare{Str{}, }, Assign{Str{}, }, Assign{}, Expr{}, }, }, }, }, }
1;root{Module{FunctionDef{Assign{List{}, }, For{Call{Call{}, }, If{Compare{Call{}, }, Expr{Call{Attribute{}, }, }, }, }, Return{}, }, FunctionDef{Assign{Call{Attribute{}, Str{}, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Call{Attribute{}, Str{}, }, }, Assign{}, Assign{}, For{Call{Call{}, }, If{BoolOp{Or{}, Compare{Lt{}, Call{}, }, BoolOp{And{}, Compare{Call{}, }, Compare{LtE{}, }, }, }, Assign{}, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Call{Attribute{}, Str{}, }, }, Assign{}, For{If{Compare{Call{}, Gt{}, }, Assign{Call{}, }, }, }, Assign{List{}, }, For{If{Compare{Call{}, }, Expr{Call{Attribute{}, }, }, }, }, Expr{}, }, }, }
1;root{Module{FunctionDef{Assign{Call{Attribute{}, Str{}, }, }, Assign{List{}, }, Assign{}, For{If{Compare{Call{}, GtE{}, }, Assign{Call{}, }, Expr{Call{Attribute{}, }, }, }, }, Return{Call{}, }, }, }, }
1;root{Module{FunctionDef{Assign{Call{Attribute{}, Str{}, }, }, Assign{}, For{Subscript{Slice{}, }, If{Compare{Call{}, Lt{}, Call{}, }, Assign{}, If{Compare{Call{}, Call{}, }, Assign{Call{List{}, }, }, }, }, }, Return{}, }, }, }
1;root{Module{FunctionDef{Assign{Call{Attribute{}, Str{}, }, }, Assign{List{}, }, Assign{List{}, }, For{Call{Call{}, }, Expr{Call{Attribute{}, Call{}, }, }, }, For{Call{Call{}, }, If{Compare{Call{}, }, Assign{}, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Call{Attribute{}, Str{}, }, }, Assign{Str{}, }, For{Call{Call{}, Add{}, }, If{Compare{Call{Subscript{Index{Sub{}, }, }, }, Gt{}, Call{}, }, Assign{Subscript{Index{Sub{}, }, }, }, If{Compare{Call{Subscript{Index{Sub{}, }, }, }, Call{}, }, If{Compare{Call{Subscript{Subscript{Index{Sub{}, }, }, }, }, Lt{}, Call{}, }, Assign{}, }, }, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Call{Attribute{}, Str{}, }, }, Assign{Str{}, }, For{If{BoolOp{And{}, Compare{Call{}, GtE{}, Call{}, }, Compare{Call{}, GtE{}, Call{}, }, }, Assign{Call{}, }, Assign{}, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Call{Attribute{}, Str{}, }, }, Expr{Call{Attribute{}, Lambda{Call{}, Sub{}, Call{}, }, }, }, Assign{Call{}, }, Assign{List{}, }, For{If{Compare{Call{}, }, Expr{Call{Attribute{}, }, }, }, }, Expr{Call{Attribute{}, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Call{Attribute{}, Str{}, }, }, Assign{}, For{If{Compare{Call{}, Gt{}, }, Assign{List{}, }, Expr{Call{Attribute{}, }, }, Assign{Call{}, }, If{Compare{Call{}, }, Expr{}, }, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Call{Attribute{}, Str{}, }, }, For{Call{Call{}, }, For{Call{Call{}, Sub{}, Sub{}, }, If{Compare{Call{}, Gt{}, Call{Subscript{Index{Add{}, }, }, }, }, Assign{Tuple{Subscript{Index{Add{}, }, }, }, Tuple{Subscript{Index{Add{}, }, }, }, }, }, }, }, }, }, }
1;root{Module{FunctionDef{For{Call{Call{}, }, If{Compare{Gt{}, }, Return{}, If{Compare{Lt{}, }, Return{}, }, }, }, }, FunctionDef{Assign{}, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, Assign{Call{Attribute{}, Str{}, }, }, For{Call{Call{}, }, If{Compare{Call{}, Gt{}, Call{}, }, Assign{}, }, If{BoolOp{And{}, Compare{Call{}, Call{}, }, Compare{Lt{}, }, }, Assign{}, }, }, }, }, }
1;root{Module{FunctionDef{Assign{}, Assign{Call{Attribute{}, Str{}, }, }, Expr{Call{Attribute{}, }, }, For{Call{Call{}, }, Assign{}, If{Compare{Lt{}, Call{}, }, Assign{Call{}, }, Expr{}, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Str{}, }, Assign{Call{Attribute{}, Str{}, }, }, Assign{}, For{Call{Call{}, }, If{BoolOp{Or{}, Compare{Call{}, Gt{}, Call{}, }, BoolOp{And{}, Compare{Call{}, Call{}, }, Compare{Lt{}, }, }, }, Assign{}, }, }, Return{}, }, }, }
1;root{Module{FunctionDef{Assign{}, Assign{Str{}, }, Assign{Call{Attribute{}, Str{}, }, }, For{If{BoolOp{And{}, Compare{Call{}, GtE{}, }, Compare{Gt{}, }, }, Assign{Call{}, }, Assign{}, }, }, Return{}, }, }, }
1;root{Module{FunctionDef{Assign{Call{Attribute{}, Str{}, }, }, Assign{List{}, }, Assign{}, For{If{Compare{Call{}, Gt{}, }, Assign{List{}, }, Assign{Call{}, }, }, If{Compare{Call{}, }, Expr{Call{Attribute{}, }, }, }, }, Expr{Call{Attribute{}, }, }, }, }, }
1;root{Module{FunctionDef{Assign{Call{Attribute{}, Str{}, }, }, Assign{List{}, }, For{Call{Call{}, }, Expr{Call{Attribute{}, List{Call{}, }, }, }, Expr{Call{Attribute{}, }, }, }, Return{}, }, }, }
1;root{Module{FunctionDef{Assign{}, Assign{Str{}, }, For{Call{Attribute{}, Str{}, }, If{Compare{LtE{}, Call{}, }, Assign{Call{}, }, Assign{}, }, }, Return{}, }, }, }
1;root{Module{FunctionDef{Assign{Call{Attribute{}, }, }, Expr{Call{Attribute{}, }, }, Assign{}, For{If{Compare{Call{}, Gt{}, }, Assign{Call{}, }, }, }, For{If{Compare{Call{}, }, Return{}, }, }, }, }, }
