6;root{Module{FunctionDef{Assign{Str{}, }, Assign{Str{}, }, While{Compare{Gt{}, }, If{Compare{Mod{}, }, Assign{Add{}, Str{}, }, AugAssign{Add{}, Str{}, }, }, Assign{FloorDiv{}, }, }, For{Call{Call{}, }, AugAssign{Add{}, Subscript{Index{UnaryOp{USub{}, }, Sub{}, }, }, }, }, Print{}, Return{}, }, }, }
def binarne(d):
    b=""
    B=""
    while d > 0:
        if d% 2 == 0: b = b + "0"
        else: b+="1"
        d = d // 2
    for i in range(len(b)):
        B+= b[-i-1]
    print B
    return d


def binarne(d):
    b=""
    B=""
    while d > 0:
        if d% 2 == 0: b = b + "0"  
        else: b+="1"
        d = d // 2
    for i in range(len(b)):
        B+= b[-i-1]
    print B
    return d

def binarne(d):
    b=""
    B=""
    while d > 0:
        if d% 2 == 0: b+="0"
        else: b+="1"
        d = d // 2
    for i in range(len(b)):
        B+= b[-i-1]
    print B
    return d

def binarne(d):
    b=""
    B=""
    while d > 0:
        if d% 2 == 0: b+="0"
        else: b+="1"
        d = d // 2
    for i in range(len(b)):
        B+= b[-i-1]
    print B
    return d

def binarne(n):
    b=""
    B=""
    while n > 0:
        if n % 2 == 0: b+="0"
        else: b+="1"
        n = n // 2
    
    for i in range(len(b)):
        B+= b[-i-1]
    print B
    return n

def binarne(d):
    b=""
    B=""
    while d > 0:
        if d% 2 == 0: b+="0"
        else: b+="1"
        d = d // 2
    for i in range(len(b)):
        B+= b[-i-1]
    print B
    return d

 
