6;root{Module{FunctionDef{Assign{Str{}, }, For{Call{Call{}, Add{}, }, AugAssign{Add{}, Subscript{Slice{Call{}, Sub{}, Call{}, }, }, }, }, If{Return{}, Return{}, }, }, }, }
def palindrom(text):
    otoc = ""
    for i in range(len(text)+1):
        otoc += text[len(text)-i::len(text)]
    if otoc == text:
        return True
    else:
        return False
 
def palindrom(text):
    novy = ""
    for i in range(len(text)):
        novy += text[len(text) -i -1]
    if (novy == text):
        return True
    else:
        return False
 
def palindrom(S):
   pal = ""
   for i in range(1,len(S)+1):
      pal = pal + S[len(S)-i]
   if pal == S:
      return True
   else:
      return False 
def palindrom(text):
    obrat = ""
    for i in range(len(text)):      
        obrat = obrat + text[len(text)-i-1]
    if obrat==text:
        return True
    else:
        return False 
def palindrom(text):
    obrat = ""
    for i in range(len(text)):      
        obrat = obrat + text[len(text)-i-1]
    if obrat==text:
        return True
    else:
        return False 
def palindrom(text):
    list1=""
    for i in range (len(text)):
        list1=list1 + text[len(text)-1-i]
    if list1==text:
        return True
    else:
        return False
 
