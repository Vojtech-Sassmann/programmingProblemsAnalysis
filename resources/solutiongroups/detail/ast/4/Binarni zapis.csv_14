4;root{Module{FunctionDef{Assign{Str{}, }, While{Compare{Gt{}, }, If{Compare{Mod{}, }, AugAssign{Add{}, Str{}, }, AugAssign{Add{}, Str{}, }, }, Assign{Div{}, }, }, Return{Call{Subscript{Slice{}, }, }, }, }, }, }
def binarne(n):
    new = ""
    while n>0:
        if n % 2 == 0:
            new += "0"
        else: new += "1"
        n = n / 2
    return int(new[::-1])
def binarne(n):
    new = ""
    while n>1:
        if n % 2 == 0:
            new += "0"
        else: new += "1"
        n = n / 2
    print int(new[::-1])
def binarne(n):
    new = ""
    while n>1:
        if n % 2 == 0:
            new += "0"
        else: new += "1"
        n = int(n) / 2
    print int(new[::-1])
def binarne(n):
    new = ""
    while n>0:
        if n % 2 == 0:
            new += "0"
        else: 
            new += "1"
        n = int(n/2)
    print int(new[::-1])
