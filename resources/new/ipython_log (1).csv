id;user;item;answer;correct;moves;responseTime;time
1;5622;1;def numbers(n):break    print(n)break;0;-1;4750;2017-11-21 18:33:24
2;5622;1;def numbers(n):break    print(n)break;0;-1;34700;2017-11-21 18:43:09
3;12;1;def numbers(n):break    print(n)break;0;-1;6400;2017-11-21 19:50:17
4;12;1;def numbers(n):break    print(n)break;0;-1;9500;2017-11-21 19:50:20
5;12;1;def numbers(n):break    print(1)break    print(2)break    print(3)break;0;-1;42150;2017-11-21 19:50:53
6;12;1;def numbers(n):break    for i in range(n):break        print(i+1)break;1;-1;62650;2017-11-21 19:51:13
7;1383430;1;def numbers(n):break    print(1)break    print(2)break    print(3)breakbreak;0;-1;81000;2017-11-21 19:55:53
8;1383430;1;def numbers(n):break	print(n)break;0;-1;105750;2017-11-21 19:56:17
9;1383430;1;def numbers(n):break	print(n)break;0;-1;134950;2017-11-21 19:56:46
10;1383430;4;def alphabet(n):break    for i in range(n):break        print('A')break        print('B')        break;0;-1;31500;2017-11-21 19:58:45
11;12;3;def factorial(n):break    f = 1break    for i in range(n):break        f = f*ibreak    return fbreak;0;-1;143300;2017-11-21 20:08:41
12;12;3;def factorial(n):break    f = 1break    for i in range(n):break        f = f*(i+1)break    return fbreak;1;-1;191000;2017-11-21 20:09:29
13;12;2;def fibonacci(n):break    for i in range(n):break    	print(i)break;0;-1;4600;2017-11-21 20:10:48
14;12;2;def fibonacci(n):break    a, b = 1, 1break    for i in range(n):    	break        print(a)break        a, b = b, a+b        break;1;-1;65950;2017-11-21 20:11:50
15;12;7;def divisors(n):break    for i in range(1, n+1):break        if n%i == 0:break    		print(i, " ")break;0;-1;94750;2017-11-21 20:13:34
16;12;5;def duplication(text):break    o = ""break    for l in text:break        o += l + lbreak    return obreak;1;-1;22950;2017-11-21 20:23:19
17;5622;1;def numbers(n):break    print(n)break;0;-1;3550;2017-11-21 22:04:03
18;1383430;1;def numbers(n):break    print(n)break;0;-1;1850;2017-11-22 14:18:15
19;1383430;1;def numbers(n):break    print(n)break;0;-1;85000;2017-11-22 18:33:22
20;1383430;1;def numbers(n):break    for i in range(1, n + 1):break        print(i)break    print()break;1;-1;98900;2017-11-22 18:33:36
21;1383430;1;def numbers(n):break    for i in range(1, n + 1):break        print(i)break    print()break;1;-1;1750;2017-11-22 18:34:53
22;1383430;1;def numbers(n):break    print(n)break;0;-1;13900;2017-11-22 18:44:18
23;1383430;1;def numbers(n):break    print(n)break;0;-1;1350;2017-11-22 18:45:17
24;1383430;1;def numbers(n):break    print(n)break;0;-1;2000;2017-11-22 18:45:31
25;1383430;1;def numbers(n):break    print(n)break;0;-1;4100;2017-11-22 18:46:00
26;1383430;1;def numbers(n):break    print(n)break;0;-1;1250;2017-11-22 18:48:45
27;1383430;1;def numbers(n):break    print(n)break;0;-1;2450;2017-11-22 18:48:46
28;1383430;1;def numbers(n):break    print(n)break;0;-1;3650;2017-11-22 18:48:47
29;1383430;1;def numbers(n):break    print(n)break;0;-1;550;2017-11-22 18:48:49
30;1383430;1;def numbers(n):break    print(n)break;0;-1;2100;2017-11-22 18:48:50
31;1383430;1;def numbers(n):break    print(n)break;0;-1;3700;2017-11-22 18:48:52
32;1383430;1;def numbers(n):break    print(n)break;0;-1;6650;2017-11-22 18:48:55
33;1383430;1;def numbers(n):break    print(n)break;0;-1;9900;2017-11-22 18:48:58
34;1383430;1;def numbers(n):break    print(n)break;0;-1;12000;2017-11-22 18:49:00
35;1383430;1;def numbers(n):break    print(n)break;0;-1;13150;2017-11-22 18:49:01
36;1383430;1;def numbers(n):break    print(n)break;0;-1;13950;2017-11-22 18:49:02
37;1383430;1;def numbers(n):break    print(n)break;0;-1;600;2017-11-22 18:49:50
38;1383430;1;def numbers(n):break    print(n)break;0;-1;6600;2017-11-22 18:49:56
39;1383430;1;def numbers(n):break    print(n)break;0;-1;1250;2017-11-22 18:50:28
40;1383430;1;def numbers(n):break    print(n)break;0;-1;6600;2017-11-22 18:51:41
41;1383430;1;def numbers(n):break    print(n)break;0;-1;1900;2017-11-22 18:52:03
42;1383430;1;def numbers(n):break    for i in range(1, n + 1):break        print(i,' ')break    print();0;-1;52100;2017-11-22 18:53:37
43;1383430;1;def numbers(n):break    for i in range(1, n + 1):break        print(i,' ')break    print();1;-1;2600;2017-11-22 18:58:28
44;1383430;1;def numbers(n):break    for i in range(1, n + 1):break        print(i,' ')break    print();1;-1;1450;2017-11-22 18:58:37
45;1383430;1;def numbers(n):break    print(n)break;0;-1;650;2017-11-22 18:59:16
46;1383430;1;def numbers(n):break    print(n)break;0;-1;4750;2017-11-22 18:59:20
47;1383430;1;def numbers(n):break    print(n)break;0;-1;8250;2017-11-22 18:59:23
48;1383430;1;def numbers(n):break    for i in range(1, n + 1):break        print(i,' ')break    print();0;-1;2200;2017-11-22 18:59:52
49;1383430;1;def numbers(n):break    for i in range(1, n + 1):break        print(i,'')break    print();0;-1;7800;2017-11-22 18:59:58
50;1383430;1;def numbers(n):break    for i in range(1, n + 1):break        print(i)break    print();1;-1;18200;2017-11-22 19:00:09
51;1383430;1;def numbers(n):break    for i in range(1, n + 1):break        print(i,' ')break    print()break;1;-1;4950;2017-11-22 19:02:03
52;1383430;1;def numbers(n):break    print(n)break;0;-1;68500;2017-11-22 19:04:28
53;1383430;1;def numbers(n):break    print(n)break;0;-1;203550;2017-11-22 19:06:44
54;1383430;1;def numbers(n):break    print(n)break;0;-1;700;2017-11-22 19:07:10
55;1383430;1;def numbers(n):break    for i in range(1, n + 1):break        print(i,' ')break    print()break;1;-1;10950;2017-11-22 19:07:24
56;1383430;1;def numbers(n):break    for i in range(1, n + 1):break        print(i,' ')break    print()break;1;-1;4900;2017-11-22 19:08:38
57;1383430;1;def numbers(n):break    for i in range(1, n + 1):break        print(i,' ')break    print()break;1;-1;1350;2017-11-22 19:08:42
58;1383430;1;def numbers(n):break    for i in range(1, n + 1):break        print(i,' ')break    print()break;1;-1;3100;2017-11-22 19:09:06
59;1383430;1;def numbers(n):break    print(n)break;0;-1;700;2017-11-22 19:09:18
60;1383430;1;def numbers(n):break    for i in range(1, n + 1):break        print(i,' ')break    print()break;1;-1;2500;2017-11-22 19:09:20
61;1383430;1;def numbers(n):break    for i in range(1, n + 1):break        print(i,' ')break    print()break;1;-1;1600;2017-11-22 19:09:36
62;1383430;1;def numbers(n):break    for i in range(1, n + 1):break        print(i,' ')break    print()break;1;-1;4450;2017-11-22 19:11:15
63;1383430;1;def numbers(n):break    for i in range(1, n + 1):break        print(i,' ')break    print()break;1;-1;1700;2017-11-22 19:12:16
64;1383430;1;def numbers(n):break    for i in range(1, n + 1):break        print(i,' ')break    print()break;1;-1;3950;2017-11-22 19:12:40
65;1383430;1;def numbers(n):break    print(n)break;0;-1;1850;2017-11-22 19:13:12
66;1383430;1;def numbers(n):break    for i in range(1, n + 1):break        print(i,' ')break    print()break;1;-1;8150;2017-11-22 19:13:24
67;1383430;1;def numbers(n):break    for i in range(1, n + 1):break        print(i,' ')break    print()break;1;-1;1450;2017-11-22 19:14:02
68;1383430;1;def numbers(n):break    print(n)break;0;-1;6950;2017-11-22 19:14:16
69;1383430;1;def numbers(n):break    for i in range(1, n + 1):break        print(i,' ')break    print()break;1;-1;14550;2017-11-22 19:14:24
70;1383430;1;def numbers(n):break    print(n)break;0;-1;17650;2017-11-22 19:16:02
71;1383430;1;def numbers(n):break    print(n)break;0;-1;550;2017-11-22 19:16:35
72;5622;1;def numbers(n):break    print(n)break;0;-1;8150;2017-11-22 19:37:48
73;5622;1;def numbers(n):break    print(n)break;0;-1;2650;2017-11-22 19:38:02
74;12;17;def five_multiples(num_list):break    out = []break    for x in num_list:break        if x % 5 == 0: break            out.append(x)break    return outbreak;1;-1;33200;2017-11-22 20:11:10
75;12;16;def max_pair_sum(num_list):break    return 0break;0;-1;3050;2017-11-22 20:11:23
76;12;16;def max_pair_sum(num_list):break    for i in range(len(num_list)):break        print(i)break    return 0break;0;-1;40800;2017-11-22 20:12:01
77;5622;4;def alphabet(n):break    for i in range(n):break        print('A')break;0;-1;36400;2017-11-22 20:22:18
78;5622;4;def alphabet(n):break    for i in range(n):break        print('A')break;0;-1;40100;2017-11-22 20:22:22
79;5622;4;def alphabet(n):break    for i in range(n):break        print('A')break;0;-1;41350;2017-11-22 20:22:23
80;5622;4;def alphabet(n):break    for i in range(n):break        print('A')break;0;-1;42550;2017-11-22 20:22:25
81;5622;4;def alphabet(n):break    for i in range(n):break        print('A')break;0;-1;43800;2017-11-22 20:22:26
82;5622;4;def alphabet(n):break    for i in range(n):break        print('A')break;0;-1;45200;2017-11-22 20:22:27
83;5622;4;def alphabet(n):break    for i in range(n):break        print('A')break;0;-1;47300;2017-11-22 20:22:29
84;5622;4;def alphabet(n):break    for i in range(n):break        print('A')break;0;-1;48400;2017-11-22 20:22:30
85;5622;4;def alphabet(n):break    for i in range(n):break        print('A')break;0;-1;49300;2017-11-22 20:22:31
86;5622;4;def alphabet(n):break    for i in range(n):break        print('A')break;0;-1;50400;2017-11-22 20:22:32
87;5622;4;def alphabet(n):break    for i in range(n):break        print('A')break;0;-1;51350;2017-11-22 20:22:33
88;5622;4;def alphabet(n):break    for i in range(n):break        print('A')break;0;-1;52450;2017-11-22 20:22:34
89;5622;4;def alphabet(n):break    for i in range(n):break        print('A')break;0;-1;53600;2017-11-22 20:22:36
90;5622;4;def alphabet(n):break    for i in range(n):break        print('A')break;0;-1;54300;2017-11-22 20:22:36
91;5622;4;def alphabet(n):break    for i in range(n):break        print('A')break;0;-1;55100;2017-11-22 20:22:37
92;1421683;8;def square(n):break    for i in range(n):break        for j in range(n):break        	print("#", end=" ")break        print();0;-1;85800;2017-11-22 21:40:04
93;1579170;6;def nonzero_product(numbers):break    result = 1break    for i in numbers:break        if (i is not 0):break            result *= ibreak    return resultbreak;1;-1;80900;2017-11-23 10:30:03
94;1579170;17;def five_multiples(num_list):break    result = []break    for i in num_list:break        if (i % 5) == 0:break            result.append(i)break    return resultbreak;1;-1;68600;2017-11-23 10:31:18
95;12;22;def print_primes(n):break    for i in range(n):break        print(i)break;0;-1;19450;2017-11-23 10:42:35
96;12;23;def greatest_common_divisor(a, b):break    return 1break;0;-1;13500;2017-11-23 10:51:38
97;1381950;6;def nonzero_product(numbers):break    product = 1break    for number in (number for number in numbers if number != 0):break    	product *= numberbreak    return productbreak;1;-1;203950;2017-11-23 11:08:57
98;1381950;16;def max_pair_sum(num_list):break    max_sum = sum(num_list[:2])break    for i in range(1, len(num_list)-2):break        max_sum = max(max_sum, sum(num_list[i:i+2]))break    return max_sumbreak;0;-1;111550;2017-11-23 11:11:07
99;1381950;16;def max_pair_sum(num_list):break    max_sum = sum(num_list[:2])break    for i in range(1, len(num_list)-1):break        max_sum = max(max_sum, sum(num_list[i:i+2]))break    return max_sumbreak;1;-1;164350;2017-11-23 11:12:02
100;1381950;17;def five_multiples(num_list):break    return [n for n in num_list if n % 5 == 0]break;1;-1;30800;2017-11-23 11:12:51
101;1533004;6;def nonzero_product(numbers):break    return 0break;0;-1;1850;2017-11-23 11:58:17
102;12;3;def factorial(n):break    return 1break;0;-1;2550;2017-11-23 14:15:14
103;1383430;1;def numbers(n):break    print(n)break;0;-1;1100;2017-11-23 14:18:40
104;1383430;1;def numbers(n):break    print(n)break;0;-1;700;2017-11-23 14:19:13
105;1383430;1;def numbers(n):break    print(n)break;0;-1;900;2017-11-23 14:19:16
106;1383430;1;def numbers(n):break    print(n)break;0;-1;700;2017-11-23 14:19:27
107;1383430;1;def numbers(n):break    print(n)break;0;-1;3950;2017-11-23 14:19:30
108;1383430;1;def numbers(n):break    print(n)break;0;-1;5550;2017-11-23 14:19:32
109;1383430;1;def numbers(n):break    print(n)break;0;-1;8000;2017-11-23 14:19:34
110;1383430;1;def numbers(n):break    print(n)break;0;-1;12100;2017-11-23 14:19:38
111;1383430;1;def numbers(n):break    print(n)break;0;-1;3200;2017-11-23 14:20:03
112;12;25;def count_a(text):break    return 2break;0;-1;6850;2017-11-23 14:25:57
113;12;26;def censorship(text):break    return "TXjXaXzXrXvX"break;0;-1;51050;2017-11-23 14:30:46
114;12;26;def censorship(text):break    return "TXjXaXzXrXvX"break;0;-1;55100;2017-11-23 14:30:50
115;12;27;def first_letters(text):break    last = " "break    out = ""break    ok = Truebreak    for l in text:break        if last == " " and l != " ":break            out += l + " "                         break        last = lbreak    print(out[:-1])break;1;-1;292750;2017-11-23 14:42:34
116;5622;1;def numbers(n):break    print(n)break;0;-1;800;2017-11-23 14:47:07
117;5622;1;def numbers(n):break    print(n)break;0;-1;2300;2017-11-23 14:47:09
118;12;29;def unique(mylist):break    return list(set(mylist))break;0;-1;9900;2017-11-23 15:00:22
119;12;30;def most_common(mylist):break    return 0break;0;-1;2050;2017-11-23 15:52:22
120;12;31;def find_longest_word(words_list):break    return "prase"break;0;-1;21300;2017-11-23 16:01:37
121;1580268;6;def nonzero_product(numbers):break    return 0break;0;-1;4150;2017-11-23 16:12:16
122;1580268;6;def nonzero_product(numbers):break    return 0break;0;-1;5950;2017-11-23 16:12:18
123;1505204;6;def nonzero_product(numbers):break    return 24break;0;-1;32150;2017-11-23 16:52:05
124;1505204;6;def nonzero_product(numbers):break    return 24break;0;-1;47400;2017-11-23 16:52:20
125;1505204;6;def nonzero_product(numbers):break    return 24break;0;-1;49000;2017-11-23 16:52:22
126;1505204;6;def nonzero_product(numbers):break    return 144break;0;-1;79700;2017-11-23 16:52:54
127;1505204;26;def censorship(text):break    return text + "X" + textbreak;0;-1;71200;2017-11-23 16:54:20
128;1505204;26;def censorship(text):break    return text + "X" + textbreak;0;-1;72650;2017-11-23 16:54:22
129;1505204;26;def censorship(text):break    return text + "X" + textbreak;0;-1;73200;2017-11-23 16:54:23
130;1505204;26;def censorship(text):break    return text + "X" + textbreak;0;-1;73600;2017-11-23 16:54:23
131;1505204;26;def censorship(text):break    return text + "X" + textbreak;0;-1;73850;2017-11-23 16:54:23
132;5622;1;def numbers(n):break    print(n)break;0;-1;2050;2017-11-23 17:33:01
133;1370893;6;def nonzero_product(numbers):break    return 0break;0;-1;13000;2017-11-23 18:04:23
134;1439349;6;print(nonzero_product(4, 0, 2, 0, 0, 3):break   break;0;-1;190800;2017-11-23 19:48:23
135;1439349;6;print(nonzero_product([0, 2, 3, 1, 8, 3]))break;0;-1;279050;2017-11-23 19:49:51
136;1466867;8;def square(n):break    for i in range(n):break        print("#", end=" ")break    print()break;0;-1;21150;2017-11-23 19:54:35
137;1466867;8;def square(n): for i in rangebreak    for i in range(n):break        print("#", end=" ")break    print()break;0;-1;34350;2017-11-23 19:57:36
138;1426035;6;def nonzero_product(numbers):break    return 0break;0;-1;6500;2017-11-23 20:08:30
139;1426035;6;def nonzero_product(numbers):break    return 0breakjewvkekae;0;-1;25200;2017-11-23 20:08:49
140;1581095;5;def duplication(text):break    break    return textbreak;0;-1;61200;2017-11-23 20:12:04
141;1581095;5;def duplication(text):break    break    return textbreak;0;-1;63600;2017-11-23 20:12:06
142;1581095;5;def duplication(text):break    my_text = ""break    for c in text:break        my.text.append(c)break        my.text.append(c)break    return my_textbreak;0;-1;107650;2017-11-23 20:12:50
143;1581095;5;def duplication(text):break    my_text = ""break    for c in text:break        my_text.append(c)break        my_text.append(c)break    return my_textbreak;0;-1;118800;2017-11-23 20:13:01
144;1581095;5;def duplication(text):break    my_text = ""break    for c in text:break        my_text + cbreak        my_text + cbreak    return my_textbreak;0;-1;136200;2017-11-23 20:13:19
145;1581095;5;def duplication(text):break    my_text = ""break    for c in text:break        my_text += cbreak        my_text += cbreak    return my_textbreak;1;-1;149550;2017-11-23 20:13:32
146;1581095;27;def first_letters(text):break    space = Truebreak    output = ""break    for c in text:break        if c == " ":break            space = Truebreak        else:break            if space:break                output += cbreak                output += ";1;-1;164150;2017-11-23 20:16:20
147;1581095;4;def alphabet(n):break    for i in range(n):break        print(chr(i%25 + ord("A")))break;0;-1;86550;2017-11-23 20:18:20
148;1581095;4;def alphabet(n):break    for i in range(n):break        print(chr(i%26 + ord("A")))break;1;-1;97100;2017-11-23 20:18:31
149;1581095;25;def count_a(text):break    number = 0break    for c in text:break        if c in ["A", "a"]:break            number += 1break    return numberbreak;1;-1;49300;2017-11-23 20:19:22
150;1581095;13;def string_intersection(left, right):break    for i in range(min(len(left), len(right))):break         if left[i] == right[i]:break    		print(left[i])break;1;-1;121050;2017-11-23 20:21:27
151;1448495;6;def nonzero_product(numbers):break    return 1breakbreak;0;-1;5750;2017-11-24 08:27:09
152;1448495;6;def nonzero_product(numbers):break    return 1breakbreak;0;-1;7150;2017-11-24 08:27:10
153;1448495;6;def nonzero_product(numbers):break    return 4 0 2 0 0 3 breakprint(nonzero_product([4, 0, 2, 0, 0, 3]))break;0;-1;36050;2017-11-24 08:27:52
154;1512495;10;def pyramid(n):break    for i in range(n):break        print("#", end=" ")break    print()	break;0;-1;62900;2017-11-24 08:30:57
155;1582309;6;def nonzero_product(numbers):break    return 0sprusíbreakaújpjopsúphpjshkopjshlópzjeogmpohadtispúghaéýátwkgjnsdéotplgnmdiroztžego=wýřěžrsdhtáíČŽÍQÁGJÉTZÁÍDFOPHUTbreakDHIOUDHGJEUÍÉTZDHNMDSGIOZHJFJZPLJ,FHLŮUJKROUÚJKOKGNJDFHNMDIOÚAHZTHOÚKHNSEOHZOINDFOIG;0;-1;35600;2017-11-24 09:34:23
156;1582309;6;def nonzero_product(numbers):break    return 0sprusíbreakaújpjopsúphpjshkopjshlópzjeogmpohadtispúghaéýátwkgjnsdéotplgnmdiroztžego=wýřěžrsdhtáíČŽÍQÁGJÉTZÁÍDFOPHUTbreakDHIOUDHGJEUÍÉTZDHNMDSGIOZHJFJZPLJ,FHLŮUJKROUÚJKOKGNJDFHNMDIOÚAHZTHOÚKHNSEOHZOINDFOIG;0;-1;45650;2017-11-24 09:34:33
157;1582309;6;def nonzero_product(numbers):break    return 0sprusíbreakaújpjopsúphpjshkopjshlópzjeogmpohadtispúghaéýátwkgjnsdéotplgnmdiroztžego=wýřěžrsdhtáíČŽÍQÁGJÉTZÁÍDFOPHUTbreakDHIOUDHGJEUÍÉTZDHNMDSGIOZHJFJZPLJ,FHLŮUJKROUÚJKOKGNJDFHNMDIOÚAHZTHOÚKHNSEOHZOINDFOIG;0;-1;47350;2017-11-24 09:34:35
158;1582309;6;023183breakbreak;0;-1;80400;2017-11-24 09:35:08
159;1582869;1;def numbers(n):break    for i in range(n):break	    print(i+1)break;1;-1;83550;2017-11-24 11:54:46
160;12;7;def divisors(n):break    print(1)break;0;-1;13300;2017-11-24 12:45:48
161;12;8;def square(n):break    for i in range(n):break        for j in range(n):break        	print("#", end=" ")            break        print();0;-1;53450;2017-11-24 13:09:13
162;12;8;def square(n):break    for i in range(n):break        for j in range(n):break        	print("#", end=" ")            break        print();0;-1;106750;2017-11-24 13:10:06
163;12;8;def square(n):break    for i in range(n):break        for j in range(n):break            print("#", end=" ")break        print();0;-1;142600;2017-11-24 13:10:42
164;12;18;def digit_sum(n):    break    s = 0break    while n > 0:break        s += n % 10break        n = n // 10break    return sbreak;1;-1;23350;2017-11-24 13:12:17
165;12;14;def palindrom(text):break    return text == text[::-1]break;1;-1;10300;2017-11-24 13:12:39
166;12;9;def empty_square(n):break    for i in range(n):break        for j in range(n):break            if i == 0 or j == 0 or i == n -1 or j == n -1:break                print("#", end=" ")break            else:break                print(".", end=" ")break;0;-1;26400;2017-11-24 13:13:19
167;1383430;8;def square(n):break    for i in range(n):break        print("#", end=" ")break    print()break;0;-1;4800;2017-11-24 15:38:10
168;1383430;8;def square(n):break    for i in range(n):break        print("#", end=" ")break    print()break;0;-1;69100;2017-11-24 15:39:14
169;1383430;8;def square(n):break    for i in range(n):break        for j in range(n):break            print("#", end=" ")break        print();0;-1;121050;2017-11-24 15:40:06
170;1383430;8;breakdef square(n):break    for i in range(n):break        for j in range(n):break            print("#", end=" ")break        print();1;-1;5400;2017-11-24 15:41:56
171;1383430;8;breakdef square(n):break    for i in range(n):break        for j in range(n):break            print("#", end=" ")break        print();1;-1;3200;2017-11-24 15:42:18
172;1383430;8;breakdef square(n):break    for i in range(n):break        for j in range(n):break            print("#", end=" ")break        print();1;-1;3500;2017-11-24 15:42:35
173;1383430;8;breakdef square(n):break    for i in range(n):break        for j in range(n):break            print("#", end=" ")break        print();1;-1;3900;2017-11-24 15:42:58
174;1383430;8;breakdef square(n):break    for i in range(n):break        for j in range(n):break            print("#", end=" ")break        print();1;-1;5500;2017-11-24 15:43:20
175;1383430;8;def square(n):break    for i in range(n):break        print("####", end=" ")break    print()break;0;-1;23200;2017-11-24 15:44:03
176;1383430;11;def chessboard(n):break    for i in range(n):break        print("#", end=" ")break    print()break;0;-1;25500;2017-11-24 15:44:59
177;1383430;11;def chessboard(n):break    for i in range(n): break	    for i in range(n):        break	        print("#", end=" ")break	    print()            breakbreak;0;-1;106750;2017-11-24 15:46:20
178;12;32;def near_fifty(n):break    return Falsebreak;0;-1;2850;2017-11-24 15:58:32
179;12;32;def near_fifty(n):break    return abs(n-50) <10break;0;-1;23000;2017-11-24 15:58:52
180;12;32;def near_fifty(n):break    return abs(n-50) <=10break;0;-1;29200;2017-11-24 15:58:58
181;12;32;def near_fifty(n):break    return abs(n-50) <=10 or abs(n-150)<10break;1;-1;39100;2017-11-24 15:59:08
182;12;34;def multiples(n):break    print("Dvojnasobek", n)break;0;-1;5150;2017-11-24 15:59:41
183;12;34;def multiples(n):break    print("Dvojnasobek", 2*n)break    print("Trojnasobek",3* n)break    print("Desetinasobek",10* n)break;1;-1;19800;2017-11-24 16:04:41
184;1383430;32;def near_fifty(n):break    return Falsebreak;0;-1;33700;2017-11-24 17:33:42
185;1433971;33;def impose_fine(age, beer):break    return Falsebreak;0;-1;50100;2017-11-24 17:38:12
186;1383430;3;def factorial(n):break    if n == 0:break    	return 1break    return n*factorial(n-1)break;1;-1;41450;2017-11-24 19:15:02
187;1536679;6;def nonzero_product(numbers):break    return 0break;0;-1;8400;2017-11-24 20:36:09
188;1383430;1;def numbers(n):break    print(n)break;0;-1;5500;2017-11-24 21:37:45
189;1536679;1;def numbers(n):10break    break    print(n)break;0;-1;11550;2017-11-24 21:52:23
190;1536679;1;def numbers(n):10break    break    print(n)3break    break;0;-1;19000;2017-11-24 21:52:30
191;5622;1;def numbers(n):break    print(n)break;0;-1;9700;2017-11-24 23:23:45
192;709346;32;def breaknear_fifty(n):break    return Falsebreaktruebreak;0;-1;22850;2017-11-25 11:00:57
193;709346;32;def breaknear_fifty(n):break    return Falsebreaktruebreak;0;-1;32500;2017-11-25 11:01:07
194;709346;32;def near_fifty(n):breaknear_fifty(n)breakbreak;0;-1;37250;2017-11-25 11:01:58
195;709346;33;def impose_fine(age, beer):break    return Falsebreak;0;-1;8150;2017-11-25 11:02:13
196;709346;8;def square(n):break    for i in range(n):break        print("#", end=" ")break    print()break;0;-1;26350;2017-11-25 11:15:57
197;709346;8;def square(n):break    for i in range(n):break        print("#", end=" ")break    print()break;0;-1;28050;2017-11-25 11:15:58
198;709346;8;def square(n):break    for i in range(n):break        print("#", end=" ")break    print()breaksquare(n)break;0;-1;93750;2017-11-25 11:17:04
199;709346;8;def square(n):break    for i in range(n):break        print("#", end=" ")break    print()breaksquare(5)break      break;0;-1;106750;2017-11-25 11:17:17
200;709346;4;def alphabet(n):break    for i in range(n):break        print('A')break;0;-1;8350;2017-11-25 11:17:37
201;709346;4;def alphabet(n):break    for i in range(n):break        print('ABCDEFGHIJ')break;0;-1;77400;2017-11-25 11:18:46
202;709346;1;def numbers(n):break    print(1)break    print(2)break    print(3)break    print(4)break    print(5)break    print(6)break    print(7)break    print(8)break    print(9)break    print(10)break;0;-1;90500;2017-11-25 11:33:30
203;709346;1;def numbers(n):break    print(1)break    print(2)break    print(3)break    print(4)break    print(5)break    print(6)break    print(7)break    print(8)break    print(9)break    print(10)break;0;-1;107100;2017-11-25 11:33:47
204;709346;1;def numbers(n):break    print(12345678910)break;0;-1;13750;2017-11-25 11:34:35
205;1597236;33;def impose_fine(age, beer):break    return Falsebreak;0;-1;45450;2017-11-26 11:43:26
206;1597236;33;def impose_fine(age, beer):break    return Falsebreak;0;-1;88950;2017-11-26 11:44:10
207;1597236;32;def near_fifty(n):break    return Falsebreak;0;-1;18400;2017-11-26 11:44:42
208;1597236;4;def alphabet(n):break    for i in range(n):break        print('A')breakalphabet;0;-1;57000;2017-11-26 12:15:48
209;1597236;4;def alphabet(n):break    for i in range(n):break        print('A')breakalphabet;0;-1;69200;2017-11-26 12:16:01
210;1597236;4;def alphabet(n):break    for i in range(n):break        print('A')breakalphabet;0;-1;69900;2017-11-26 12:16:01
211;1597236;4;def alphabet(n):break    for i in range(n):break        print('A')breakalphabet;0;-1;70300;2017-11-26 12:16:02
212;1597236;4;def alphabet(n):break    for i in range(n):break        print('A')breakalphabet;0;-1;70600;2017-11-26 12:16:02
213;1597236;4;def alphabet(n):break    for i in range(n):break        print('A')breakalphabet;0;-1;70850;2017-11-26 12:16:02
214;1597236;4;def alphabet(n):break    for i in range(n):break        print('A')breakalphabet;0;-1;71100;2017-11-26 12:16:02
215;1597236;4;def alphabet(n):break    for i in range(n):break        print('A')breakalphabet;0;-1;103000;2017-11-26 12:16:35
216;1577030;32;def near_fifty(n):break    return Falsebreak;0;-1;17500;2017-11-26 14:41:51
217;1577030;32;def near_fifty(n):break    return Falsebreak;0;-1;19900;2017-11-26 14:41:53
218;1577030;32;def near_fifty(n):break    return Falsebreak;0;-1;21450;2017-11-26 14:41:55
219;1577030;32;def near_fifty(n):break    return Falsebreak;0;-1;22200;2017-11-26 14:41:56
220;1577030;32;def near_fifty(n):break    return Falsebreak;0;-1;22350;2017-11-26 14:41:56
221;1577030;32;def near_fifty(n):break    return Falsebreak;0;-1;22500;2017-11-26 14:41:56
222;1577030;32;def near_fifty(n):break    return Falsebreak;0;-1;22700;2017-11-26 14:41:56
223;1577030;32;def near_fifty(n):break    return Falsebreak;0;-1;22950;2017-11-26 14:41:56
224;1577030;32;def near_fifty(n):break    return Falsebreak;0;-1;24000;2017-11-26 14:41:58
225;1577030;32;def near_fifty(n):break    return Falsebreak;0;-1;25150;2017-11-26 14:41:59
226;1577030;32;def near_fifty(n):break    return Falsebreak;0;-1;26000;2017-11-26 14:42:00
227;1577030;32;def near_fifty(n):break    return Falsebreak;0;-1;26600;2017-11-26 14:42:00
228;1577030;32;def near_fifty(n):break    return Falsebreak;0;-1;27500;2017-11-26 14:42:01
229;1577030;32;def near_fifty(n):break    return Falsebreak;0;-1;44550;2017-11-26 14:42:20
230;1340035;32;defvfvgfvgdsfghfshfshsfhfsbsfhsfh near_fifty(n):break    return Falssfhhsfhsfebreakhsfhsfhsfhhsf;0;-1;52150;2017-11-26 15:44:35
231;1340035;32;defvfvgfvgdsfghfshfshsfhfsbsfhsfh near_fifty(n):break    return Falssfhhsfhsfebreakhsfhsfhsfhhsf;0;-1;54100;2017-11-26 15:44:37
232;1340035;32;defvfvgfvgdsfghfshfshsfhfsbsfhsfh near_fifty(n):break    return Falssfhhsfhsfebreakhsfhsfhsfhhsf;0;-1;54800;2017-11-26 15:44:37
233;1340035;32;defvfvgfvgdsfghfshfshsfhfsbsfhsfh near_fifty(n):break    return Falssfhhsfhsfebreakhsfhsfhsfhhsf;0;-1;55000;2017-11-26 15:44:38
234;1340035;32;defvfvgfvgdsfghfshfshsfhfsbsfhsfh near_fifty(n):break    return Falssfhhsfhsfebreakhsfhsfhsfhhsf;0;-1;55250;2017-11-26 15:44:38
235;1340035;32;defvfvgfvgdsfghfshfshsfhfsbsfhsfh near_fifty(n):break    return Falssfhhsfhsfebreakhsfhsfhsfhhsf;0;-1;55400;2017-11-26 15:44:38
236;1340035;32;defvfvgfvgdsfghfshfshsfhfsbsfhsfh near_fifty(n):break    return Falssfhhsfhsfebreakhsfhsfhsfhhsf;0;-1;55800;2017-11-26 15:44:38
237;1340035;32;defvfvgfvgdsfghfshfshsfhfsbsfhsfh near_fifty(n):break    return Falssfhhsfhsfebreakhsfhsfhsfhhsf;0;-1;56200;2017-11-26 15:44:39
238;1340035;32;defvfvgfvgdsfghfshfshsfhfsbsfhsfh near_fifty(n):break    return Falssfhhsfhsfebreakhsfhsfhsfhhsf;0;-1;56350;2017-11-26 15:44:39
239;1340035;32;defvfvgfvgdsfghfshfshsfhfsbsfhsfh near_fifty(n):break    return Falssfhhsfhsfebreakhsfhsfhsfhhsf;0;-1;57100;2017-11-26 15:44:40
240;1340035;32;defvfvgfvgdsfghfshfshsfhfsbsfhsfh near_fifty(n):break    return Falssfhhsfhsfebreakhsfhsfhsfhhsf;0;-1;57700;2017-11-26 15:44:40
241;1340035;32;defvfvgfvgdsfghfshfshsfhfsbsfhsfh near_fifty(n):break    return Falssfhhsfhsfebreakhsfhsfhsfhhsf;0;-1;63350;2017-11-26 15:44:46
242;1340035;32;defvfvgfvgdsfghfshfshsfhfsbsfhsfh near_fifty(n):break    return Falssfhhsfhsfebreakhsfhsfhsfhhsf;0;-1;66200;2017-11-26 15:44:49
243;1340035;32;defvfvgfvgdsfghfshfshsfhfsbsfhsfh near_fifty(n):break    return Falssfhhsfhsfebreakhsfhsfhsfhhsf;0;-1;67450;2017-11-26 15:44:50
244;1340035;32;defvfvgfvgdsfghfshfshsfhfsbsfhsfh near_fifty(n):break    return Falssfhhsfhsfebreakhsfhsfhsfhhsf;0;-1;68300;2017-11-26 15:44:51
245;1340035;32;defvfvgfvgdsfghfshfshsfhfsbsfhsfh near_fifty(n):break    return Falssfhhsfhsfebreakhsfhsfhsfhhsf;0;-1;69300;2017-11-26 15:44:52
246;1340035;32;defvfvgfvgdsfghfshfshsfhfsbsfhsfh near_fifty(n):break    return Falssfhhsfhsfebreakhsfhsfhsfhhsf;0;-1;70850;2017-11-26 15:44:53
247;1340035;32;defvfvgfvgdsfghfshfshsfhfsbsfhsfh near_fifty(n):break    return Falssfhhsfhsfebreakhsfhsfhsfhhsf;0;-1;72250;2017-11-26 15:44:55
248;1340035;32;defvfvgfvgdsfghfshfshsfhfsbsfhsfh near_fifty(n):break    return Falssfhhsfhsfebreakhsfhsfhsfhhsf;0;-1;72950;2017-11-26 15:44:56
249;1340035;32;defvfvgfvgdsfghfshfshsfhfsbsfhsfh near_fifty(n):break    return Falssfhhsfhsfebreakhsfhsfhsfhhsf;0;-1;73600;2017-11-26 15:44:56
250;1340035;32;defvfvgfvgdsfghfshfshsfhfsbsfhsfh near_fifty(n):break    return Falssfhhsfhsfebreakhsfhsfhsfhhsf;0;-1;74100;2017-11-26 15:44:57
251;1340035;32;defvfvgfvgdsfghfshfshsfhfsbsfhsfh near_fifty(n):break    return Falssfhhsfhsfebreakhsfhsfhsfhhsf;0;-1;74750;2017-11-26 15:44:57
252;1340035;32;defvfvgfvgdsfghfshfshsfhfsbsfhsfh near_fifty(n):break    return Falssfhhsfhsfebreakhsfhsfhsfhhsf;0;-1;75000;2017-11-26 15:44:58
253;1340035;32;defvfvgfvgdsfghfshfshsfhfsbsfhsfh near_fifty(n):break    return Falssfhhsfhsfebreakhsfhsfhsfhhsf;0;-1;75150;2017-11-26 15:44:58
254;1340035;32;defvfvgfvgdsfghfshfshsfhfsbsfhsfh near_fifty(n):break    return Falssfhhsfhsfebreakhsfhsfhsfhhsf;0;-1;75600;2017-11-26 15:44:58
255;1340035;32;defvfvgfvgdsfghfshfshsfhfsbsfhsfh near_fifty(n):break    return Falssfhhsfhsfebreakhsfhsfhsfhhsf;0;-1;76150;2017-11-26 15:44:59
256;1340035;32;defvfvgfvgdsfghfshfshsfhfsbsfhsfh near_fifty(n):break    return Falssfhhsfhsfebreakhsfhsfhsfhhsf;0;-1;76700;2017-11-26 15:44:59
257;1340035;32;defvfvgfvgdsfghfshfshsfhfsbsfhsfh near_fifty(n):break    return Falssfhhsfhsfebreakhsfhsfhsfhhsf;0;-1;77500;2017-11-26 15:45:00
258;1576625;32;def near_fifty(n):break    return Falsenjkbshcjbykcb break;0;-1;27750;2017-11-26 16:29:51
259;1576625;32;def near_fifty(n):break    return Falsenjkbshcjbykcb break;0;-1;28100;2017-11-26 16:29:51
260;1576625;32;def near_fifty(n):break    return Falsenjkbshcjbykcb break;0;-1;28550;2017-11-26 16:29:52
261;1576625;32;def near_fifty(n):break    return Falsenjkbshcjbykcb break;0;-1;28750;2017-11-26 16:29:52
262;1576625;32;def near_fifty(n):break    return Falsenjkbshcjbykcb break;0;-1;30550;2017-11-26 16:29:54
263;1495972;34;def multiples(n):break    print("Dvojnasobek", n)break;0;-1;5950;2017-11-26 18:09:15
264;1495972;34;def multiples(n):break    print("Dvojnasobek", n)break;0;-1;18500;2017-11-26 18:09:27
265;1495972;34;def multiples(n):dxu uddjnns do košíku je v pořádku a čistoty vody a necháme se v něm se mi líbí žebreak    print("Dvojnasobek", n)breakV případě zájmu nás prosím neváhejte nás kontaktovat a my se snažíme urychlit v roce v Praze v němž je to s cukrem;0;-1;24600;2017-11-26 18:09:59
266;1605006;32;def near_fifty(n):break    return Falsebreak;0;-1;21300;2017-11-27 07:17:50
267;1605006;32;def near_fifty(n):break    return Falsebreak;0;-1;23100;2017-11-27 07:17:51
268;1605006;32;def near_fifty(n):break    return truebreak;0;-1;35550;2017-11-27 07:18:04
269;1383430;33;def impose_fine(age, beer):break    return Falsebreak;0;-1;71550;2017-11-27 14:42:06
270;12;33;def impose_fine(age, beer):break    return age < 18 and beer;1;-1;16050;2017-11-27 16:00:46
271;12;8;def square(n):break    for i in range(n):break        print("# "*n)break    print()break;1;-1;11350;2017-11-27 16:01:07
272;1607705;8;def square(n):break    for i in range(n):break        print("#", end=" ")break    print()break;0;-1;22500;2017-11-27 16:35:02
273;1608084;33;;0;-1;112500;2017-11-27 17:50:22
274;1608084;33;;0;-1;119250;2017-11-27 17:50:29
275;1608134;32;truebreakfalsebreakfalsebreaktruebreak;0;-1;111300;2017-11-27 18:04:55
276;1511641;1;def numbers(n):break    print(n)break;0;-1;13150;2017-11-27 19:03:16
277;1511641;1;def numbers(n):break    print(n)break;0;-1;14700;2017-11-27 19:03:17
278;1413202;34;def multiples(n):break    print("Dvojnasobek", n)break;0;-1;2850;2017-11-27 19:25:40
279;1413202;34;def multiples(n):break    print("Dvojnasobek", n)break;0;-1;16900;2017-11-27 19:25:54
280;1608411;34;def multiples(n):break    print("Dvojnasobek", n)break;0;-1;5850;2017-11-27 19:31:30
281;1608411;34;def multiples(n):break    print("Dvojnasobek", n)break;0;-1;26500;2017-11-27 19:31:50
282;1608411;34;def multiples(n):break    print("Dvojnasobek", n)break;0;-1;48250;2017-11-27 19:32:13
283;1611363;33;def impose_fine(age, beer):break    if age < 18 and beer = True:break        return Truebreak    else retrn Falsebreak;0;-1;147800;2017-11-28 13:13:30
284;1611363;33;def impose_fine(age, beer):break    if age < 18 and beer = True:break        return Truebreak    else retrn Falsebreak    break    break;0;-1;164350;2017-11-28 13:13:47
285;899590;33;def impose_fine(111×××//úú)())úú))))))))(()))break;0;-1;64700;2017-11-28 17:35:41
286;1613686;15;def every_second_number(num_list):break    print(num_list[1::2])break;0;-1;39500;2017-11-28 23:18:35
287;1613686;15;def every_second_number(num_list):break    print(num_list[::2])break;0;-1;48900;2017-11-28 23:18:44
288;1613686;15;def every_second_number(num_list):break    for num in num_list[::2]:break        print(num)break;1;-1;101900;2017-11-28 23:19:38
289;1613686;33;def impose_fine(age, beer):break    if age < 18 and beer:break        return Truebreak    return Falsebreak;1;-1;56500;2017-11-28 23:20:43
290;1613686;32;def near_fifty(n):break    if n in range(40, 61) or n in range(140, 161):break        return Truebreak    return Falsebreak;1;-1;80500;2017-11-28 23:22:06
291;1615290;1;def numbers(n):break    for i in range (0, n):break        i = i + 1break        print (i)break;1;-1;179200;2017-11-29 11:37:39
292;748184;33;def impose_fine(age, beer):break    return Falsebreak;0;-1;18450;2017-11-29 13:21:26
293;748184;33;def impose_fine(age, beer):break    return Falsebreak;0;-1;34900;2017-11-29 13:21:43
294;770072;33;def impose_fine(age, beer):break    return Falsebreak;0;-1;21300;2017-11-29 13:33:01
295;12;7;def divisors(n):break    for i in range(1, n+1):break        if n % i == 0: break            print(i)break;1;-1;27350;2017-11-29 13:40:10
296;12;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(j, end=" ")break        print()break;0;-1;9250;2017-11-29 13:52:44
297;12;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(j+1, end=" ")break        print()break;1;-1;16000;2017-11-29 13:52:51
298;12;36;def products(n):break    for row in range(n):break        for col in range(n):break            print((row+1) * (col+1), end=" ")break        print()break;1;-1;26700;2017-11-29 14:10:14
299;12;37;def stars(n):break    for i in range(n):break        print("*", end="")break        if i == 5:break            print("|", end="")break    print()break;0;-1;3300;2017-11-29 14:17:39
300;12;37;def stars(n):break    for i in range(n):break        print("*", end="")break        if (i+1) % 5 == 0:break            print("|", end="")break    print()break;1;-1;21050;2017-11-29 14:17:57
301;12;38;def cross(n):    break    for i in range(3*n):break        for j in range(3*n):break            if i // n == 1 or j // n == 1:break                print("#", end="")break            else:break                print(".", end="")break        print()brea;1;-1;14950;2017-11-29 14:33:04
302;1374447;34;def multiples(n):break    print("Dvojnasobek", n)break;0;-1;25550;2017-11-29 16:38:03
303;1374447;34;def multiples(n):break    print("Dvojnasobek", n)break;0;-1;30050;2017-11-29 16:38:08
304;1616629;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(j+1, end=" ")break        print()break;1;-1;75200;2017-11-29 17:25:06
305;1376771;34;def multiples(n):break    print("Dvojnasobek", n)break;0;-1;80250;2017-11-29 17:25:21
306;1616629;36;def products(n):break    for row in range(1,n+1):break        for col in range(1,n+1):break            print(row * col, end=" ")break        print()break;1;-1;60300;2017-11-29 17:26:15
307;1617621;34;def multiples(n):break    print("Dvojnasobek", 2*n)break    print("Trojnasobek", 3*n)break    print("Desetinasobek", 10*n)break;1;-1;108000;2017-11-30 00:04:07
308;1617621;32;def near_fifty(n):break    if (abs(n-50) <= 10):break        return Truebreak    if (abs(n-150) <= 10):break        return Truebreak    return Falsebreak;1;-1;146250;2017-11-30 00:06:40
309;1617621;33;def impose_fine(age, beer):break    if (age < 18 and beer):break        return Truebreak    return Falsebreak;1;-1;56300;2017-11-30 00:07:47
310;1617621;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(j+1, end=" ")break        print()break;1;-1;59100;2017-11-30 00:09:15
311;1617621;36;def products(n):break    for row in range(n):break        for col in range(n):break            print( (row + 1) * (col + 1), end=" ")break        print()break;1;-1;45450;2017-11-30 00:10:16
312;1617621;37;def stars(n):break    for i in range(n):break        print("*", end="")break        if (i + 1) % 5 == 0:break            print("|", end="")break    print()break;1;-1;110500;2017-11-30 00:12:05
313;1617621;38;def cross(n):    break    for i in range(3*n):break        for j in range(3*n):break            if (i >= n and i < 2*n) or (j >= n and j < 2*n):break                print("#", end="")break            else:break                print(".", end="")break;1;-1;155050;2017-11-30 00:14:47
314;1617621;1;def numbers(n):break    for i in range(n):break        print(i+1)break;1;-1;62050;2017-11-30 00:18:43
315;1617621;2;def fibonacci(n):break    a = 1break    print(a)break    b = 1break    print (b)break    for i in range(n-2):break        c = a + bbreak        a = bbreak        b = cbreak        print(c)break;1;-1;138300;2017-11-30 00:21:09
316;1617621;3;def factorial(n):break    result = 1break    for i in range(1,n+1):break        result *= ibreak    break    return resultbreak;1;-1;79950;2017-11-30 00:22:38
317;1617621;7;def divisors(n):break    for i in range(1,n):break        if (n % i == 0):break            print(i)break    print(n)break;1;-1;305800;2017-11-30 00:32:11
318;1617621;18;def digit_sum(n):break    result = 0break    while n > 9:break        result += n % 10break        n = int(n / 10)break       break    return result + nbreak;1;-1;387300;2017-11-30 00:38:46
319;1617621;20;def divisors_count(n):break    count = 0break    for i in range(1,n+1):break        if (n % i == 0):break            count += 1break    return countbreak;1;-1;86800;2017-11-30 00:40:16
320;1617621;21;def powers(base, n):break    number = 1break    for i in range(n):break        number *= basebreak        print (number)       break;1;-1;112300;2017-11-30 00:42:13
321;1617621;22;import mathbreakbreakdef isPrime(n):break    maximal = int(math.sqrt(n))+1break    for i in range(2,maximal):break        if (n % i == 0):break            return Falsebreak    return Truebreakbreakdef print_primes(n):break    prime = 1break    for i;1;-1;623800;2017-11-30 00:54:02
322;1617621;23;def greatest_common_divisor(a, b):break    if (a > b):break        c = abreak        a = bbreak        b = cbreak    while (a > 1):break        if (b % a == 0):break            return abreak        else:break            c = b % abreak            b =;1;-1;342550;2017-11-30 00:59:58
323;1390111;34;def multiples(n):14breakdef print("Dvojnasobek", n) 221break;0;-1;54550;2017-11-30 10:35:28
324;1461318;8;def square(n):break    for i in range(n):break        print("#", end=" ")break    print()break;0;-1;14500;2017-11-30 10:37:25
325;1618786;34;def multiples(n):break    print("Dvojnasobek", n)break;0;-1;5450;2017-11-30 11:32:00
326;1618786;34;def multiples(n):break    print("Dvojnasobek", n)break;0;-1;6900;2017-11-30 11:32:01
327;1618786;34;def multiples(n):break    print("Dvojnasobek", n*2)break;0;-1;12750;2017-11-30 11:32:07
328;1618786;34;def multiples(n):break    print("Dvojnasobek", n*2)break;0;-1;21450;2017-11-30 11:32:16
329;1618847;25;def count_a(text):break    c = 0break    for a in text:break        if a.lower() == "a":break            c+=1break    return cbreak;1;-1;108250;2017-11-30 11:57:17
330;1618849;8;def square(n):break    for i in range(n):break        s=''break        for j in range(n):break            s = s + '#' + ' 'break        print(s);1;-1;303600;2017-11-30 11:59:58
331;1618878;6;def nonzero_product(numbers):break    return reduce(lambda x, y: x*y, [x for x in numbers if x != 0])break;1;-1;115350;2017-11-30 12:03:09
332;1618895;34;def multiples(n):break    print("Dvojnasobek", 2*n)break    print("Trojnasobek", 3*n)break    print("Desetinasobek", 10*n)break;1;-1;73350;2017-11-30 12:03:38
333;1618849;9;def empty_square(n):break    for i in range(n):break        s=''break        for j in range(n):break            if i==0 or i == n-1:break                s=s+'# 'break            else:break                if j==0 or j==n-1:break                    s=s;1;-1;273100;2017-11-30 12:04:36
334;1618893;1;def numbers(n):break    for i in range(1, n+1):break        print(i)break    break;1;-1;63300;2017-11-30 12:05:13
335;1618878;15;def every_second_number(num_list):break    map(lambda x: print(x), num_list[::2])break;1;-1;78550;2017-11-30 12:05:20
336;1618893;2;def fibonacci(n):break    a = 0break    b = 1break    count = 0break    while count < n:break        c  = a + bbreak        print(c)break        a = bbreak        b = cbreak        count += 1break;0;-1;157650;2017-11-30 12:08:11
337;1618913;36;def products(n):break    for row in range(1,n+1):break        for col in range(1,n+1):break            print(row * col, end=" ")break        print()break;1;-1;77950;2017-11-30 12:08:35
338;1618865;34;def multiples(n):break    print("Dvojnasobek", n * 2)break    print('Trojnasobek', n * 3)break    print('Desetinasobek', n * 10)break;1;-1;182350;2017-11-30 12:08:40
339;1618895;32;def near_fifty(n):break    if 40 <= n <= 60 or 140 <= n <= 160:break        return Truebreak    return Falsebreak;1;-1;311100;2017-11-30 12:08:54
340;1618893;2;def fibonacci(n):break    a = 1break    b = 1break    count = 2break    print(a)break    print(b)break    while count < n:break        c  = a + bbreak        print(c)break        a = bbreak        b = cbreak        count += 1break;1;-1;221750;2017-11-30 12:09:16
341;1618895;33;def impose_fine(age, beer):break    if age < 18 and beer == True:break        return Truebreak    return Falsebreak;1;-1;58600;2017-11-30 12:09:58
342;1618893;3;def factorial(n):break    if n == 1:break        return 1break    else:break        return n * factorial(n-1)break;1;-1;53650;2017-11-30 12:10:14
343;1618910;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break    print("Desetinasobek", n*10)break;1;-1;375650;2017-11-30 12:10:58
344;1618878;16;def max_pair_sum(num_list):break    return max(sum_lists(num_list[1:], num_list[:-1]))breakdef sum_lists(l1, l2):break    return [x+y for (x,y) in zip(l1, l2)]break;1;-1;326300;2017-11-30 12:11:24
345;1618893;7;def divisors(n):break    for i in range(1, n+1):break        if n % i == 0:break            print(i)break;1;-1;77900;2017-11-30 12:11:36
346;1618878;17;def five_multiples(num_list):break    return [x for x in num_list if x % 5 == 0]break;1;-1;43550;2017-11-30 12:12:21
347;1618895;35;def sequences(n):break    for i in range(1, n+1):break        for j in range(1, i+1):break            print(j, end=" ")break        print()break;1;-1;106900;2017-11-30 12:12:21
348;1618895;36;def products(n):break    for row in range(1, n+1):break        for col in range(1, n+1):break            print(row * col, end=" ")break        print()break;1;-1;63400;2017-11-30 12:13:28
349;1613686;3;def factorial(n):break    if n == 0:break        return 1break    return n * factorial(n-1);1;-1;4700;2017-11-30 12:13:35
350;1618893;18;def digit_sum(n):break    soucet = 0break    while n > 0:break        soucet += n % 10break        n = n // 10break    return soucetbreak        break        break;1;-1;117450;2017-11-30 12:13:36
351;1618932;34;def multiples(n):break    a = nbreak    for i in range(1,11):break    	n = a * ibreak    	print(n)break;0;-1;183500;2017-11-30 12:13:47
352;1618893;20;def divisors_count(n):break    total = 0break    for i in range(1, n + 1):break        if n % i == 0:break            total += 1break    return totalbreak;1;-1;48450;2017-11-30 12:14:27
353;1618895;37;def stars(n):break    for i in range(1, n+1):break        print("*", end="")break        if i % 5 == 0:break            print("|", end="")break    print()break;1;-1;32400;2017-11-30 12:15:12
354;1618910;1;def numbers(n):break    for i in range(1, n+1):break    	print(i)break;1;-1;46650;2017-11-30 12:15:21
355;1618893;21;def powers(base, n):break    for i in range(1, n+1):break        print(base**i)break;1;-1;55150;2017-11-30 12:15:25
356;1618932;34;def multiples(n):break    a = nbreak    for i in range(2,11):break    	n = a * ibreak        if 2 * a == n:break    		print("Dvojnasobek", n)break        elif 3 * a == n:break            print("Trojnasobek", n)break        elif 10 * a == n:break;0;-1;354000;2017-11-30 12:16:37
357;1618932;32;def near_fifty(n):break    if 40 <= n <= 60 or 140 <= n <= 160:break        return Truebreak    return Falsebreak;1;-1;148300;2017-11-30 12:19:17
358;1618932;34;def multiples(n):break    print("Dvojnasobek", n * 2)break    print("Trojnasobek", n * 3)break    print("Desetinasobek", n * 10)break;1;-1;44800;2017-11-30 12:20:09
359;1618910;2;def fibonacci(n):break    a = 1break    b = 1break    print(a)break    print(b)break    for i in range(n-2):break        c = a + bbreak        print(c)break        a, b = b, c;1;-1;234900;2017-11-30 12:22:00
360;1618932;33;def impose_fine(age, beer):break    if age < 18 and beer == True:break        return Truebreak    return Falsebreak;1;-1;90100;2017-11-30 12:22:50
361;1618895;38;def cross(n):break    max = 3*nbreak    for i in range(1, 3*n + 1):break        for j in range(1, 3*n + 1):break            if n < i <= max-n or n < j <= max-n:break                print("#", end="")break            else:break                print(".;1;-1;488350;2017-11-30 12:25:27
362;1618895;35;def sequences(n):break    for i in range(1, n+1):break        for j in range(1, i+1):break            print(j, end=" ")break        print()break;1;-1;38450;2017-11-30 12:26:12
363;1618895;1;def numbers(n):break    for i in range(1, n+1):break        print(i)break;1;-1;26300;2017-11-30 12:26:58
364;1618932;35;def sequences(n):break    for i in range(1,n+1):break        for j in range(1,i+1):break            print(j, end=" ")break        print()break;1;-1;15700;2017-11-30 12:27:26
365;1618932;36;def products(n):break    for row in range(1,n+1):break        for col in range(1,n+1):break            print(row * col, end=" ")break        print()break;1;-1;76000;2017-11-30 12:28:48
366;1618878;29;def unique(mylist):break    out_list = []break    for x in mylist:break        if x not in out_list:break            out_list.append(x)break    return out_listbreak;1;-1;206950;2017-11-30 12:28:51
367;1618910;3;def factorial(n):break    if n == 0:break    	return 1break    else:break        for i in range(1, n):break            n *= ibreak        return n;1;-1;259800;2017-11-30 12:29:12
368;1618895;1;def numbers(n):break    for i in range(1, n+1):break        print(i)break;1;-1;148650;2017-11-30 12:29:54
369;1618932;37;def stars(n):break    for i in range(1,n+1):break        print("*", end="")break        if i % 5 == 0:break            print("|", end="")break    print()break;1;-1;75050;2017-11-30 12:30:06
370;1618878;30;def most_common(mylist):break    help_list = [0]*max(mylist)break    for x in mylist:break        help_list[x-1] += 1break        break    max_ind = 0break    max_count = help_list[0]break    for i in range(len(help_list)):break        if help_list[i;0;-1;368450;2017-11-30 12:35:09
371;1618878;30;def most_common(mylist):break    help_list = [0]*max(mylist)break    for x in mylist:break        help_list[x-1] += 1break        break    max_ind = 0break    max_count = help_list[0]break    for i in range(len(help_list)):break        if help_list[i;0;-1;395300;2017-11-30 12:35:37
372;1618878;30;def most_common(mylist):break    help_list = [0]*max(mylist)break    for x in mylist:break        help_list[x-1] += 1break        break    max_ind = 0break    max_count = help_list[0]break    for i in range(len(help_list)):break        if help_list[i;1;-1;445300;2017-11-30 12:36:28
373;1619030;34;def multiples(n):break    print("Dvojnasobek", n * 2)break    print("Trojnásobek", n * 3)break    print("Desetinásobek", n * 10)break;0;-1;71000;2017-11-30 12:37:35
374;1619030;34;def multiples(n):break    print("Dvojnasobek", n * 2)break    print("Trojnasobek", n * 3)break    print("Desetinasobek", n * 10)break;1;-1;89250;2017-11-30 12:37:53
375;1618932;38;def cross(n):    break    for i in range(3*n):break        for j in range(3*n):break            if i == n or j == n:break                print("#", end="")break            else:break                print(".", end="")break        print()break;0;-1;585700;2017-11-30 12:40:05
376;1618878;31;def find_longest_word(words_list):break    if len(words_list) == 0:break        return ""break    if len(words_list[0]) > len(find_longest_word(words_list[1:])):break        return words_list[0]break    else:break        return find_longest_word(word;0;-1;286200;2017-11-30 12:41:23
377;1618895;2;def fibonacci(n):break    a = 0break    b = 1break    for i in range(n):break        tmp = abreak        a = bbreak        b += tmpbreak        print(a)break        breakbreak;1;-1;365600;2017-11-30 12:44:19
378;1619052;34;def multiples(n):break    print("Dvojnasobek", n  * 2)break    print("Trojnasobek", n  * 3)break    print("Desetinasobek", n  * 10)break;1;-1;129400;2017-11-30 12:46:16
379;1618895;3;def factorial(n):break    if n <= 1:break        return 1break    else:break        return n * factorial(n-1);1;-1;141400;2017-11-30 12:46:43
380;1619049;1;def numbers(n):break    for i in range(1,n+1):break       print(i)breakbreak;1;-1;52300;2017-11-30 12:46:51
381;1618895;7;def divisors(n):break    for i in range(1, n+1):break        if n % i == 0:break            print(i)break;1;-1;46100;2017-11-30 12:47:33
382;1619049;2;def fibonacci(n):break    actual = 0break    previous = 1break    for i in range(n):break        actual = actual + previousbreak        previous = actual - previousbreak        print(actual)break;1;-1;88700;2017-11-30 12:48:24
383;1618895;18;def digit_sum(n):break    sum = 0break    while n > 0:break        sum += n % 10break        n = n // 10break    return sumbreak;1;-1;56200;2017-11-30 12:48:32
384;1619030;32;def near_fifty(n):break  desat = abs(50 - n)break  sto = abs(150 - n)break  if n < 100:break    return bool(desat >= 0 and desat <= 10)break  else:break    return bool(sto >= 0 and sto <= 10)break;1;-1;404250;2017-11-30 12:48:43
385;1618895;20;def divisors_count(n):break    count = 0break    for i in range(1, n+1):break        if n % i == 0:break            count += 1break    return countbreak;1;-1;46600;2017-11-30 12:49:21
386;1619049;3;def factorial(n):break    a = 1break    for i in range(1, n+1):break        a *= ibreak    return abreak;1;-1;64500;2017-11-30 12:49:31
387;1619030;33;def impose_fine(age, beer):break    return bool(age < 19 and beer)break;1;-1;70550;2017-11-30 12:49:57
388;1618895;21;def powers(base, n):break    for i in range(1, n+1):break        print(base**i)break;1;-1;23800;2017-11-30 12:50:28
389;1619052;32;def near_fifty(n):break    break    if abs(n - 50) <= 10 or abs(n - 150) <= 10:break        return Truebreak    else:   break    	return Falsebreak;1;-1;251700;2017-11-30 12:51:06
390;1619030;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(j+1, end=" ")break        print()break;1;-1;100600;2017-11-30 12:52:01
391;1619052;33;def impose_fine(age, beer):break    break    if age < 18 and beer:break        return Truebreak    else:break    	return Falsebreak;1;-1;119300;2017-11-30 12:53:12
392;1619030;36;def products(n):break    for row in range(n):break        for col in range(n):break            print((row+1) * (col+1), end=" ")break        print()break;1;-1;74550;2017-11-30 12:53:18
393;1619078;34;def multiples(n):break    print("Dvojnasobek", n * 2)break	print("Trojnasobek", n * 3)break    print("Desetinasobek", n * 10);0;-1;34150;2017-11-30 12:55:35
394;1619081;31;def find_longest_word(words_list):break    return ""break;0;-1;9650;2017-11-30 12:55:44
395;1619081;31;def find_longest_word(words_list):break    return ""break;0;-1;15950;2017-11-30 12:55:50
396;1619030;37;def stars(n):break    for i in range(n+1):break        if i%5==0 and i is not 0 :break            print("|", end="")break        else:break        	print("*", end="")break    print()break;0;-1;163400;2017-11-30 12:56:05
397;1619030;37;def stars(n):break    for i in range(n+1):break        if i%5==0 and i is not 0 :break            print("|", end="")break            i -= 1break        else:break        	print("*", end="")break    print()break;0;-1;250800;2017-11-30 12:57:33
398;1619078;34;def multiples(n):break    print("Dvojnasobek", n * 2)break    print("Trojnasobek", n * 3)break    print("Desetinasobek", n * 10)break;1;-1;39650;2017-11-30 12:57:35
399;1618895;22;def is_prime(x):break    count = 0break    for i in range(1, x+1):break        if x % i == 0:break            count += 1break    if count == 2:break        return Truebreak    return Falsebreakbreakbreakdef print_primes(n):break    count = 0break;1;-1;426050;2017-11-30 12:57:37
400;1619079;36;def products(n):break    for row in range(1, n + 1):break        for col in range(1, n + 1):break            print(row * col, end=" ")break        print()break;1;-1;112050;2017-11-30 12:58:28
401;1619078;32;def near_fifty(n):break    break    if abs(n - 50) <= 10 or abs(n - 150) <= 10:break        return Truebreak    else:break    	return Falsebreak;1;-1;58450;2017-11-30 12:58:35
402;1619078;33;def impose_fine(age, beer):break    break    if age < 18 and beer:break        return Truebreak    else:break    	return Falsebreak;1;-1;35700;2017-11-30 12:59:15
403;1618895;23;def greatest_common_divisor(a, b):break    while a > 0 and b > 0:break        if a > b:break            a = a - bbreak        else:break            b = b - abreak    return max(a, b)break;1;-1;195050;2017-11-30 13:00:56
404;1619030;37;def stars(n):break    for i in range(n):break        if (i+1)%5==0 and i is not 0 :break            print("*|", end="")break        else:break        	print("*", end="")break    print()break;1;-1;656150;2017-11-30 13:04:18
405;1619078;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(j + 1, end=" ")break        print()break;1;-1;145500;2017-11-30 13:04:43
406;1618895;1;def numbers(n):break    if n > 0:break        print(numbers(n-1))break    return n+1;1;-1;279500;2017-11-30 13:05:37
407;1619078;36;def products(n):break    for row in range(n):break        for col in range(n):break            print((row + 1) * (col + 1), end=" ")break        print()break;1;-1;195650;2017-11-30 13:08:01
408;1619078;37;def stars(n):break    for i in range(1, n + 1):break        print("*", end="")break        if i % 5 == 0:break            print("|", end="")break    print()break;1;-1;214800;2017-11-30 13:12:49
409;1619111;34;def multiples(n):break    n = 2*nbreak    print("Dvojnasobek", n)break;0;-1;49700;2017-11-30 13:13:17
410;1619111;34;def multiples(n):break    n = 2*nbreak	i = 3*nbreak    o = 10*nbreak    print("Trojnasobek", i)break    print("Dvojnasobek", n)break    print("Desetinasobek", o)break;0;-1;145000;2017-11-30 13:14:52
411;1619078;38;def cross(n):    break    for i in range(3*n):break        for j in range(3*n):break            if (i >= n and i < (n + n)) or j >= n and j < n + n:break                print("#", end="")break            else:break                print(".", end="")br;1;-1;294650;2017-11-30 13:17:56
412;1619078;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(j + 1, end=" ")break        print()break;1;-1;38000;2017-11-30 13:18:36
413;1619131;8;def square(n):break    for i in range(n):break        print("# "*n)break    print()break;1;-1;112900;2017-11-30 13:20:28
414;1619150;34;def multiples(n):break    break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break    print("Desetinasobek", n*10)break;1;-1;103850;2017-11-30 13:22:15
415;1619078;1;def numbers(n):break   break    for i in range (1, n + 1):break        print(i)break;1;-1;109500;2017-11-30 13:23:51
416;1619131;9;def empty_square(n):break    for i in range(n):break        if i == 0:break        	print("# "*n)break        elif i == n-1:break        	print("# "*n)break        else:break            print("#", ". "*(n-2),"#")break    print()	break;0;-1;197700;2017-11-30 13:27:03
417;1619131;9;def empty_square(n):break    for i in range(n):break        if i == 0:break        	print("# "*n)break        elif i == n-1:break        	print("# "*n)break        else:break            print("#", ". "*(n-2),"#")break    print()	break;0;-1;305000;2017-11-30 13:28:51
418;1619131;9;def empty_square(n):break    for i in range(n):break        if i == 0:break        	print("# "*n)break        elif i == n-1:break        	print("# "*n)break        else:break            print("#", ". "*(n-2),"#")break    print()	break;0;-1;324250;2017-11-30 13:29:10
419;1619074;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break    print("Desetinasobek", n*10)break;1;-1;155700;2017-11-30 13:31:21
420;1619156;1;def numbers(n):break    for i in range(1,n+1):break        print(i)break;1;-1;67150;2017-11-30 13:32:37
421;1619131;4;def alphabet(n):break    for i in range(65,n+90):break        print(chr(i))break;0;-1;96150;2017-11-30 13:34:29
422;1619131;4;def alphabet(n):break    for i in range(65,n+65):break        print(chr(i))break;0;-1;110700;2017-11-30 13:34:43
423;1619131;4;def alphabet(n):break    for i in range(65,n+65):break        if i <= 90:break        	print(chr(i))break        else:break            print(chr(i-25))break;0;-1;187750;2017-11-30 13:36:00
424;1619044;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(j+1, end=" ")break        print()break;1;-1;42750;2017-11-30 13:36:05
425;1619131;4;def alphabet(n):break    for i in range(65,n+65):break        if i <= 90:break        	print(chr(i))break        else:break            print(chr(i-26))break;0;-1;196700;2017-11-30 13:36:09
426;1619044;36;def products(n):break    for row in range(1,n+1):break        for col in range(1,n+1):break            print(row * col, end=" ")break        print()break;1;-1;36700;2017-11-30 13:36:57
427;1619044;37;def stars(n):break    for i in range(n):break        print("*", end="")break        if i % 5==4:break            print("|", end="")break    print()break;1;-1;48450;2017-11-30 13:37:58
428;1619131;15;def every_second_number(num_list):break    print(num_list[0::2])break;0;-1;34050;2017-11-30 13:39:07
429;1619182;34;def multiples(n):break    n = 2*nbreak    print("Dvojnasobek", n);0;-1;109950;2017-11-30 13:39:24
430;1619182;34;def multiples(n):break    n = 2*nbreak    print("Dvojnasobek", n);0;-1;119950;2017-11-30 13:39:34
431;1619044;38;def cross(n):    break    for i in range(3*n):break        for j in range(3*n):break            if i == (3*n)//2 or j == (3*n)//2:break                print("#", end="")break            else:break                print(".", end="")break        print();0;-1;108350;2017-11-30 13:40:23
432;1619131;15;def every_second_number(num_list):break    num_list = num_list[0::2]break    for i in range(len(num_list)):break        print(num_list[i])break;1;-1;139150;2017-11-30 13:40:52
433;1619156;2;def fibonacci(n):break    a=1break    b=1break    for i in range(n):break        print(a)break        c = a+bbreak        a = bbreak        b = cbreak        break;1;-1;497250;2017-11-30 13:40:57
434;1619156;3;def factorial(n):break    s=1break    a=1break    for i in range(n):break        s=a*sbreak        a+=1break    return sbreak;1;-1;97150;2017-11-30 13:42:38
435;1619211;34;def multiples(n):break    print("Dvojnasobek", 2*n)break    print("Trojnasobek", 3*n)break    print("Desetinasobek", 10*n)break;1;-1;49400;2017-11-30 13:43:02
436;1619211;32;def near_fifty(n):break    if abs(n-50) <= 10 or abs(n-150) <= 10:break        return Truebreak    return Falsebreak;1;-1;74650;2017-11-30 13:44:20
437;1619211;33;def impose_fine(age, beer):break    if age < 18 and beer:break        return Truebreak    return Falsebreak;1;-1;32700;2017-11-30 13:44:58
438;1613970;34;def multiples(n):break    n=n*2break    print("Dvojnasobek", n)break;0;-1;32800;2017-11-30 13:48:04
439;1619228;34;def multiples(n):break    print("Dvojnasobek", 2*n)break    print("Trojnasobek", 3*n)break    print("Desetinasobek", 10*n);1;-1;61850;2017-11-30 13:48:18
440;1613970;34;def multiples(n):break    n=n*2break    print("Dvojnasobek", n);0;-1;79700;2017-11-30 13:49:52
441;1619006;35;def sequences(n):break    for i in range(n+1):break        for j in range(1,i+1):break            print(j, end=" ")break        print()break;1;-1;70600;2017-11-30 13:51:27
442;1619078;2;def fibonacci(n):break    a = 1break 	b = 2break    for i in range(n):break        a = a + bbreak        print(b)break    	  break;0;-1;137250;2017-11-30 13:51:28
443;1619250;35;def sequences(n):break    for i in range(n+1):break        for j in range(1, i+1):break            print(j, end=" ")break        print()break;1;-1;109300;2017-11-30 13:55:48
444;1619250;36;def products(n):break    for row in range(1, n+1):break        for col in range(1, n+1):break            print(row * col, end=" ")break        print()break;1;-1;163200;2017-11-30 13:58:38
445;1619250;37;def stars(n):break    for i in range(1,n+1):break        print("*", end="")break        if i % 5 == 0:break            print("|", end="")break    print()break;1;-1;53000;2017-11-30 13:59:37
446;1619078;2;def fibonacci(n):	break    break    b = 1break    a = 1break	break    print(a)break    print(b)break    for i in range(n - 2):break        c = bbreak        b = a + bbreak        a = cbreak        print(b);1;-1;487200;2017-11-30 14:00:49
447;1619078;3;def factorial(n):break    if n == 1:break    	return 1break    else:break        return n * factorial(n-1)break;1;-1;264450;2017-11-30 14:13:19
448;1619078;7;def divisors(n):break    break    for i in range(1, n + 1):break        if n % i == 0:break    		print(i)break;1;-1;144350;2017-11-30 14:15:47
449;1619344;34;def multiples(n):break    print("Dvojnasobek", n * 2)break    print("Trojnasobek", n * 3)break    print("Desetinasobek", n * 10)break;1;-1;113950;2017-11-30 14:21:03
450;1619344;32;def near_fifty(n):break    if n <= 60 and n >= 40:break        return Truebreak    elif n <= 160 and n >= 140: break        return Truebreak    return Falsebreak;1;-1;143650;2017-11-30 14:23:31
451;1619344;33;def impose_fine(age, beer):break    if age < 18 and beer is True:break        return Truebreak    return Falsebreak        break;1;-1;73500;2017-11-30 14:24:49
452;1619344;6;def nonzero_product(numbers):break    sum = 1break    for i in range(len(numbers)):break        if numbers[i] == 0:break            continuebreak        else:break            sum *= numbers[i]break    return sumbreak        break;1;-1;117350;2017-11-30 14:27:26
453;1619344;15;def every_second_number(num_list):break    for i in range(0, len(num_list), 2):break        print(num_list[i])break;1;-1;69750;2017-11-30 14:28:42
454;1525413;15;def every_second_number(num_list):break    for i in range(len(num_list)):break        if i % 2 == 0:break            print(num_list[i])break;1;-1;123200;2017-11-30 14:30:08
455;1619357;34;def multiples(n):break    print("Dvojnasobek",2*n)break    print("Trojnasobek",3*n)break    print("Desetinasobek",10*n)break;1;-1;145100;2017-11-30 14:30:26
456;1619344;16;def max_pair_sum(num_list):break    num_list.sort()break    return num_list[-1] + num_list[-2]break;0;-1;116850;2017-11-30 14:31:15
457;1525413;6;def nonzero_product(numbers):break    a = 1break    for i in range(len(numbers)):break        if numbers[i] != 0:break            a *= numbers[i]break    return abreak;1;-1;71600;2017-11-30 14:31:25
458;1619357;32;def near_fifty(n):break    if 61>n>39 or 161>n>139:break        return Truebreak    return Falsebreak;1;-1;132050;2017-11-30 14:33:18
459;1619374;34;def multiples(n):break    print("Dvojnasobek", n*2)break;0;-1;74550;2017-11-30 14:34:00
460;1619374;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print('Trojnasobek', n*3)break    print('Desetinasobek', n*10)break;1;-1;127100;2017-11-30 14:34:51
461;1619344;16;def max_pair_sum(num_list):break    maximum = 0break    for i in range(len(num_list) - 1):break        if num_list[i] + num_list[i + 1] > maximum:break            maximum = num_list[i] + num_list[i + 1]break    return maximum;1;-1;332100;2017-11-30 14:34:52
462;1619078;18;def digit_sum(n):break    break    return sum(list(map(int, list(str(n)))))break    break;1;-1;371800;2017-11-30 14:35:21
463;1619374;32;def near_fifty(n):break    if abs(n-50) <= 10:break        return Truebreak    return Falsebreak;0;-1;58300;2017-11-30 14:35:54
464;1619344;17;def five_multiples(num_list):break    array = []break    for i in range(len(num_list)):break        if num_list[i] % 5 == 0:break            array.append(num_list[i])break    return arraybreak;1;-1;59100;2017-11-30 14:35:58
465;1619344;29;def unique(mylist):break    array = []break    for i in range(len(mylist)):break        if mylist[i] not in array:break            array.append(mylist[i])break    return arraybreak;1;-1;52050;2017-11-30 14:36:56
466;1619374;32;def near_fifty(n):break    if abs(n-50) <= 10 or abs(n-150) <= 10:break        return Truebreak    return Falsebreak;1;-1;121750;2017-11-30 14:36:57
467;1619374;33;def impose_fine(age, beer):break    return (age<18 and beer)break;1;-1;44800;2017-11-30 14:37:45
468;1619374;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(j, end=" ")break        print()break;0;-1;46300;2017-11-30 14:38:45
469;1619374;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(j+1, end=" ")break        print()break;1;-1;54800;2017-11-30 14:38:54
470;1619374;36;def products(n):break    for row in range(n):break        for col in range(n):break            print(row * col, end=" ")break        print()break;0;-1;30950;2017-11-30 14:39:31
471;1619374;36;def products(n):break    for row in range(1,n):break        for col in range(1,n):break            print(row * col, end=" ")break        print()break;0;-1;47450;2017-11-30 14:39:47
472;1619374;36;def products(n):break    for row in range(1,n+1):break        for col in range(1,n+1):break            print(row * col, end=" ")break        print()break;1;-1;56950;2017-11-30 14:39:57
473;1619357;33;def impose_fine(age, beer):break    if (int(age)<18) and (beer == True):break        return Truebreak    return False;1;-1;47250;2017-11-30 14:40:04
474;1619374;37;def stars(n):break    for i in range(n):break        print("*", end="")break        if i == 4:break            print("|", end="")break    print()break;0;-1;22400;2017-11-30 14:40:22
475;1619374;37;def stars(n):break    for i in range(1,n+1):break        print("*", end="")break        if i % == 3:break            print("|", end="")break    print()break;0;-1;71850;2017-11-30 14:41:11
476;1619374;37;def stars(n):break    for i in range(1,n+1):break        print("*", end="")break        if i %4 == 3:break            print("|", end="")break    print()break;0;-1;80450;2017-11-30 14:41:20
477;1619374;37;def stars(n):break    for i in range(1,n+1):break        print("*", end="")break        if i %4 == 0:break            print("|", end="")break    print()break;0;-1;89000;2017-11-30 14:41:29
478;1619374;37;def stars(n):break    for i in range(1,n+1):break        print("*", end="")break        if i %5 == 0:break            print("|", end="")break    print()break;1;-1;97500;2017-11-30 14:41:37
479;1619357;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(j+1, end=" ")break        print()break;1;-1;122050;2017-11-30 14:42:58
480;1619357;36;def products(n):break    for row in range(1,n+1):break        for col in range(1,n+1):break            print(row * col, end=" ")break        print()break;1;-1;37550;2017-11-30 14:43:39
481;1619374;38;def cross(n):    break    for i in range(3*n):break        for j in range(3*n):break            if j>= n and j <= 2*2:break                print("#", end="")break            else:break                print(".", end="")break        print()break;0;-1;132650;2017-11-30 14:43:53
482;1619374;38;def cross(n):    break    for i in range(1,3*n+1):break        for j in range(1,1+3*n):break            if (j>= n and j <= 2*2) or (i>=n and i<=2*n) :break                print("#", end="")break            else:break                print(".", end="");0;-1;190950;2017-11-30 14:44:51
483;1619387;34;def multiples(n):break    print("Dvojnasobek", 2*n)break    print("Trojnasobek", 3*n)break    print("Desetinasobek", 10*n)break;1;-1;72100;2017-11-30 14:44:55
484;1619374;38;def cross(n):    break    for i in range(1,3*n+1):break        for j in range(1,1+3*n):break            if (j>= n and j <= 2*2) or (i>n and i<=2*n) :break                print("#", end="")break            else:break                print(".", end="")b;0;-1;201950;2017-11-30 14:45:02
485;1619374;38;def cross(n):    break    for i in range(1,3*n+1):break        for j in range(1,1+3*n):break            if (j> n and j <= 2*2) or (i>n and i<=2*n) :break                print("#", end="")break            else:break                print(".", end="")br;0;-1;207000;2017-11-30 14:45:07
486;1619374;38;def cross(n):    break    for i in range(1,3*n+1):break        for j in range(1,1+3*n):break            if (j> n and j < 2*2) or (i>n and i<2*n) :break                print("#", end="")break            else:break                print(".", end="")brea;0;-1;212750;2017-11-30 14:45:13
487;1619357;37;def stars(n):break    for i in range(1,n+1):break        print("*", end="")break        if i % 5 ==0:break            print("|", end="")break    print()break;1;-1;99500;2017-11-30 14:45:24
488;1618780;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnásobek", n*3)break    print("Desetinásobek", n*10)break;0;-1;105100;2017-11-30 14:45:39
489;1618780;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break    print("Desetinasobek", n*10)break;1;-1;119000;2017-11-30 14:45:53
490;1619387;32;def near_fifty(n):break    return abs(50-n) <= 10 or abs(150-n) <= 10break;1;-1;67600;2017-11-30 14:46:11
491;1619387;33;def impose_fine(age, beer):break    return age < 18 and beerbreak;1;-1;55650;2017-11-30 14:47:14
492;1618780;32;def near_fifty(n):break    if (40 <= n and n <= 60) or (140 <= n and n<= 160):break        return Truebreak    break    return Falsebreak;1;-1;112700;2017-11-30 14:47:55
493;1619387;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(j+1, end=" ")break        print()break;1;-1;48250;2017-11-30 14:48:50
494;1618780;33;def impose_fine(age, beer):break    if (age < 18) and beer == True:break        return Truebreak    return Falsebreak;1;-1;67900;2017-11-30 14:49:08
495;1618780;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(j+1, end=" ")break        print()break;1;-1;41650;2017-11-30 14:50:13
496;1619387;36;def products(n):break    for row in range(n):break        for col in range(n):break            print((row+1)*(col+1), end=" ")break        print()break;1;-1;44300;2017-11-30 14:50:17
497;1618780;36;def products(n):break    for row in range(n):break        for col in range(n):break            print((row+1) * (col+1), end=" ")break        print()break;1;-1;31000;2017-11-30 14:50:48
498;1618780;37;def stars(n):break    for i in range(n):break        print("*", end="")break        if (i+1) % 5 == 0:break            print("|", end="")break    print()break;1;-1;95850;2017-11-30 14:52:27
499;1619387;37;def stars(n):break    for i in range(n):break        if i>0 and (i%5) == 0:break            print("|", end="")break        print("*", end="")break        break    print()break;1;-1;148950;2017-11-30 14:52:56
500;1618780;38;def cross(n):    break    for i in range(3*n):break        for j in range(3*n):break            if (i >= n and i < 2*n) or (j >= n and j < 2*n):break                print("#", end="")break            else:break                print(".", end="")break;1;-1;202050;2017-11-30 14:55:52
501;1619387;38;def cross(n):    break    for i in range(3*n):break        for j in range(3*n):break            if i//n == 1 or j//n == 1:break                print("#", end="")break            else:break                print(".", end="")break        print()break;1;-1;230700;2017-11-30 14:56:52
502;1619455;15;def every_second_number(num_list):break    num_list = num_list[0::2]break    print(num_list)break;0;-1;67700;2017-11-30 15:05:30
503;1619508;33;def impose_fine(age, beer):break    return age < 18 and beerbreak;1;-1;59750;2017-11-30 15:26:31
504;1619506;34;def multiples(n):break    print("Dvojnasobek", 2*n)break    print("Trojnasobek", 3*n)break    print("Desetinasobek", 10*n)break;1;-1;307250;2017-11-30 15:34:21
505;1618780;1;def numbers(n):break    for i in range(n):break    	print(i+1)break;1;-1;40600;2017-11-30 15:35:32
506;1619506;32;def near_fifty(n):break    if (40 <= n and n <= 60) or (140 <= n and n <= 160):break        return Truebreak    return Falsebreak;1;-1;151950;2017-11-30 15:37:30
507;1618780;2;def fibonacci(n):break    a = 1break    b = 1break    print(a)break    print(b)break    for i in range(n-2):break        tmp = abreak        a += bbreak        b = tmpbreak        print(a)break;1;-1;251750;2017-11-30 15:39:47
508;1619526;32;def near_fifty(n):break    return (40 <= n and n <= 60)  or (140 <= n and n <= 160)break;1;-1;96800;2017-11-30 15:39:54
509;1619506;33;def impose_fine(age, beer):break    if age < 18 and beer:break        return Truebreak    return Falsebreak;1;-1;145900;2017-11-30 15:40:12
510;1618780;3;def factorial(n):break    if n == 1:break        return nbreak    return n * factorial(n-1);1;-1;37550;2017-11-30 15:40:27
511;1619526;33;def impose_fine(age, beer):break	return (age < 18) and !beer;0;-1;55900;2017-11-30 15:41:56
512;1619506;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(j+1, end=" ")break        print()break;1;-1;72500;2017-11-30 15:42:08
513;1619526;33;def impose_fine(age, beer):break	return (age < 18) and not beer;0;-1;65950;2017-11-30 15:42:08
514;1619526;33;def impose_fine(age, beer):break	return (age < 18) and beer;1;-1;90350;2017-11-30 15:42:37
515;1618780;7;from math import sqrtbreakdef divisors(n):break    for i in range(n):break        if n % (i + 1) == 0:break            print(i+1)break;1;-1;131250;2017-11-30 15:42:41
516;1619526;34;def multiples(n):break    print("Dvojnasobek", 2*n)break    print("Trojnasobek", 3*n)break    print("Desetinasobek", 10*n)break;1;-1;45950;2017-11-30 15:43:41
517;1618780;18;def digit_sum(n):break    output = 0break    while n > 0:        break        output += n % 10break        n //= 10break    return outputbreak;1;-1;77100;2017-11-30 15:44:01
518;1619526;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(j+1, end=" ")break        print()break;1;-1;34450;2017-11-30 15:44:38
519;1619506;36;def products(n):break    for row in range(n):break        for col in range(n):break            print((row+1) * (col+1), end=" ")break        print()break;1;-1;142750;2017-11-30 15:44:56
520;1619526;36;def products(n):break    for row in range(1, n+1):break        for col in range(1, n+1):break            print(row * col, end=" ")break        print()break;1;-1;41500;2017-11-30 15:45:38
521;1618780;20;def divisors_count(n):break    output = 0break    for i in range(1, n+1):break        if n % i == 0:break            output += 1break    return outputbreak;1;-1;106100;2017-11-30 15:45:50
522;1619506;37;def stars(n):break    for i in range(n):break        print("*", end="")break        if (i+1)%5 == 0:break            print("|", end="")break    print()break;1;-1;55750;2017-11-30 15:46:02
523;1618780;21;def powers(base, n):break    for i in range(n):break        print(base ** (i+1))break;1;-1;56500;2017-11-30 15:46:49
524;1619526;37;def stars(n):break    for i in range(n):break        if (i+1)%6 == 0:break            print("|", end="")break        print("*", end="")break    print()break;0;-1;67900;2017-11-30 15:47:05
525;1619526;37;def stars(n):break    for i in range(n):break        print("*", end="")break        if (i)%5 == 4:break            print("|", end="")break    print()break;1;-1;105950;2017-11-30 15:47:50
526;1619506;38;def cross(n):    break    for i in range(3*n):break        for j in range(3*n):break            if (i >= n and i < 2*n) or (j >= n and j < 2*n ):break                print("#", end="")break            else:break                print(".", end="")break;1;-1;266100;2017-11-30 16:01:22
527;1619506;1;def numbers(n):break    for i in range(n):break    	print(i+1)break;1;-1;38150;2017-11-30 16:09:15
528;1619506;2;def fibonacci(n):break    x = 0break    y = 1break    print(1)break    for _ in range(n-1):break        z = x + ybreak        print(z)break        x = ybreak        y = zbreak;1;-1;328300;2017-11-30 16:15:24
529;1619506;3;def factorial(n):break    if n == 2:break        return nbreak    else:break        return factorial(n-1)*nbreak;0;-1;80850;2017-11-30 16:16:46
530;1619506;3;def factorial(n):break    if n < 2:break        return nbreak    else:break        return factorial(n-1)*nbreak;1;-1;135000;2017-11-30 16:17:40
531;1619506;7;def divisors(n):break    for i in range(1, n+1):break        if n % i == 0:break            print(i)break;1;-1;159800;2017-11-30 16:23:24
532;1619506;18;def digit_sum(n):break    asum = 0break    while n != 0:break    	asum += n%10break    	n //= 10break    return asumbreak;1;-1;205100;2017-11-30 16:28:10
533;1619792;5;def duplication(text):break    duped_text = ""break    for i in range (len(text)):break        duped_text += text[i]break        duped_text += text[i]break    return duped_textbreak;1;-1;139100;2017-11-30 16:30:45
534;1619506;20;def divisors_count(n):break	x = 0break	for i in range(1,n+1):break    	if n%i == 0:break			x += 1break	return xbreak;1;-1;466300;2017-11-30 16:37:57
535;1619506;21;def powers(base, n):break	for i in range(1, n + 1):break    	print(base**i)break;1;-1;173250;2017-11-30 16:41:03
536;1619602;34;def multiples(n):break    print("Dvojnasobek", 2 * n)break    print("Trojnasobek", 3 * n)break    print("Desetinasobek", 10 * n)break;1;-1;131350;2017-11-30 16:58:20
537;1619771;6;def nonzero_product(numbers):break    result = 1break    for i in range(len(numbers)):break        if numbers[i] != 0:break            result *= numbers[i]break    return resultbreak;1;-1;297400;2017-11-30 16:58:23
538;1619771;15;def every_second_number(num_list):break    for i in range(len(num_list)):break        if i % 2 == 0 or i == 0:break            print(num_list[i])break;1;-1;122000;2017-11-30 17:00:34
539;1619896;34;def multiples(n):break    print("Dvojnasobek", 2 * n)break    print("Trojnasobek", 3 * n)break    print("Desetinasobek", 10 * n)break;1;-1;44300;2017-11-30 17:01:19
540;1619896;32;def near_fifty(n):break    if (n >= 40 and n <= 60) or (n >= 140 and n <= 160):break        return Truebreak    return Falsebreak;1;-1;178750;2017-11-30 17:05:33
541;1619896;33;def impose_fine(age, beer):break    if age < 18 and beer:break        return Truebreak    return Falsebreak;1;-1;79550;2017-11-30 17:07:13
542;1619506;23;def greatest_common_divisor(a, b):break    if b == 0:break        return abreak    else:break        return greatest_common_divisor(b, a % b)break;1;-1;230500;2017-11-30 17:07:27
543;1619835;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break    print("Desetinasobek", n*10)break;1;-1;63350;2017-11-30 17:08:44
544;1619896;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(j + 1, end=" ")break        print()break;1;-1;138350;2017-11-30 17:09:52
545;1619835;32;def near_fifty(n):break    if (n<=50 and n>=40) or (n>=50 and n<=60) or (n<=150 and n>=140) or (n>=150 and n<=160):break        return Truebreak    else:break       	return Falsebreak;1;-1;275050;2017-11-30 17:13:24
546;1619771;16;def max_pair_sum(num_list):break    tmp = 0break    for i in range(len(num_list)-1):break        if tmp < (num_list[i]+num_list[i+1]):break            tmp = num_list[i] + num_list[i+1]break        break    return tmpbreak;1;-1;173350;2017-11-30 17:15:32
547;1619771;17;def five_multiples(num_list):break    alist = []break    for i in range(len(num_list)):break        if num_list[i]%5 ==0:break            alist.append(num_list[i])break    return alistbreak;1;-1;73850;2017-11-30 17:16:49
548;1619506;22;def is_prime(n):break	for i in range(2, int(n**0.5)+1):break		if n%i == 0:break			return Falsebreak	return Truebreakbreakdef print_primes(n):break	counter = 1break	i = 2break	print(i)break	while counter < n:break		i += 1break		if is_prime(i):break;1;-1;254850;2017-11-30 17:16:54
549;1619835;33;def impose_fine(age, beer):break    if age<18 and beer:break        return Truebreak    elif age>18 or not beer:break        return Falsebreak;1;-1;203700;2017-11-30 17:16:54
550;1619896;36;def products(n):break    for row in range(n):break        for col in range(1, n + 1):break            print(row * col + col, end=" ")break        print()break;1;-1;418250;2017-11-30 17:16:55
551;1619771;29;def unique(mylist):break    for x in mylist:break        for y in mylist:break            if x == y:break                mylist.remove(y)break    return mylistbreak;0;-1;107850;2017-11-30 17:18:39
552;1619835;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(1+j, end=" ")break        print()break;1;-1;86000;2017-11-30 17:18:43
553;1619896;37;def stars(n):break    for i in range(1, n + 1):break        print("*", end="")break        if i % 5 == 0:break            print("|", end="")break    print()break;1;-1;92900;2017-11-30 17:19:41
554;1619835;8;def square(n):break    print(("# " * n + "\n") * n)break;1;-1;91750;2017-11-30 17:20:36
555;1619835;28;def string_zip(text1, text2):break    length = max(len(text1),len(text2))break    a = ""break    for i in range(length):break        if i<len(text1):break            a += text1[i]break        if i<len(text2):break            a += text2[i]break    ret;1;-1;248400;2017-11-30 17:24:55
556;1619896;38;def cross(n):    break    for i in range(3*n):break        for j in range(3*n):break            if (i < (3*n - n) and i > (n - 1)) or (j < (3*n - n) and j > (n - 1)):break                print("#", end="")break            else:break                pr;1;-1;517650;2017-11-30 17:28:25
557;1619896;1;def numbers(n):break    for i in range(1, n + 1):break        print(i)break;1;-1;51950;2017-11-30 17:30:39
558;1619835;10;def pyramid(n):break    for i in range(n):break        longest = 1+(n-1)*2break        current = i*2 + 1break        spaces = int(longest) - int(current)break        spaces = spaces//2break        print("  " * spaces,"# " * current, sep="");1;-1;370700;2017-11-30 17:31:17
559;1620000;34;def multiples(n):break    print("Dvojásobek ", 2*n)break    print("Trojnásobek ", 3*n)break    print("Desetinásobek ", 10*n)break;0;-1;129250;2017-11-30 17:36:53
560;1620000;34;def multiples(n):break    print("Dvojnasobek ", 2*n)break    print("Trojnasobek ", 3*n)break    print("Desetinasobek ", 10*n)break;0;-1;156900;2017-11-30 17:37:20
561;1620000;34;def multiples(n):break    print("Dvojnasobek", 2*n)break    print("Trojnasobek", 3*n)break    print("Desetinasobek", 10*n)break;1;-1;180500;2017-11-30 17:37:44
562;1620000;32;def near_fifty(n):break    return(40 <= n <= 60)break;0;-1;78200;2017-11-30 17:39:06
563;1619896;2;def fibonacci(n):break    b = 0break    c = 1break    for i in range(n):break        print(c)break        a = bbreak        b = cbreak        c = a + bbreak;1;-1;317600;2017-11-30 17:42:00
564;1619896;3;def factorial(n):break    f = 1break    for i in range(1, n + 1):break        f *= ibreak    return fbreak;1;-1;64050;2017-11-30 17:43:06
565;1619771;29;def unique(mylist):break    return set(mylist)break;0;-1;233500;2017-11-30 17:44:11
566;1619896;7;def divisors(n):break    for i in range(1, n + 1):break        if n % i == 0:break            print(i)break;1;-1;73600;2017-11-30 17:44:23
567;1619771;29;def unique(mylist):break    return list(set(mylist))break;0;-1;246200;2017-11-30 17:44:24
568;1619771;29;def unique(mylist):break    tmp = []break    for x in mylist:break        if x not in tmp:break            tmp.append(x)break        break    return tmpbreak;1;-1;507550;2017-11-30 17:50:00
569;1619896;18;def digit_sum(n):break    sum = n % 10break    while n // 10 > 0:break        n = n // 10break        sum += n % 10break    return sumbreak;1;-1;174000;2017-11-30 17:51:00
570;1619896;20;def divisors_count(n):break    counter = 0break    for i in range (1, n + 1):break        if n % i == 0:break            counter += 1break    return counterbreak;1;-1;81050;2017-11-30 17:52:23
571;1619896;21;def powers(base, n):break    for i in range(1, n + 1):break        print(base**i)break;1;-1;66200;2017-11-30 17:53:32
572;1383003;34;def multiples(n):break    print("Dvojnasobek", 2*n)break    print("Trojnasobek", 3*n)break    print("Desetinasobek", 10*n)break;1;-1;64900;2017-11-30 17:54:17
573;1415225;34;def multiples(n):break    print("Dvojnasobek", n)break;0;-1;5600;2017-11-30 17:54:28
574;1383003;32;def near_fifty(n):break    if n >= 40 and n <= 60:break        return Truebreak    elif n >= 140 and n <= 160:break        return Truebreak    else:break    	return Falsebreak;1;-1;92600;2017-11-30 17:55:53
575;1383003;6;def nonzero_product(numbers):break    sum = 1break    for number in numbers:break        if number == 0:break            sum = sum*1break        else:break            sum = sum * numberbreak    return sumbreak;1;-1;71300;2017-11-30 17:57:33
576;1619896;22;def is_prime(i):break    for j in range(2, i):break        if i % j == 0:break            return Falsebreak    return Truebreakbreakdef print_primes(n):break    i = 2break    while n > 0:break        if is_prime(i):break            print(i)break;1;-1;259750;2017-11-30 17:57:56
577;1619896;23;def greatest_common_divisor(a, b):break    if a == b:break        return abreak    if b > a:break        a, b = b, abreak    return greatest_common_divisor(a - b, b)break    break;1;-1;194500;2017-11-30 18:01:13
578;1383003;15;def every_second_number(num_list):break    for i in range(len(num_list)):break        if i%2 == 0:break            print(num_list[i])break;1;-1;256650;2017-11-30 18:02:21
579;1383003;33;def impose_fine(age, beer):break    return age < 18 and beerbreak;1;-1;49100;2017-11-30 18:03:36
580;1383003;35;def sequences(n):break    for i in range(1, n+1):break        for j in range(1, i+1):break            print(j, end=" ")break        print()break;1;-1;39900;2017-11-30 18:04:34
581;1383003;36;def products(n):break    for row in range(1, n + 1):break        for col in range(1, n + 1):break            print(row * col, end=" ")break        print()break;1;-1;19850;2017-11-30 18:05:04
582;1383003;37;def stars(n):break    for i in range(1, n + 1):break        print("*", end="")break        if i%5 == 0:break            print("|", end="")break    print()break;1;-1;43650;2017-11-30 18:05:54
583;1619771;30;breakdef most_common(mylist):break    s = {}break    for x in mylist:break    	s[x] = s.get(x,0) +1break    tmp = sorted(s, key = lambda x: s[x], reverse = True)[0]break    return tmpbreak;0;-1;1475600;2017-11-30 18:20:05
584;1619771;30;breakdef most_common(mylist):break    s = {}break    for x in mylist:break    	s[x] = s.get(x,0) +1break    tmp = sorted(s, key = lambda x: s[x], reverse = True)[0]break    return tmpbreak;0;-1;1479600;2017-11-30 18:20:09
585;1619771;30;breakdef most_common(mylist):break    s = {}break    for x in mylist:break    	s[x] = s.get(x,0) +1break    tmp = sorted(s, key = lambda x: s[x], reverse = True)[0]break    return tmpbreak;0;-1;1494750;2017-11-30 18:20:25
586;1619771;30;breakdef most_common(mylist):break    s = {}break    for x in mylist:break    	s[x] = s.get(x,0) +1break    tmp = sorted(s, key = lambda x: s[x], reverse = True)[0]break    t = s.values()break    for i in range(len(t)-1):break        if t[i] == t[i+1;0;-1;1672700;2017-11-30 18:23:23
587;1619771;30;breakdef most_common(mylist):break    s = {}break    for x in mylist:break    	s[x] = s.get(x,0) +1break    tmp = sorted(s, key = lambda x: s[x], reverse = True)[0]break    t = s.values()break    for i in range(len(t)-1):break        if t[i] == t[i+1;0;-1;1674850;2017-11-30 18:23:25
588;1619771;30;breakdef most_common(mylist):break    s = {}break    for x in mylist:break    	s[x] = s.get(x,0) +1break    tmp = sorted(s, key = lambda x: s[x], reverse = True)[0]break    t = s.values()break    for i in range(len(t)-1):break        if t[i] == t[i+1;0;-1;1675350;2017-11-30 18:23:25
589;1620147;8;def square(n):break    for i in range(n):break        for j in range(n):break        	print("#", end=" ")break        print()break;1;-1;48050;2017-11-30 18:27:40
590;1415225;34;def multiples(n):break    print("Dvojnasobek", n)breakmultiples;0;-1;165100;2017-11-30 18:30:03
591;1619771;31;def find_longest_word(words_list):break    max_value = ""break    for i in range(len(words_list)):break        if len(words_list[i]) > len(max_value):break            max_value = words_list[i]break    return max_valuebreak;1;-1;187400;2017-11-30 18:30:09
592;1415225;34;def multiples(n):break    print("Dvojnasobek", n)breakmultiples;0;-1;184650;2017-11-30 18:30:22
593;1415225;34;def multiples(n):break    print("Dvojnasobek", n)breakmultiples;0;-1;185850;2017-11-30 18:30:23
594;1415225;34;def multiples(n):break    print("Dvojnasobek", n)breakmultiples;0;-1;186200;2017-11-30 18:30:24
595;1415225;34;def multiples(n):break    print("Dvojnasobek", n)breakmultiples;0;-1;186450;2017-11-30 18:30:24
596;1415225;34;def multiples(n):break    print("Dvojnasobek", n)breakmultiples;0;-1;186800;2017-11-30 18:30:24
597;1415225;34;def multiples(n):break    print("Dvojnasobek", n)breakmultiples;0;-1;187050;2017-11-30 18:30:25
598;1415225;34;def multiples(n):break    print("Dvojnasobek", n)breakmultiples;0;-1;186600;2017-11-30 18:30:25
599;1619131;34;def multiples(n):break    n *=2 break    print("Dvojnasobek", n)break;0;-1;21500;2017-11-30 18:46:38
600;1619131;34;def multiples(n):break    n1 = n*2 break    print("Dvojnasobek", n1)break    n2 = n*3 break    print("Dvojnasobek", n2)break    n3 = n*10 break    print("Dvojnasobek", n3)break;0;-1;148000;2017-11-30 18:48:44
601;1619131;34;def multiples(n):break    n1 = n*2 break    print("Dvojnasobek", n1)break    n2 = n*3 break    print("Trojnasobek", n2)break    n3 = n*10 break    print("Desetinasobek", n3)break;1;-1;170850;2017-11-30 18:49:07
602;1619131;32;def near_fifty(n):break    if n >= 60 and n <= 40:break        return Truebreak    elif n >= 160 and n <= 140:break        return Truebreak    else:break    	return Falsebreak;0;-1;106850;2017-11-30 18:50:58
603;1619131;32;def near_fifty(n):break    if n <= 60 or n >= 40:break        return Truebreak    elif n >= 160 and n <= 140:break        return Truebreak    else:break    	return Falsebreak;0;-1;143500;2017-11-30 18:51:34
604;1619131;32;def near_fifty(n):break    if n <= 60 or n >= 40:break        return Truebreak    elif n <= 160 and n >= 140:break        return Truebreak    else:break    	return Falsebreak;0;-1;160250;2017-11-30 18:51:51
605;1619131;32;def near_fifty(n):break    if n <= 60 and n >= 40:break        return Truebreak    elif n <= 140 and n >= 140:break        return Truebreak    else:break    	return Falsebreak;0;-1;205550;2017-11-30 18:52:37
606;1619131;32;def near_fifty(n):break    if n <= 60 and n >= 40:break        return Truebreak    elif n <= 160 and n >= 140:break        return Truebreak    else:break    	return Falsebreak;1;-1;225300;2017-11-30 18:52:57
607;1619506;4;def alphabet(n):break    for i in range(n):break        print(chr(ord("A")+i%26))break;1;-1;172550;2017-11-30 18:53:59
608;1619131;33;def impose_fine(age, beer):break    if age <=18 and beer==False:break    	return Falsebreak    if age <=18 and beer==True:break        return Truebreak    if age >=18:break        return Falsebreak   break    break;1;-1;126300;2017-11-30 18:55:06
609;1619506;5;def duplication(text):break    x = ""break    for letter in text:break        x += 2*letterbreak    return xbreak;1;-1;70000;2017-11-30 18:55:37
610;1619131;35;def sequences(n):break    for i in range(n):break        neco = 0break        for j in range(i+1):break            neco +=1break            print(neco, end=" ")break        print()break;1;-1;80950;2017-11-30 18:56:42
611;1619771;1;def numbers(n):break    if n > 1:break        numbers(n-1)break    print(n)break;1;-1;395500;2017-11-30 18:58:46
612;1619131;36;def products(n):break    for row in range(n):break        row +=1 break        for col in range(1,n+1):break            print(row * col, end=" ")break        print()break;1;-1;155950;2017-11-30 18:59:20
613;1619506;13;def string_intersection(left, right):break	for i in range(min(len(left), len(right))):break		if left[i] == right[i]:break			print(left[i])break;1;-1;215250;2017-11-30 18:59:20
614;1619506;14;def palindrom(text):break    return text == text[::-1]break;1;-1;23650;2017-11-30 18:59:51
615;1620248;34;def multiples(n):break    print("Dvojnasobek", 2*n)break    print("Trojnasobek", 3*n)break    print("Desetinasobek",10*n)break;1;-1;158700;2017-11-30 19:00:50
616;1619131;37;def stars(n):break    for i in range(n):break        print("*", end="")break        if i%4 == 0:break            print("|", end="")break    print()break;0;-1;93850;2017-11-30 19:00:57
617;1619771;3;def factorial(n):break    if n==0:break        return 1break    else: return factorial(n-1)*nbreak;1;-1;54400;2017-11-30 19:01:03
618;1619131;37;def stars(n):break    for i in range(1,n+1):break        print("*", end="")break        if i%4 == 0:break            print("|", end="")break    print()break;0;-1;119050;2017-11-30 19:01:22
619;1619131;37;def stars(n):break    for i in range(1,n+1):break        print("*", end="")break        if i%5 == 0:break            print("|", end="")break    print()break;1;-1;128550;2017-11-30 19:01:31
620;1619771;7;def divisors(n):break    for i in range(1,n+1):break        if n%i ==0:break            print(i)break;1;-1;64950;2017-11-30 19:02:20
621;1619771;23;def greatest_common_divisor(a, b):break    if b == 0:break        return abreak    else: return greatest_common_divisor(b,a%b)break;1;-1;39850;2017-11-30 19:03:23
622;1619131;1;def numbers(n):break    for i in range(1,n+1):break    	print(i)break;1;-1;42350;2017-11-30 19:05:44
623;1619131;2;def fibonacci(n):break    if n > 1:break        print (fibonacci(n-1) + fibonacci(n-2))break    print (n)break;0;-1;167600;2017-11-30 19:09:22
624;1619506;19;def zigzag(text):break	text1, text2 = [], []  break	for i in range(len(text)//2+1):break		text1.append(text[2*i])break		text1.append(".")break	for i in range(len(text)//2):break		text2.append(text[2*i+1])break		text2.append(".")break	text = text1 + t;0;-1;774400;2017-11-30 19:12:59
625;1619131;17;def five_multiples(num_list):break    num_list1 = []break    for i in range (len(num_list)):break        if (num_list[i])%5 == 0:break             num_list1 = num_list[i]break    print(num_list1)break            break                break    break;0;-1;564750;2017-11-30 19:21:23
626;1619131;17;def five_multiples(num_list):break    num_list1 = []break    for i in range (len(num_list)):break        if (num_list[i])%5 == 0:break             num_list1.append(num_list[i])break    print(num_list1)break            break                break    br;0;-1;683450;2017-11-30 19:23:56
627;1619131;17;def five_multiples(num_list):break    num_list1 = []break    for i in range (len(num_list)):break        if (num_list[i])%5 == 0:break             num_list1.append(num_list[i])break    break    print(num_list1)break            break                br;0;-1;744750;2017-11-30 19:24:57
628;1620434;34;def multiples(n):break    print("Dvojnasobek", 2*n)break    print("Trojnásobek", 3*n)break    print("Desetinasobek", 10*n)break;0;-1;70150;2017-11-30 19:35:58
629;1620434;34;def multiples(n):break    print("Dvojnasobek", 2*n)break    print("Trojnásobek", 3*n)break    print("Desetinasobek", 10*n)break;0;-1;79300;2017-11-30 19:36:07
630;1620434;34;def multiples(n):break    print("Dvojnasobek", 2*n)break    print("Trojnasobek", 3*n)break    print("Desetinasobek", 10*n)break;1;-1;86250;2017-11-30 19:36:14
631;1620434;32;def near_fifty(n):break    return n%50 <= 10 or 50 - n%50 <= 10break;0;-1;195700;2017-11-30 19:39:35
632;1620434;32;def near_fifty(n):break    return 40 <= n <= 60 or 140 <= n <= 160  break;1;-1;292200;2017-11-30 19:41:12
633;1620434;33;def impose_fine(age, beer):break    return age < 18 and beerbreak;1;-1;33000;2017-11-30 19:41:50
634;1620434;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(j + 1, end=" ")break        print()break;1;-1;45450;2017-11-30 19:42:58
635;1620434;36;def products(n):break    for row in range(n):break        for col in range(n):break            print((row+1) * (col+1), end=" ")break        print()break;1;-1;27400;2017-11-30 19:43:34
636;1620434;37;def stars(n):break    for i in range(n + 1):break        print("*", end="")break        if i == 5:break            print("|", end="")break    print()break;0;-1;17450;2017-11-30 19:43:59
637;1620470;6;def nonzero_product(numbers):break    total = 1break    for num in numbers:break        if num != 0:break            total *= numbreak    return totalbreak;1;-1;57850;2017-11-30 19:44:32
638;1620434;37;def stars(n):break    for i in range(n):break        print("*", end="")break        if i %5 == 4:break            print("|", end="")break    print()break;1;-1;53150;2017-11-30 19:44:35
639;1620470;15;def every_second_number(num_list):break    for i in range(len(num_list)):break        if i % 2 == 0:break    		print(num_list[i])break    break;1;-1;86200;2017-11-30 19:46:03
640;1620470;16;def max_pair_sum(a):break    m = a[0] + a[1]break    for i in range(2,len(a)):break        if m < a[i] + a[i-1]:break            m = a[i] + a[i-1]break    return mbreak;1;-1;107650;2017-11-30 19:52:17
641;1620470;17;def five_multiples(num_list):break    return [i for i in num_list if i % 5 == 0]break;1;-1;26950;2017-11-30 19:52:49
642;1620470;29;def unique(a):break    res = []break    for i in a:break        if i not in res:break            res.append(i)break    return resbreak;1;-1;100350;2017-11-30 19:54:32
643;1620248;32;def near_fifty(n):break    x = 50break    y = 150break    if ((x + 10) >= n and (x - 10) <= n) or ((y + 10) >= n and (y - 10) <= n):break        print(True)break    else:break        print(False)break;0;-1;617800;2017-11-30 20:02:40
644;1620248;32;def near_fifty(n):break    x = 50break    y = 150break    if ((x + 10) >= n and (x - 10) <= n) or ((y + 10) >= n and (y - 10) <= n):break        print(True)break    else:break        print(False)break;0;-1;628150;2017-11-30 20:02:50
645;1620470;30;def most_common(mylist):break    f = {}break    for a in mylist:break        f[a] = f.get(a, 0) + 1break    b = sorted(f.items(), key=lambda x: x[1], reverse=True)break    i = 1break    while i < len(b) and b[i][1] == b[0][1]:break        i += 1break;1;-1;527200;2017-11-30 20:03:25
646;1620248;32;def near_fifty(n):break    x = 50break    y = 150break    if ((x + 10) >= n and (x - 10) <= n) or ((y + 10) >= n and (y - 10) <= n):break        return Truebreak    else:break        return Falsebreak;1;-1;756350;2017-11-30 20:06:51
647;1619506;25;def count_a(text):break    return text.count("A") + text.count("a")break;1;-1;43150;2017-11-30 20:09:20
648;1620470;31;def find_longest_word(words_list):break    return max(words_list, key=lambda x: len(x))break;0;-1;238850;2017-11-30 20:09:30
649;1619506;26;def censorship(text):break    x = ""break    for i in range(len(text)//2):break        x += text[2*i]break        x += "X"break    return xbreak;0;-1;96000;2017-11-30 20:11:02
650;1619506;26;def censorship(text):break    x = ""break    for i in range(len(text)//2):break        x += text[2*i]break        x += "X"break    return xbreak;0;-1;96050;2017-11-30 20:11:02
651;1619506;26;def censorship(text):break    x = ""break    for i in range(len(text)//2+1):break        x += text[2*i]break        x += "X"break    return xbreak;0;-1;105800;2017-11-30 20:11:12
652;1619506;26;def censorship(text):break    x = ""break    for i in range(len(text)):break		if i % 2 == 0:break			x += text[i]break		else:break			x += "X"break    return xbreak;1;-1;239950;2017-11-30 20:13:26
653;1619506;27;def first_letters(text):break    text = text.split()break    for x in text:break        print(x[0][0], end=" ")break    print()break;1;-1;134200;2017-11-30 20:15:53
654;1619506;6;def nonzero_product(numbers):break    x = 1break    for y in numbers:break        if y != 0:break            x *= ybreak    return xbreak;1;-1;86750;2017-11-30 20:22:15
655;1619506;15;def every_second_number(num_list):break    for i in range(0, len(num_list), 2):break        print(num_list[i])break;1;-1;72100;2017-11-30 20:23:30
656;1619506;16;def max_pair_sum(num_list):break    x = num_list[0] + num_list[1]break    for i in range(len(num_list)-1):break		if num_list[i] + num_list[i+1] > x:break			x = num_list[i] + num_list[i+1]break    return x;1;-1;170100;2017-11-30 20:26:26
657;1619506;17;def five_multiples(num_list):break    alist = []break    for x in num_list:break        if x % 5 == 0:break            alist.append(x)break    return alistbreak;1;-1;65050;2017-11-30 20:27:40
658;1619506;29;def unique(mylist):break    x = []break    for z in mylist:break        if z not in x:break            x.append(z)break    return xbreak;1;-1;134200;2017-11-30 20:30:13
659;1620470;28;def string_zip(text1, text2):break    if len(text1) > 1:break        return text1[0] + string_zip(text2, text1[1:])break    return text1[0] + text2break;1;-1;1367550;2017-11-30 20:32:38
660;1620634;34;def multiples(n):break    n = 2 * nbreak    print("Dvojnasobek", n)break;0;-1;109350;2017-11-30 20:57:28
661;1620634;34;def multiples(n):break    n = 2 * nbreak    print("Dvojnasobek", n)break;0;-1;118050;2017-11-30 20:57:36
662;1620634;34;def multiples(n):break    print("Dvojnasobek", 2 * n)break    print("Trojnasobek", 3 * n)break    print("Desetinasobek", 10 * n)break;1;-1;51800;2017-11-30 21:00:14
663;1569071;4;def alphabet(n):break    for i in range(n):break        if ord('A') + i <= ord('Z'):break        	print(chr(ord('A') + i))break        else:break            print(chr(ord('A') + i - 26))break            break;0;-1;274050;2017-11-30 21:09:43
664;1569071;4;def alphabet(n):break    for i in range(n):break        print(chr(ord('A') + (i % 26)))break            break;1;-1;445650;2017-11-30 21:12:39
665;1569071;34;def multiples(n):break    print("Dvojnasobek", 2 * n)break    print("Trojnasobek", 3 * n)break    print("Desetinasobek ", 10 * n)break;0;-1;97400;2017-11-30 21:14:34
666;1569071;34;def multiples(n):break    print("Dvojnasobek", 2 * n)break    print("Trojnasobek", 3 * n)break    print("Desetinasobek", 10 * n)break;1;-1;134050;2017-11-30 21:15:10
667;1569071;32;def near_fifty(n):break    if abs(50 - n) <= 10 or abs(150 - n) <=10:break        return Truebreak    break    return Falsebreak;1;-1;125950;2017-11-30 21:17:39
668;1569071;33;def impose_fine(age, beer):break    if age < 18 and beer:break        return Truebreak    return Falsebreak;1;-1;47350;2017-11-30 21:18:31
669;1569071;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(j + 1, end=" ")break        print()break;1;-1;66900;2017-11-30 21:20:10
670;1620634;32;def near_fifty(n):break    if abs(50 - n) < 10 or abs(50 - n) == 10:	break        return Truebreak    elif abs(150 - n) < 10 or abs(150 - n) == 10:break        return Truebreak    else:break        return False;1;-1;1075800;2017-11-30 21:23:47
671;1620634;33;def impose_fine(age, beer):break    if age > 18 and beer is True:break    	return Falsebreak;0;-1;354300;2017-11-30 21:29:54
672;1620634;33;def impose_fine(age, beer):break    if age < 18 and beer is True:break    	return Truebreak    return Falsebreak;1;-1;437450;2017-11-30 21:31:19
673;1620634;35;def sequences(n):break    for i in range(1, n + 1):break        for j in range(1, i + 1):break            print(j, end=" ")break        print()break;1;-1;145800;2017-11-30 21:34:27
674;1620634;36;def products(n):break    for row in range(1, n + 1):break        for col in range(1, n + 1):break            print(row * col, end=" ")break        print()break;1;-1;55500;2017-11-30 21:35:31
675;1620634;37;def stars(n):break    for i in range(1, n + 1):break        print("*", end="")break        if i % 5 == 0:break            print("|", end="")break    print()break;1;-1;67300;2017-11-30 21:36:43
676;1620634;38;def cross(n):    break    for i in range(3*n):break        for j in range(3*n):break            if i > n and i < 2 * n or j > n and j < 2 * n or i == n or j == n:break                print("#", end="")break            else:break                print(;1;-1;237250;2017-11-30 21:40:49
677;1620634;1;def numbers(n):break    for i in range(1, n + 1):break        print(i)break;1;-1;201400;2017-11-30 21:44:50
678;1619506;8;def square(n):break    for _ in range(n):break		for _ in range(n):break			print("#", end=" ")break		print()break;1;-1;49800;2017-11-30 22:42:43
679;1619387;1;def numbers(n):break    for i in range(1, n+1):break        print(i)break;1;-1;23650;2017-11-30 22:44:31
680;1619506;9;def empty_square(n):break    for _ in range(n):break        print("#", end=" ")break    print()break    for _ in range(n-2):break        for j in range(n):break            if j == 0 or j == n-1:break                print("#", end = " ")break;0;-1;155900;2017-11-30 22:45:22
681;1619506;9;def empty_square(n):break    if n == 1:break        print("#")break        returnbreak    for _ in range(n):break        print("#", end=" ")break    print()break    for _ in range(n-2):break        for j in range(n):break            if j == 0 or j ==;1;-1;217750;2017-11-30 22:46:23
682;1619387;2;def fibonacci(n):break    ar = [1 for i in range(n)]break    for i in range(2, n):break        ar[i] = ar[i-2] + ar[i-1]break    for i in range(n):break    	print(ar[i])break;1;-1;142300;2017-11-30 22:46:59
683;1619387;3;def factorial(n):break    fact = 1break    for i in range(1, n+1):break        fact *= ibreak    return factbreak;1;-1;43300;2017-11-30 22:47:48
684;1620634;2;def fibonacci(n):break    a0 = 1break    a1 = 1break    for i in range(n):break        if i == 0:break            print(a0)break        elif i == 1:break            print(a1)break        else:break            a2 = a1 + a0break            print(a2)bre;1;-1;1038300;2017-11-30 22:48:42
685;1619387;7;def divisors(n):break    for i in range(2, n+1):break        if n%i == 0:break    		print(i)break;0;-1;54300;2017-11-30 22:48:46
686;1619387;7;def divisors(n):break    for i in range(1, n+1):break        if n%i == 0:break    		print(i)break;1;-1;64000;2017-11-30 22:48:55
687;1619387;18;def digit_sum(n):break    total = 0break    while n>0:break        total += n%10break        n //= 10break    return totalbreak;1;-1;66350;2017-11-30 22:50:35
688;1619387;20;def divisors_count(n):break    total = 0break    for i in range(1, n+1):break        if n%i == 0:break            total += 1break    return totalbreak;1;-1;57250;2017-11-30 22:51:36
689;1620634;3;def factorial(n):break    fact = 1break    for i in range(1, n + 1):break    	fact *= ibreak    return factbreak        break;1;-1;218950;2017-11-30 22:52:33
690;1620634;7;def divisors(n):break    for i in range(1, n + 1):break        if n % i == 0:break            print(i)break;1;-1;77200;2017-11-30 22:54:09
691;1619387;21;def powers(base, n):break    poww = 1break    for i in range(n):break        poww *= basebreak	print(poww)break;1;-1;260150;2017-11-30 22:56:00
692;1620634;18;def digit_sum(n):break    suma = 0break    while n > 0:break        suma += n % 10break        n = n//10break    return sumabreak;1;-1;282450;2017-11-30 22:59:01
693;1619387;22;def print_primes(n):break    count = 0break    p = 2break    while count < n:break        is_prime = Truebreak        for i in range(2, p):break            if p%i == 0:break                is_prime = Falsebreak                breakbreak        if is_;1;-1;188350;2017-11-30 22:59:14
694;1620634;20;def divisors_count(n):break    num = 0break    for i in range(1, n + 1):break        if n % i == 0:break            num += 1break    return numbreak;1;-1;175900;2017-11-30 23:02:07
695;1620634;21;def powers(base, n):break    for i in range(1, n + 1):break        print(base ** i)break;1;-1;58900;2017-11-30 23:03:09
696;1619387;23;def gcd(a, b):break    while a >= b:break        a -= bbreak    if a == 0:break        return bbreak    else:break        return gcd(b, a)break    breakdef greatest_common_divisor(a, b):break    a, b = max(a, b), min(a, b)break    return gcd(a, b)bre;1;-1;463450;2017-11-30 23:07:13
697;1619387;1;def numbers(n):break    for i in range(1, n):break    	print(i)break;0;-1;27850;2017-11-30 23:07:47
698;1619387;1;def numbers(n):break    for i in range(1, n+1):break    	print(i)break;1;-1;37750;2017-11-30 23:07:57
699;1619387;8;def square(n):break    for i in range(n):break        for j in range(n):break        	print("#", end=" ")break        print()break    print()break;1;-1;50100;2017-11-30 23:10:01
700;1618869;34;def multiples(n):break    k = 2break    for i in range(n+1):break        n = i*kbreak    print("Dvojnasobek", n)break;0;-1;274200;2017-11-30 23:10:03
701;1618869;34;def multiples(n):break    k = 2break    for i in range(n+1):break        n = i*kbreak    print("Dvojnasobek", n)break;0;-1;291450;2017-11-30 23:10:20
702;1620019;35;def sequences(n):break    for i in range(n):break        for j in range(1, i+2):break            print(j, end=" ")break        print()break;1;-1;129900;2017-11-30 23:10:38
703;1618869;34;def multiples(n):break    k = 2break    for i in range(n+1):break        n = i*kbreak    print("Dvojnasobek", n)break    for i in range(n+1):break        n = i*kbreak;0;-1;336650;2017-11-30 23:11:05
704;1618869;34;def multiples(n):break    k = 2break    for i in range(n+1):break        n = i*kbreak    print("Dvojnasobek", n)break    for i in range(n+1):break        n = (i*k) - 5break    print("Trojnasobek", n)break    for i in range(n+1):break        n = (i*k);0;-1;434050;2017-11-30 23:12:43
705;1618869;34;def multiples(n):break    k = 2break    for i in range(n+1):break        n = i*kbreak    print("Dvojnasobek", n)break    for i in range(n+1):break        i = n break    print("Trojnasobek", n)break    for i in range(n+1):break        i = nbreak    pr;0;-1;510100;2017-11-30 23:16:24
706;1619387;9;def empty_square(n):break    for i in range(n):break        for j in range(n):break            if 0 in {i, j} or n-1 in {i, j}:break        		print("#", end=" ")break            else:break            	print(".", end=" ")break        print()break    p;1;-1;231000;2017-11-30 23:17:00
707;1618869;34;def multiples(n):break    k = 2break    l = 3break    m = 10break    vysledek_1 = k*nbreak    vysledek_2 = l*nbreak	vysledek_3 = m*nbreak    print("Dvojnasobek", vysledek_1)break   break;0;-1;829900;2017-11-30 23:23:08
708;1620019;36;def products(n):break    for row in range(n):break        value = 1break        for col in range(n):break            value += rowbreak            print(value + col, end=" ")break        print()break;1;-1;793300;2017-11-30 23:24:14
709;1620019;37;def stars(n):break    for i in range(1, n+1):break        print("*", end="")break        if i % 5 == 0:break            print("|", end="")break    print()break;1;-1;160450;2017-11-30 23:26:53
710;1618869;33;def impose_fine(age, beer):break    nezletilej = 18break    if age < nezletilej:break        return Truebreak    else:break    	return Falsebreak;0;-1;116200;2017-11-30 23:30:02
711;1618869;33;def impose_fine(age, beer):break    nezletilej = 18break    if (age < nezletilej) and (beer):break        return Truebreak    else:break    	return Falsebreak;1;-1;185850;2017-11-30 23:31:12
712;1619387;10;def pyramid(n):break    for i in range(n):break        for j in range(n-i-1):break            print(" ", end=" ")break        for j in range(2*i+1):break        	print("#", end=" ")break        print()break;1;-1;614300;2017-11-30 23:34:22
713;1618869;32;def near_fifty(n):break    if (n > 40) and (n <= 50) or (n > 140) and (n <= 150):break        return Truebreak    else:break    	return Falsebreakbreak;0;-1;171200;2017-11-30 23:34:25
714;1618869;32;def near_fifty(n):break    if (n > 40) and (n <= 50) and (n < 60) or (n > 140) and (n <= 150):break        return Truebreak    else:break    	return Falsebreakbreak;0;-1;225500;2017-11-30 23:35:19
715;1618869;32;def near_fifty(n):break    if (n > 40) and (n < 60) or (n > 140) and (n <= 160):break        return Truebreak    else:break    	return Falsebreakbreak;0;-1;245050;2017-11-30 23:35:39
716;1618869;32;def near_fifty(n):break    if (n >= 40) and (n < 60) or (n > 140) and (n <= 160):break        return Truebreak    else:break    	return Falsebreakbreak;1;-1;251800;2017-11-30 23:35:46
717;1619387;11;def chessboard(n):break    for i in range(n):break        for j in range(n):break            if (i+j)%2 == 0:break        		print("#", end=" ")break            else:break                print(".", end=" ")break        print()break;1;-1;117050;2017-11-30 23:36:25
718;1620867;33;def impose_fine(age, beer):break    nezletily = 18break    if (age < nezletily) and beer:break        return Truebreak    else:break    	return Falsebreak;1;-1;38250;2017-11-30 23:40:36
719;1619387;12;def bigX(n):break    for i in range(2*n - 1):break        for j in range(2*n - 1):break            if i == j or i+j == 2*n - 2:break                print("#", end=" ")break            else:break                print(" ", end=" ")break        print()b;1;-1;145250;2017-11-30 23:41:54
720;1620867;32;def near_fifty(n):break    if (n >= 40) and (n < 60) or (n >140) and (n <= 160)break    	return Truebreak    else:break    	return Falsebreak;0;-1;107850;2017-11-30 23:42:39
721;1620867;32;def near_fifty(n):break    if (n >= 40) and (n <= 60) or (n >=140) and (n <= 160):break    	return Truebreak    else:break    	return Falsebreak;1;-1;123550;2017-11-30 23:42:54
722;1620019;38;def cross(n):    break    for i in range(3*n):break        for j in range(3*n):break            if (3*n) // 2 - n // 2 - 1 < i < (3*n) // 2 + n // 2 or (3*n) // 2 - n // 2 - 1 < j < (3*n) // 2 + n // 2:break                print("#", end="")break;0;-1;945800;2017-11-30 23:44:11
723;1620867;34;def multiples(n):break    dva = 2break    tri = 3break    deset = 10break    for i in range(n+1):break        n = i*dvabreak        o = i*tribreak        q = i*desetbreak    print("Dvojnasobek", n)break	print("Trojnasobek", o)break    print("Desetina;0;-1;115250;2017-11-30 23:44:52
724;1620867;34;def multiples(n):break    dva = 2break    tri = 3break    deset = 10break    for i in range(n+1):break        n = i*dvabreak        o = i*tribreak        q = i*desetbreak    print("Dvojnasobek", n)break	print("Trojnasobek", o)break    print("Desetina;0;-1;230200;2017-11-30 23:46:47
725;1619387;39;def queen(x, y):break    x, y = y-1, x-1break    for i in range(8):break        for j in range(8):break            if i == x and j == y:break                print("D", end="")break            elif i == x or j == y:break                print("*", end=;1;-1;316400;2017-11-30 23:47:46
726;1620867;34;def multiples(n):break    dva = 2break    tri = 3break    deset = 10break    for i in range(n+1):break        n = i*dvabreak        o = i*tribreak        q = i*desetbreak    print("Dvojnasobek", n)break    print("Trojnasobek", o)break    print("Deset;1;-1;277950;2017-11-30 23:49:05
727;1619387;4;def alphabet(n):break    i = 0break    while i < n:break        print(chr(65+i%26))break        i += 1break;1;-1;95000;2017-11-30 23:50:00
728;1619387;5;def duplication(text):break    res = ""break    for i in text:break        res += 2*ibreak    return resbreak;1;-1;40750;2017-11-30 23:50:46
729;1619387;13;def string_intersection(left, right):break    for i in range(min(len(left),len(right))):break        if left[i] == right[i]:break            print(left[i])break;1;-1;100600;2017-11-30 23:52:30
730;1619387;14;def palindrom(text):break    return text == text[::-1]break;1;-1;25150;2017-11-30 23:53:02
731;1619387;19;def zigzag(text):break    s1 = ""break    s2 = ""break    for i in range(len(text)):break        if i%2 == 0:break        	s1 += text[i]break        	s2 += "."break        else:break            s1 += "."break            s2 += text[i]break    print(s1;1;-1;85800;2017-11-30 23:59:11
732;1619387;25;def count_a(text):break    text = text.upper()break    res = 0break    for i in text:break        if i == "A":break            res += 1break    return resbreak;1;-1;75550;2017-12-01 00:00:30
733;1619387;26;def censorship(text):break    res = ""break    for i in range(len(text)):break        if i%2 == 1:break            res += "X"break        else:break            res += text[i]break    return resbreak;1;-1;60950;2017-12-01 00:02:00
734;1619387;27;def first_letters(text):break    print([i[0] for i in text.split()])break;0;-1;182650;2017-12-01 00:05:23
735;1619387;27;def first_letters(text):break    for i in text.split(): print(i[0], end="")break;0;-1;301200;2017-12-01 00:07:53
736;1619387;27;def first_letters(text):break    for i in text.split(): print(i[0], end=" ")break;1;-1;304300;2017-12-01 00:07:56
737;1619387;28;def string_zip(text1, text2):break    z = ""break    for i in range(max(len(text1), len(text2))):break        if i < len(text1):break            z += text1[i]break        if i < len(text2):break            z += text2[i]break    return zbreak;1;-1;291000;2017-12-01 00:12:50
738;1619387;6;def nonzero_product(numbers):break    product = 1break    for i in numbers:break        if i != 0:break            product *= ibreak    return productbreak;1;-1;50800;2017-12-01 00:14:07
739;1619387;15;def every_second_number(num_list):break    for i in range(len(num_list)):break        if i%2 == 0:break            print(num_list[i])break;1;-1;52400;2017-12-01 00:15:02
740;1619387;16;def max_pair_sum(num_list):break    maxi = 0break    for i in range(len(num_list) - 1):break        if num_list[i] + num_list[i+1] > maxi:break            maxi = num_list[i] + num_list[i+1]break    return maxibreak;1;-1;96250;2017-12-01 00:16:41
741;1619387;17;def five_multiples(num_list):break    return [i for i in num_list if i%5 == 0]break;1;-1;61450;2017-12-01 00:17:47
742;1619387;29;def unique(mylist):break    un = []break    for i in mylist:break        if not i in un:break            un.append(i)break    return unbreak;1;-1;70600;2017-12-01 00:19:11
743;1619387;30;def most_common(mylist):break    d = {}break    for i in mylist:break        if not i in d:break            d[i] = 1break        else:break            d[i] += 1break    tup = []break    for i in d:break        tup.append((i, d[i]))break    tup.sort(k;1;-1;296400;2017-12-01 00:24:11
744;1619387;31;def find_longest_word(words_list):break    maxl = 0break    maxw = ""break    for i in words_list:break        if len(i) > maxl:break            maxl = len(i)break            maxw = ibreak    return maxwbreak;1;-1;63250;2017-12-01 00:25:18
745;1620923;34;def multiples(n):    break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break    print("Desetinasobek", n*10)break;1;-1;64950;2017-12-01 00:33:42
746;1621369;34;def multiples(n):break    print("Dvojnasobek", n * 2)break    print("Trojnasobek", n * 3)break    print("Desetinasobek", n * 10)break;1;-1;100250;2017-12-01 08:16:02
747;1621369;32;def near_fifty(n):break    return (not(abs(n - 50) > 10)) or (not(abs(n - 150) > 10))break;1;-1;110700;2017-12-01 08:17:59
748;1621369;33;def impose_fine(age, beer):break    return (age < 18) and (beer)break;1;-1;59600;2017-12-01 08:19:12
749;1621369;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(j + 1, end=" ")break        print()break;1;-1;33450;2017-12-01 08:20:17
750;1621369;36;def products(n):break    for row in range(1, n + 1):break        for col in range(1, n + 1):break            print(row * col, end=" ")break        print()break;1;-1;31100;2017-12-01 08:20:54
751;1621369;37;def stars(n):break    for i in range(n):break        print("*", end="")break        if (i + 1) % 5 == 0:break            print("|", end="")break    print()break;1;-1;59450;2017-12-01 08:22:00
752;1621369;38;def cross(n):    break    for i in range(3*n):break        for j in range(3*n):break            if (i >= n and i < n * 2) or (j >= n and j < n * 2):break                print("#", end="")break            else:break                print(".", end="")br;1;-1;187300;2017-12-01 08:25:15
753;1621369;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(j + 1, end=" ")break        print()break;1;-1;30300;2017-12-01 08:25:50
754;1621369;36;def products(n):break    for row in range(1, n + 1):break        for col in range(1, n + 1):break            print(row * col, end=" ")break        print()break;1;-1;27150;2017-12-01 08:26:21
755;1621369;1;def numbers(n):break    for i in range(n):break    	print(i + 1)break;1;-1;23150;2017-12-01 08:26:57
756;1621369;2;def fibonacci(n):break    a = 0break    b = 1break    temp = 0break    print(1)break    for i in range(n):break        temp = a + bbreak        print(temp)break        a = bbreak        b = temp;0;-1;132050;2017-12-01 08:29:16
757;1621369;2;def fibonacci(n):break    a = 0break    b = 1break    temp = 0break    print(1)break    for i in range(n - 1):break        temp = a + bbreak        print(temp)break        a = bbreak        b = temp;1;-1;145650;2017-12-01 08:29:30
758;1621369;3;def factorial(n):break    y = 1break    for i in range(1, n + 1):break        y *= ibreak    return ybreak;1;-1;79250;2017-12-01 08:30:55
759;1621369;7;def divisors(n):break    for i in range(1, n + 1):break        if(n % i == 0):break            print(i)break;1;-1;91750;2017-12-01 08:32:32
760;1621369;18;def digit_sum(n):break    s = 0break    while n:break        s += n % 10break        n //= 10break    return s;1;-1;375200;2017-12-01 08:41:15
761;1619896;8;def square(n):break    for i in range(n):break        print("# " * n, end=" ")break        print()breakbreak;1;-1;67200;2017-12-01 09:09:24
762;1621668;23;import mathbreakbreakdef greatest_common_divisor(a, b):break    c=1break    lst=[]break    temp=1break    try:break        for asdf in range(a):break            if a/temp == math.ceil(a/temp):break                lst.append(temp)break            temp;0;-1;221850;2017-12-01 09:14:54
763;1621668;23;import mathbreakbreakdef greatest_common_divisor(a, b):break    c=1break    lst=[]break    temp=1break    try:break        for asdf in range(a):break            if a/temp == math.ceil(a/temp):break                lst.append(temp)break            temp;1;-1;342100;2017-12-01 09:16:55
764;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek", n*10);0;-1;169750;2017-12-01 09:20:37
765;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;331450;2017-12-01 09:23:19
766;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;332600;2017-12-01 09:23:20
767;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;333050;2017-12-01 09:23:21
768;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;333300;2017-12-01 09:23:21
769;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;333500;2017-12-01 09:23:21
770;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;333700;2017-12-01 09:23:21
771;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;333900;2017-12-01 09:23:22
772;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;334100;2017-12-01 09:23:22
773;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;334250;2017-12-01 09:23:22
774;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;334650;2017-12-01 09:23:22
775;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;334850;2017-12-01 09:23:23
776;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;335050;2017-12-01 09:23:23
777;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;334450;2017-12-01 09:23:23
778;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;336100;2017-12-01 09:23:24
779;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;336700;2017-12-01 09:23:24
780;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;337100;2017-12-01 09:23:25
781;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;337450;2017-12-01 09:23:25
782;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;337800;2017-12-01 09:23:25
783;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;338150;2017-12-01 09:23:26
784;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;338450;2017-12-01 09:23:26
785;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;338650;2017-12-01 09:23:26
786;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;338800;2017-12-01 09:23:26
787;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;339000;2017-12-01 09:23:27
788;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;339250;2017-12-01 09:23:27
789;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;339600;2017-12-01 09:23:27
790;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;340300;2017-12-01 09:23:28
791;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;340950;2017-12-01 09:23:29
792;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;341250;2017-12-01 09:23:29
793;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;341700;2017-12-01 09:23:29
794;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;342000;2017-12-01 09:23:30
795;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;342450;2017-12-01 09:23:30
796;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;342850;2017-12-01 09:23:31
797;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;343350;2017-12-01 09:23:31
798;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;344550;2017-12-01 09:23:32
799;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;345450;2017-12-01 09:23:33
800;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;346350;2017-12-01 09:23:34
801;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;347050;2017-12-01 09:23:35
802;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;347700;2017-12-01 09:23:35
803;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;348050;2017-12-01 09:23:36
804;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;348400;2017-12-01 09:23:36
805;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;349100;2017-12-01 09:23:37
806;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;349800;2017-12-01 09:23:37
807;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;350500;2017-12-01 09:23:38
808;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;350750;2017-12-01 09:23:38
809;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;351200;2017-12-01 09:23:39
810;1621668;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break	print("Desetinasobek" + str(n*10));0;-1;351900;2017-12-01 09:23:40
811;1621668;34;def multiples(n):break    print("Dvojnasobek 10")break    print("Trojnasobek 15")break	print("Desetinasobek 50");0;-1;479450;2017-12-01 09:25:47
812;1621667;34;def multiples(n):break    x = 2 * nbreak    print("Dvojnasobek", x)break    y = 3 * nbreak    print("Trojnasobek", y)break    z = 10 * nbreak    print("desetinasobek",z)break    break;0;-1;565650;2017-12-01 09:31:25
813;1621667;34;def multiples(n):break    x = 2 * nbreak    print("Dvojnasobek", x)break    y = 3 * nbreak    print("Trojnasobek", y)break    z = 10 * nbreak    print("Desetinasobek",z)break    break;1;-1;576050;2017-12-01 09:31:35
814;1621811;34;def multiples(n):break    print("Dvojnasobek", 2*n)break    print("Trojnasobek", 3*n)break    print("Desetinasobek", 10*n)break;1;-1;84700;2017-12-01 09:34:47
815;698073;33;def impose_fine(age, beer):break    return Falsebreak;0;-1;45000;2017-12-01 10:15:04
816;708366;33;def impose_fine(age, beer):break    return Falsebreak;0;-1;12850;2017-12-01 10:15:08
817;708366;33;def impose_fine(age, beer):break    return Falsebreak;0;-1;33300;2017-12-01 10:15:28
818;708366;33;def impose_fine(age, beer):break    return Falsebreakpilste pivi beer;0;-1;32950;2017-12-01 10:16:10
819;1618844;6;def nonzero_product(numbers):break    novy = []break    soucin = 1break    for n in numbers:break        if n != 0:break            novy.append(n)break    for m in range (0, len(novy)):break        soucin = novy[m] * soucinbreak    return soucinbreak;1;-1;1051000;2017-12-01 10:43:33
820;1618844;17;def five_multiples(num_list):break    novy = []break    for n in num_list:break        if n % 5 == 0:break            novy.append(n)break    return novybreak;1;-1;117300;2017-12-01 10:47:54
821;1618844;23;def greatest_common_divisor(a, b):break    novy = []break    mini = min(a, b)break    for n in range(1, mini+1):break		if a % n ==0 and b % n == 0:break        	novy.append(n)break  	print (novy[-1])break            break  break;0;-1;631100;2017-12-01 11:07:24
822;1622391;34;def multiples(n):break    print("Dvojnasobek " + str(n*2))break    print("Trojnasobek " + str(n*3))break    print("Desetinasobek " + str(n*10))break;1;-1;119150;2017-12-01 12:35:33
823;1622409;34;def multiples(n):break    print("Dvojnasobek", 2*n)break    print("Trojnasobek", 3*n)break    print("Desetinasobek", 10*n)break;1;-1;73100;2017-12-01 12:43:51
824;1622391;32;def near_fifty(n):break    if (n <= 60 and n >= 40):break    	return Truebreak    if  (n <= 160 and n >= 140):break        return Truebreak    else:break        return Falsebreak;1;-1;268050;2017-12-01 12:52:19
825;1622409;32;def near_fifty(n):break    if (n>=40 and n<=60):break        return Truebreak	break    elif (n>=140 and n<=160):break        return Truebreak	break    else:break        return Falsebreak;1;-1;259200;2017-12-01 12:54:06
826;1622409;33;def impose_fine(age, beer):break    if (age<18):break        if (beer==True):break            return Truebreak        else:break            return Falsebreak    else:break        return Falsebreak;1;-1;203850;2017-12-01 13:04:34
827;1622409;34;def multiples(n):break    print("Dvojnasobek", n*2)break	break    print("Trojnasobek", n*3)break    break    print("Desetinasobek", n*10);1;-1;101900;2017-12-01 13:06:19
828;1415962;34;def multiples(n):break    print("Dvojnasobek", n)break;0;-1;3550;2017-12-01 13:08:36
829;1415962;34;def multiples(n):break    x = 2 * nbreak    print("Dvojnasobek", x)break;0;-1;24800;2017-12-01 13:08:57
830;1622461;32;def near_fifty(n):break    if n<40 || n>160:break        return Falsebreak    return n<=60 || n>=140break;0;-1;102750;2017-12-01 13:13:55
831;1622461;32;def near_fifty(n):break    if n<40 || n>160:break        return Falsebreak    return n<=60 || n>=140break;0;-1;131050;2017-12-01 13:14:23
832;1622461;32;def near_fifty(n):break    if n<40 or n>160:break        return Falsebreak    return n<=60 or n>=140break;1;-1;163200;2017-12-01 13:14:56
833;1619896;9;def empty_square(n):break    for i in range(n):break        if i == 0 or i == (n - 1):break            print("# " * n)break        else:break            print("#", ". " * (n - 2), end="")break            print("#")breakbreak;1;-1;1143650;2017-12-01 13:25:33
834;1619896;10;def pyramid(n):break    for i in range(0, 2 * n, 2):break        print(" " * (2 * n - i - 2), end="")break        print("# " * (i + 1))break;1;-1;273300;2017-12-01 13:30:40
835;1619896;11;def chessboard(n):break    for i in range(n):break        if i % 2 == 0:break            for j in range(n // 2):break                print("#", ".", end=" ")break        else:break            for j in range(n // 2):break                print(".", "#";0;-1;99100;2017-12-01 13:36:24
836;1619896;11;def chessboard(n):break    for i in range(n):break        if i % 2 == 0 :break            for j in range(n):break                if j % 2 == 0:break                    print("#", end=" ")break                else:break                    print(".", e;1;-1;446750;2017-12-01 13:42:38
837;1620470;31;def find_longest_word(words_list):break    a = words_listbreak    res = a[0]break    for el in a[1:]:break        if len(el) > len(res):break            res = elbreak    return resbreak;1;-1;303250;2017-12-01 14:25:50
838;1620470;6;def nonzero_product(numbers):break    res = 1break    for num in numbers:break        if num != 0:break            res *= numbreak    return resbreak;1;-1;49000;2017-12-01 14:26:41
839;1620470;15;def every_second_number(num_list):break    for i in range(len(num_list)):break        if i % 2 == 0:break            print(num_list[i])break  break;1;-1;48900;2017-12-01 14:27:33
840;1620470;4;def alphabet(n):break    for i in range(n):break        a = i % 26break        print(chr(ord("A")+a))break;1;-1;78500;2017-12-01 14:29:05
841;1622607;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break    print("Desetinasobek", n*10);1;-1;86950;2017-12-01 14:29:45
842;1620867;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            i = j+1break            print(i, end=" ")break        print()break;1;-1;74350;2017-12-01 14:30:19
843;1620470;5;def duplication(text):break    if len(text) > 1:break    	return 2*text[0] + duplication(text[1:])break    return 2*textbreak break;1;-1;130650;2017-12-01 14:31:19
844;1622607;32;def near_fifty(n):break    if n < 40 or n > 60 or n < 140 or n > 160:break        return Falsebreak    else: return Truebreak;0;-1;142700;2017-12-01 14:32:12
845;1622607;32;def near_fifty(n):break    if (n < 40 and n > 60) and (n < 140 and n > 160):break        return Falsebreak    else: return Truebreak;0;-1;237150;2017-12-01 14:33:47
846;1622607;32;def near_fifty(n):break    if (n > 40 and n < 60) or (n > 140 and n < 160):break        return Truebreak    else: return Falsebreak;0;-1;478800;2017-12-01 14:37:49
847;1620867;36;def products(n):break    for row in range(n):break        row += 1break        for col in range(n):break            col = col * rowbreak            print(row + col, end=" ")break        print()break;1;-1;417900;2017-12-01 14:37:52
848;1622607;32;def near_fifty(n):break    if (n >= 40 and n <= 60) or (n >= 140 and n <= 160):break        return Truebreak    else: return Falsebreak;1;-1;495950;2017-12-01 14:38:07
849;1622607;33;def impose_fine(age, beer):break    if age < 18 and beer:break    	return Truebreak    else: return Falsebreak;1;-1;104200;2017-12-01 14:40:02
850;1622607;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(j+1, end=" ")break        print()break;1;-1;41900;2017-12-01 14:46:59
851;1622607;36;def products(n):break    for row in range(1, n+1):break        for col in range(1, n+1):break            print(row * col, end=" ")break        print()break;1;-1;88700;2017-12-01 14:48:33
852;1622607;37;def stars(n):break    for i in range(1, n+1):break        print("*", end="")break        if i % 5 == 0:break            print("|", end="")break    print()break;1;-1;152500;2017-12-01 14:51:08
853;1620867;1;def numbers(n):break    for i in range(1,n+1):break    	print(i)break;1;-1;54000;2017-12-01 15:09:26
854;1619896;12;def bigX(n):break    for i in range(2 * n - 1):break        for j in range(2 * n - 1):break            if i == j or i == (2 * n - j - 2):break                print("#", end=" ")break            else:break                print(" ", end=" ")break;1;-1;1333300;2017-12-01 15:45:00
855;1619896;39;def queen(x, y):break    for i in range(1, 9):break        for j in range(1, 9):break            if i == y and j == x:break                print("D", end="")break            else:break                if i == y or j == x or j - i == x - y or j + i ==;1;-1;770500;2017-12-01 15:59:11
856;1619357;1;def numbers(n):break    for i in range(1, n+1):break    	print(i)break;1;-1;21250;2017-12-01 17:04:23
857;1612998;32;def near_fifty(n):break    if n>=40 and n<=60:break        return Truebreak    elif n>=140 and n<=160:break        return Truebreak    else: break        return Falsebreakbreak;1;-1;667150;2017-12-01 17:25:30
858;1612998;33;def impose_fine(age, beer):break    if age>=18 and beer==True:break        return Falsebreak    elif age<18 and beer==True:break        return Truebreak    else:break        return Falsebreak;1;-1;281600;2017-12-01 17:31:18
859;1612998;34;def multiples(n):break    n+=nbreak    print("Dvojnasobek", n)break    n+=n/2break    print("Trojnasobek", int(n))break    n=10*(n/3)break    print("Desetinasobek",int(n))break;1;-1;301850;2017-12-01 17:36:24
860;1612998;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(j+1, end=" ")break        print()break;1;-1;259500;2017-12-01 17:41:13
861;1612998;36;def products(n):break    for i in range(n):break        for j in range(n):break            print((i+1) * (j+1), end=" ")break        print()break;1;-1;203750;2017-12-01 17:44:43
862;1612998;3;def factorial(n):break    if n==1: return 1break    return n * factorial(n-1)break        break;1;-1;187050;2017-12-01 18:44:31
863;1612998;1;def numbers(n):break    for i in range(n):break    	print(i+1," ")break;1;-1;199650;2017-12-01 18:47:55
864;1620019;34;def multiples(n):break    print("Dvojnasobek", n * 2)break    print("Trojnasobek", n * 3)break    print("Desetinasobek", n * 10)break    break;1;-1;82900;2017-12-01 19:58:12
865;1620019;32;def near_fifty(n):break    if (40 <= n <= 60) or (140 <= n <= 160):break        return Truebreak    return False;1;-1;202550;2017-12-01 20:01:40
866;1620019;33;def impose_fine(age, beer):break    if beer and age < 18:break        return Truebreak    return False;1;-1;56900;2017-12-01 20:02:44
867;1620019;1;def numbers(n):break    for i in range(1, n+1):break        print(i);1;-1;35100;2017-12-01 20:03:56
868;1620019;2;def fibonacci(n):break    a, b = 0, 1break    for i in range(n):break        a, b = b, a + bbreak        print(a)break;1;-1;316500;2017-12-01 20:10:25
869;1620019;3;def factorial(n):break    if n == 0:break        return 1break    else:break        return (n * factorial(n - 1));1;-1;281900;2017-12-01 20:23:58
870;1620019;7;def divisors(n):break    for i in range(1, (n // 2) + 1):break        if n % i == 0:break            print(i)break    print(n)break;1;-1;99900;2017-12-01 20:29:07
871;1620019;18;def digit_sum(n):break    summ = 0break    for i in range(len(str(n))):break        summ += (n % 10)break        n = n // 10break    return summbreak;1;-1;222000;2017-12-01 20:35:02
872;1620019;20;def divisors_count(n):break    summ = 0break    for i in range(1, (n // 2) + 1):break        if n % i == 0:break            summ += 1break    summ += 1break    return summbreak;1;-1;231450;2017-12-01 20:42:08
873;1620019;21;def powers(base, n):break    for i in range(1, n+1):break        print(base ** i)break;1;-1;56850;2017-12-01 20:43:09
874;1620019;22;def print_primes(n):break    x = 1break    while n > 0:break        rest = 0break        x += 1break        for i in range(2, x):break            if x % i == 0:break                rest += 1break        if rest == 0:break            print(x)break;1;-1;872700;2017-12-01 21:10:59
875;1620019;23;def greatest_common_divisor(a, b):break    while b != 0:break        c = a % bbreak        a = bbreak        b = cbreak    return abreak;1;-1;489400;2017-12-01 21:21:36
876;1620019;8;def square(n):break    for row in range(n):break        for col in range(n):break            print("#", end=" ")break        print()break;1;-1;59200;2017-12-01 21:26:23
877;1620019;9;def empty_square(n):break    print('# ' * n)break    for row in range(n - 2):break        print('#', end='')break        print(' .' * (n - 2), end='')break        print(' #')break    print('# ' * n)break           break;0;-1;230350;2017-12-01 21:30:18
878;1620019;9;def empty_square(n):break    if n == 1:break        print('#')break    else:break        print('# ' * n)break        for row in range(n - 2):break            print('#', end='')break            print(' .' * (n - 2), end='')break            print(' #');1;-1;266050;2017-12-01 21:30:55
879;1620019;10;def pyramid(n):break    row = 1break    for i in range(n):break        print(' ' * ((n * 2) - row), end='')break        print('# ' * row)break        row += 2break;1;-1;282150;2017-12-01 21:35:48
880;1620019;11;def chessboard(n):break    for i in range(n):break        if i % 2 == 0:break            for b in range(n // 2):break                print('# ', end='')break                print('. ', end='')break        else:break            for b in range(n // 2):;0;-1;238300;2017-12-01 21:40:05
881;1620019;11;def chessboard(n):break    for x in range(n):break        for y in range(n):break            cell = "# " if ((x + y) % 2 == 0) else '. 'break            print(cell, end='')break        print()break;1;-1;564700;2017-12-01 21:45:35
882;1620019;4;ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'breakbreakdef alphabet(n):break    order = 0break    for i in range(n):break        print(ALPHABET[order])break        order += 1break        if order == len(ALPHABET):break            order = 0break;1;-1;306250;2017-12-01 21:54:28
883;1620019;5;def duplication(text):break    new_string = ''break    for i in range(len(text)):break        new_string += 2 * text[i]break    return new_stringbreak;1;-1;99450;2017-12-01 22:06:03
884;1620019;13;def string_intersection(left, right):break    for i in range(min(len(left),len(right))):break        if left[i] == right[i]:break            print(left[i])break            break;1;-1;145650;2017-12-01 22:09:38
885;1620019;14;def palindrom(text):break    if text == text[::-1]:break       return Truebreak    return Falsebreak;1;-1;40150;2017-12-01 22:11:28
886;1525413;16;def max_pair_sum(num_list):break    maximum = 0break    for i in range(len(num_list)-1):break        this_number = num_list[i] + num_list[i+1]break        if maximum < this_number:break            maximum = this_numberbreak    return maximumbreak;1;-1;211550;2017-12-01 22:29:29
887;1525413;17;def five_multiples(num_list):break    new = []break    for i in range(len(num_list)):break        if num_list[i] % 5 == 0:break            new.append(num_list[i])break    return newbreak;1;-1;70300;2017-12-01 22:30:43
888;1525413;29;def unique(mylist):break    new = []break    for i in range(len(mylist)):break        for j in range(len(new)):break            if len(new) == 0:break                new.append(mylist[i])break            if mylist[i] != mylist[j]:break;0;-1;444800;2017-12-01 22:38:18
889;1525413;29;def unique(mylist):break    new = []break    for i in range(len(mylist)):break        if mylist[i] not in new:break            new.append(mylist[i])break    return newbreak;1;-1;550200;2017-12-01 22:40:05
890;1619117;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(j+1, end=" ")break        print()break;1;-1;196800;2017-12-02 00:38:40
891;1619117;1;def numbers(n):break    for i in range(1, n+1):break    	print(i)break;1;-1;71400;2017-12-02 00:40:45
892;1619117;37;def stars(n):break    for i in range(n):break        print("*", end="")break        if (i+1) % 5 == 0:break            print("|", end="")break    print()break;1;-1;280550;2017-12-02 00:58:18
893;1619117;8;def square(n):break	for i in range(n):break		for j in range(n):break			print("#", end=" ")break		print();1;-1;127900;2017-12-02 01:01:21
894;1624326;34;def multiples(n):break    print("Dvojnasobek", 2*n)break    print("Trojnasobek", 3*n)break    print("Desetinasobek", 10*n)break;1;-1;51900;2017-12-02 09:47:14
895;1624326;32;def near_fifty(n):break    return 39<n<61 or 139<n<161break;1;-1;66900;2017-12-02 09:48:26
896;1624326;33;def impose_fine(age, beer):break    return age<18 and beerbreak;1;-1;50850;2017-12-02 09:49:26
897;1624326;28;def string_zip(text1, text2):break    revers = 0break    result = ""break    if len(text1) > len(text2):break        text1,text2 = text2,text1break        revers = 1break    for index in range(len(text1)):break        if revers == 0:break        	res;1;-1;340350;2017-12-02 09:55:26
898;1624326;4;def alphabet(n):break    for i in range(n):break        j = i%26break        print(chr(j+65))breakbreak            break            break;1;-1;170900;2017-12-02 09:58:29
899;1624326;5;def duplication(text):break    result = ""break    for i in range(len(text)):break        result += text[i]*2break    return resultbreak;1;-1;56250;2017-12-02 09:59:35
900;1624326;13;def string_intersection(left, right):break    for i in range(min(len(left),len(right))):break        if left[i] == right[i]:break            print(left[i])break;1;-1;102600;2017-12-02 10:01:21
901;1618895;8;def square(n):break    for i in range(n):break        for j in range(n):break            print("#", end=" ")break        print();1;-1;135250;2017-12-02 10:01:36
902;1618895;9;def empty_square(n):break    for i in range(1, n+1):break        for j in range(1, n+1):break            if i == 1 or j == 1 or i == n or j == n:break                print("#", end=" ")break            else:break                print('.', end=' ')bre;1;-1;118200;2017-12-02 10:03:38
903;112792;33;def impose_fine(age, beer):break    return Falsebreak;0;-1;44300;2017-12-02 10:06:05
904;1624326;14;def palindrom(text):break    for i in range(len(text)//2):break        if text[i] != text[len(text)-i-1]:break            return Falsebreak    return Truebreak;1;-1;316650;2017-12-02 10:06:51
905;112792;33;def impose_fine(age, beer):break    return Falsebreak;0;-1;74900;2017-12-02 10:07:34
906;112792;33;def impose_fine(age, beer):break    return Falsebreakprint(impose_fine(20, True))breakprint(impose_fine(15, False))breakprint(impose_fine(17, True))breakprint(impose_fine(57, True));0;-1;119000;2017-12-02 10:09:39
907;1624326;31;def find_longest_word(words_list):break    return sorted(words_list,key=lambda x:-len(x))[0]breakbreak;1;-1;226050;2017-12-02 10:11:44
908;1618895;9;def empty_square(n):break    x = [1, n]break    for i in range(1, n+1):break        for j in range(1, n+1):break            if i in x or j in x:break                print("#", end=" ")break            else:break                print('.', end=' ')brea;1;-1;425850;2017-12-02 10:12:30
909;112792;34;def multiples(8):break    print("Dvojnasobek", 8)break;0;-1;25550;2017-12-02 10:14:25
910;1618895;10;def pyramid(n):break    for i in range(n):break        for j in range(-n+1, n):break            if abs(j) <= i:break                print("#", end=" ")break            else:break                print(' ', end=' ')break        print()break;1;-1;390650;2017-12-02 10:19:03
911;1618895;11;def chessboard(n):break    for i in range(n):break        for j in range(n):break            if (i+j) % 2 == 0:break                print("#", end=" ")break            else:break                print('.', end=' ')break        print();1;-1;143950;2017-12-02 10:21:30
912;1618895;12;def bigX(n):break    for i in range(1, 2*n):break        for j in range(1, 2*n):break            if i == j or i+j == 2*n:break                print('#', end=' ')break            else:break                print(' ', end=' ')break        print();1;-1;183200;2017-12-02 10:24:37
913;1618932;1;def numbers(n):break    for i in range(1, n+1):break    	print(i)break   break;1;-1;289500;2017-12-02 10:25:07
914;1618895;39;def queen(x, y):break    for i in range(1, 8+1):break        for j in range(1, 8+1):break            if i == y and j == x:break                print('D', end='')break            elif i == y or j == x or i+j == x+y or i-j == y-x:break                p;1;-1;599500;2017-12-02 10:37:20
915;1618932;3;def factorial(n):break    f = 1break    if n < 2:break    	return 1break    else:break        for i in range(1,n+1):break            f *= ibreak        return fbreak;1;-1;84950;2017-12-02 10:37:27
916;1618932;2;def fibonacci(n):break    f = [1, 1]break    for i in range(n-2):break        f.append(f[i]+f[i+1])break    for j in range(len(f)):break    	print(f[j])break;1;-1;125500;2017-12-02 10:39:37
917;1618932;7;def divisors(n):break    for i in range(1,n+1):break        if n % i == 0:break            print(i)break;1;-1;48900;2017-12-02 10:40:30
918;1618932;18;def digit_sum(n):break    dig = 0break    div = 0break    while n > 0:break        dig += n % 10break        n = n // 10break    return digbreak;1;-1;192000;2017-12-02 10:43:54
919;1618932;20;def divisors_count(n):break    dig = []break    for i in range(1,n+1):break        if n % i == 0:break            dig.append(i)break    return len(dig)break;1;-1;72050;2017-12-02 10:45:13
920;1618932;21;def powers(base, n):break    for i in range(n):break        print(base)break        base *= 2break;0;-1;58400;2017-12-02 10:46:16
921;1618932;21;def powers(base, n):break    power = 1break    for i in range(1,n+1):break        power = power * basebreak        print(power)break;1;-1;270550;2017-12-02 10:49:48
922;1619585;6;def nonzero_product(numbers):break    total_numbers = 1break    for i in range(len(numbers)):break        if numbers[i] != 0:break        	total_numbers *= numbers[i]break    return total_numbersbreak;1;-1;552000;2017-12-02 10:52:59
923;1618895;4;def alphabet(n):break    x = chr(ord('A')-1)break    for i in range(n):break        if x == 'Z':break            x = 'A'break        else:break            x = chr(ord(x)+1)break        print(x)break;1;-1;248500;2017-12-02 10:54:05
924;1619585;15;def every_second_number(num_list):break    for i in range(len(num_list)):break    	if i % 2 == 0:break    	    print(num_list[i])break;1;-1;305400;2017-12-02 10:58:10
925;1618932;22;def prime(n):break    count = 0break    for i in range(1, n+1):break        if n % i == 0:break            count += 1break    if count == 2:break        return Truebreak    else:break        return Falsebreak    breakdef print_primes(n):break    coun;1;-1;614350;2017-12-02 11:00:41
926;1619585;16;def max_pair_sum(num_list):break    max_sum = 0 break    for i in range(len(num_list)):break        if i == len(num_list)-1:break            breakbreak        recent_sum = num_list[i] + num_list[i+1]break        if recent_sum > max_sum:break;1;-1;179200;2017-12-02 11:01:18
927;1618932;23;def greatest_common_divisor(a, b):break    if b == 0:break    	return abreak    else:break        return greatest_common_divisor(b, a % b)break;1;-1;230000;2017-12-02 11:05:22
928;1618895;5;def duplication(text):break    for i in range(0, 2*len(text), 2):break        text = text[:i] + text[i] + text[i:]break    return textbreak;1;-1;530200;2017-12-02 11:05:45
929;1618932;1;def numbers(n):break    for i in range(1, n+1):break    	print(i)break;1;-1;28500;2017-12-02 11:06:39
930;1618895;13;def string_intersection(left, right):break    for i in range(min(len(left), len(right))):break        if left[i] == right[i]:break            print(left[i]);1;-1;129000;2017-12-02 11:07:58
931;1618932;28;def string_zip(text1, text2):break    if len(text1) < 1 or len(text2) < 1:break        return text1break    else:break    	return text1[0] + text2[0] + string_zip(text1[1:], text2[1:])break;0;-1;126400;2017-12-02 11:09:52
932;1618895;14;def palindrom(text):break    if text == text[::-1]:break        return Truebreak    return False;1;-1;94800;2017-12-02 11:10:37
933;1618932;28;def string_zip(text1, text2):break    if len(text1) < 1 or len(text2) < 1:break        return text2break    else:break    	return text1[0] + text2[0] + string_zip(text1[1:], text2[1:])break;0;-1;225950;2017-12-02 11:11:32
934;1618932;28;def string_zip(text1, text2):break    if len(text1) < 1 or len(text2) < 1:break        return text1break    else:break    	return text1[0] + text2[0] + string_zip(text1[1:], text2[1:])break;0;-1;324450;2017-12-02 11:13:10
935;1618932;28;def string_zip(text1, text2):break    if len(text1) < 1:break        return text2break    elif len(text2) < 1:break        return text1break    else:break    	return text1[0] + text2[0] + string_zip(text1[1:], text2[1:])break;1;-1;366500;2017-12-02 11:13:52
936;1618895;19;def zigzag(text):break    for i in range(len(text)):break        if i % 2 == 0:break            print(text[i], end='')break        else:break            print('.', end='')break    print()break    for i in range(len(text)):break        if i % 2 == 1:b;1;-1;239400;2017-12-02 11:14:43
937;1618895;25;def count_a(text):break    return text.lower().count('a')break;1;-1;211950;2017-12-02 11:18:21
938;1618932;4;def alphabet(n):break    j = -1break    for i in range(n):break        if ord('A')+i < 91:break        	print(chr(ord('A')+i))break        else:break            j += 1break            print(chr(ord('A')+i-i+j));0;-1;301950;2017-12-02 11:19:27
939;1619585;17;def five_multiples(num_list):break    new_list = []break    for i in range(len(num_list)):break        if num_list[i] % 5 == 0:break            new_list.append(num_list[i])break    return new_listbreak;1;-1;574700;2017-12-02 11:33:35
940;1619585;29;def unique(mylist):break    mylist_new = []break    for i in range(len(mylist)):break    	if mylist[i] not in mylist_new:break        	mylist_new.append(mylist[i])break        break    return mylist_newbreak;1;-1;219450;2017-12-02 11:38:30
941;1569071;9;def empty_square(n):break    for line in range(n):break        for col in range(n):break            if line == 0 or line == n - 1:break                print('#', end=' ')break            elif col == 0 or col == n - 1:break                print('#', e;1;-1;321000;2017-12-02 11:46:44
942;1618895;26;def censorship(text):break    new = ''break    for i in range(len(text)):break        if i % 2 == 1:break            new += 'X'break        else:break            new += text[i]break    return newbreak;1;-1;333800;2017-12-02 13:58:49
943;1618895;27;def first_letters(text):break    text = text.split()break    for word in text:break        print(word[0], end=' ')break    print()break;1;-1;339350;2017-12-02 14:20:55
944;1620587;34;def multiples(n):break    n=2*nbreak    print("Dvojnasobek", n)break;0;-1;9000;2017-12-02 14:59:01
945;1620587;34;def multiples(n):break    n=2*nbreak    print("Dvojnasobek", n)break;0;-1;331400;2017-12-02 15:04:23
946;1620587;34;def multiples(n):break    n=2*nbreak    print("Dvojnasobek", n)break;0;-1;337000;2017-12-02 15:04:29
947;1623006;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break    print("Desetinasobek", n*10);1;-1;218650;2017-12-02 15:08:41
948;1623006;32;def near_fifty(n):break    return (abs(50 - n) <= 10 or abs(150-n) <= 10)break;1;-1;117100;2017-12-02 15:10:47
949;1618258;5;def duplication(text):break    dupl=""break    for i in text:break    	dupl+=i*2break    return duplbreak;1;-1;76600;2017-12-02 15:12:51
950;1623006;33;def impose_fine(age, beer):break    return (age<18 and beer)break;1;-1;144200;2017-12-02 15:13:27
951;1623006;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(j+1, end=" ")break        print()break;1;-1;12750;2017-12-02 15:14:14
952;1618258;4;def alphabet(n):break    for i in range(n):break        print(chr(ord('A')+i%26))break;1;-1;105200;2017-12-02 15:14:43
953;1623006;36;def products(n):break    for row in range(n):break        for col in range(n):break            print((row+1) * (col+1), end=" ")break        print()break;1;-1;46950;2017-12-02 15:15:04
954;1623006;37;def stars(n):break    for i in range(n):break        print("*", end="")break        if i%5 == 4:break            print("|", end="")break    print()break;1;-1;47300;2017-12-02 15:15:53
955;1618258;13;def string_intersection(left, right):break    for i in range(min(len(left), len(right))):break        if left[i]==right[i]:break            print(left[i])breakbreak;1;-1;143300;2017-12-02 15:17:12
956;1623006;38;def cross(n):    break    for i in range(3*n):break        for j in range(3*n):break            if n<=i<(2*n) or n<=j<(2*n):break                print("#", end="")break            else:break                print(".", end="")break        print()break;1;-1;95950;2017-12-02 15:17:32
957;1623006;1;def numbers(n):break    for i in range(n):break    	print(i+1)break;1;-1;43650;2017-12-02 15:18:22
958;1623006;3;def factorial(n):break    if n < 1:break        return 1break    return n*factorial(n-1)break;1;-1;69350;2017-12-02 15:20:35
959;1620587;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break    print("Desetinasobek", n*10)break;1;-1;104100;2017-12-02 15:24:52
960;1620587;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(j+1, end=" ")break        print()break;1;-1;93800;2017-12-02 15:33:39
961;1620587;36;def products(n):break    for row in range(1, n+1):break        for col in range(1, n+1):break            print(row * col,end=" ")break        print()break;1;-1;179600;2017-12-02 15:36:42
962;1620587;37;def stars(n):break    for i in range(1,n+1):break        print("*", end="")break        if i == 5:break            print("|", end="")break    print()break;0;-1;238400;2017-12-02 15:40:45
963;1622997;34;def multiples(n):break    n*=2break    print("Dvojnasobek", n)break;0;-1;23350;2017-12-02 15:41:47
964;1618895;28;def string_zip(a, b):break    if len(a) < len(b):break        a, b = b, abreak    if len(a) == 0 or len(b) == 0:break        return a + bbreak    else:break        return a[0] + b[0] + string_zip(a[1:], b[1:])break;0;-1;2090550;2017-12-02 15:43:13
965;1618895;28;def string_zip(a, b):break    '''break    if len(a) < len(b):break        a, b = b, abreak    '''break    if len(a) == 0 or len(b) == 0:break        return a + bbreak    else:break        return a[0] + b[0] + string_zip(a[1:], b[1:])break;1;-1;2148600;2017-12-02 15:44:11
966;1622997;34;def multiples(n):break    print("Dvojnasobek", n*2)break	print("Trojnásobek", n*3)break    print("Desetinásobek", n*10);0;-1;41500;2017-12-02 15:46:46
967;1618895;6;def nonzero_product(numbers):break    product = 1break    for number in numbers:break        if number != 0:break            product *= numberbreak    return productbreak;1;-1;342900;2017-12-02 15:50:58
968;1622997;32;def near_fifty(n):break    break    if n>= 40 and n<=60 or n>=140 and n<= 160:break        return Truebreak    return Falsebreak;1;-1;226600;2017-12-02 15:52:43
969;1618895;15;def every_second_number(num_list):break    for i in range(len(num_list)):break        if i % 2 == 0:break            print(num_list[i])break;1;-1;105350;2017-12-02 15:52:46
970;1618895;16;def max_pair_sum(num_list):break    max_sum = num_list[0] + num_list[1]break    for i in range(len(num_list) - 1):break        if num_list[i] + num_list[i+1] > max_sum:break            max_sum = num_list[i] + num_list[i+1]break    return max_sumbreak;1;-1;239150;2017-12-02 15:56:48
971;1625200;34;def multiples(n):break    print("Dvojnasobek", 2*n)break    print("Trojnasobek", 3*n)break    print("desetinasobek", 10*n)break;0;-1;68350;2017-12-02 15:58:40
972;1625200;34;def multiples(n):break    print("Dvojnasobek", 2*n)break    print("Trojnasobek", 3*n)break    print("Desetinasobek", 10*n)break;1;-1;87850;2017-12-02 15:58:59
973;1618895;17;def five_multiples(num_list):break    new = []break    for number in num_list:break        if number % 5 == 0:break            new.append(number)break    return new;1;-1;149800;2017-12-02 15:59:21
974;1622997;33;def impose_fine(age, beer):break    if age<18 and beer == True:break        return Truebreak    return Falsebreak;1;-1;68350;2017-12-02 15:59:41
975;1625193;6;def nonzero_product(numbers):break    summ = 1break    for number in numbers:break        if number != 0:break            summ = summ * numberbreak    return summbreak;1;-1;253100;2017-12-02 15:59:58
976;1625193;15;def every_second_number(num_list):break    for i in range(len(num_list)):break        if i % 2 == 0:break            print(num_list[i])break;1;-1;119000;2017-12-02 16:02:03
977;1625200;32;def near_fifty(n):break    if (40 <= n <= 60):break        return Truebreak    elif (140 <= n <= 160):break    	return Truebreak    else:break        return Falsebreak;1;-1;179800;2017-12-02 16:02:03
978;1622997;34;def multiples(n):break    numb = 0break    numb = n*2break    print("Dvojnasobek", numb)break    numb = n*3break    print("Trojnasobek",numb)break    numb = n*10break    print("Desetinasobek",numb);1;-1;239400;2017-12-02 16:03:56
979;1625200;33;def impose_fine(age, beer):break    if age < 18 and beer == True:break    	return Truebreak    else:break        return Falsebreak;1;-1;120100;2017-12-02 16:04:07
980;1625193;16;def max_pair_sum(num_list):break    max_pair = num_list[0] + num_list[1]break    for i in range(1,len(num_list)-1):break        if num_list[i] + num_list[i+1] > max_pair:break            max_pair = num_list[i] + num_list[i+1]break    return max_pairb;1;-1;181200;2017-12-02 16:05:08
981;1618895;29;def unique(mylist):break    new = []break    for number in mylist:break        if number not in new:break            new.append(number)break    return newbreak;1;-1;395800;2017-12-02 16:06:00
982;1625215;35;def sequences(n):break    for i in range(1, n+1):break        for j in range(1,i+1):break            print(j, end=" ")break        print()break;1;-1;111800;2017-12-02 16:07:19
983;1625215;36;def products(n):break    for row in range(1, n + 1):break        for col in range(1, n + 1):break            print(row * col, end=" ")break        print()break;1;-1;49500;2017-12-02 16:08:15
984;1625193;17;def five_multiples(num_list):break    divisible = []break    for number in num_list:break        if number % 5 == 0:break            divisible.append(number)break    return divisiblebreak            break;1;-1;189600;2017-12-02 16:08:22
985;1625215;37;def stars(n):break    for i in range(1, n+1):break        print("*", end="")break        if i % 5 == 0:break            print("|", end="")break    print()break;1;-1;75800;2017-12-02 16:09:35
986;1625193;29;def unique(mylist):break    x = []break    for number in mylist:break        if number not in x:break            x.append(number)break    return xbreak;1;-1;85150;2017-12-02 16:09:50
987;1622997;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(j+1, end=" ")break        print()break;1;-1;105700;2017-12-02 16:12:45
988;1618895;30;def most_common(mylist):break    most = {}break    for number in sorted(mylist):break        most[number] = most.get(number, 0) + 1break    for number, times in most.items():break        if times == max(most.values()):break            return numberbr;1;-1;409500;2017-12-02 16:12:53
989;1625215;38;def cross(n):    break    for i in range(3*n):break        for j in range(3*n):break            if i >= n and i <2*n or j >= n and j <2*n :break                print("#", end="")break            else:break                print(".", end="")break;1;-1;290900;2017-12-02 16:14:34
990;1622997;36;def products(n):break    for row in range(1,n+1):break        for col in range(1,n+1):break            print(row * col, end=" ")break        print()break;1;-1;153950;2017-12-02 16:15:29
991;1618895;31;def find_longest_word(words_list):break    longest = ''break    for word in words_list:break        if len(word) > len(longest):break            longest = wordbreak    return longestbreak;1;-1;151450;2017-12-02 16:15:42
992;1625215;34;def multiples(n):break    print("Dvojnasobek", 2*n)break    print("Trojnasobek", 3*n)break    print("Desetinasobek", 10*n)break;1;-1;59550;2017-12-02 16:16:12
993;1625215;32;def near_fifty(n):break    if n >= 40 and n <= 60 or n >= 140 and n <= 160:break        return Truebreak    else: break        return Falsebreak;1;-1;160100;2017-12-02 16:19:01
994;1625215;33;def impose_fine(age, beer):break    if age < 18 and beer is True:break        return Truebreak    else:break        return Falsebreak;1;-1;97700;2017-12-02 16:20:43
995;1625193;30;def most_common(mylist):break    common = {}break    z = []break    for number in mylist:break        common[number] = common.get(number, 0) + 1break    maximum = max(common.values())break    for number in common:break        if common[number] == max;1;-1;800500;2017-12-02 16:24:47
996;1622997;1;def numbers(n):break    for i in range(1, n+1):break    	print(i)break;1;-1;32400;2017-12-02 16:30:12
997;1625193;31;def find_longest_word(words_list):break    x = len(words_list[0])break    z = words_list[0]break    for i in range(len(words_list)):break        if len(words_list[i]) > x:break            x = len(words_list[i])break            z = words_list[i]break;1;-1;108400;2017-12-02 16:31:47
998;1625193;4;def alphabet(n):break    z = 0break    for _ in range(n):break        print(chr(ord('A') + z))break        z += 1break        if z == 26:break            z = 0break        break;1;-1;278950;2017-12-02 16:38:01
999;1625193;5;def duplication(text):break    result = ""break    for letter in text:break        result += letter + letterbreak    return resultbreak;1;-1;55550;2017-12-02 16:39:00
1000;1625193;13;def string_intersection(left, right):break    if len(left) < len(right):break        shorter = leftbreak    else:break        shorter = rightbreak    for i in range(len(shorter)):break        if left[i] == right[i]:break            print(right[i])bre;1;-1;182800;2017-12-02 16:42:06
1001;1622997;7;def divisors(n):break    for i in range(1, n+1):break        if n%i == 0:break            print(i)break;1;-1;48050;2017-12-02 16:46:00
1002;1620587;1;def numbers(n):break    x=0break    for i in range(n):break        x+=1break	print(x)break;1;-1;96200;2017-12-02 17:01:54
1003;1620587;2;def fibonacci(n):break    a=0break    b=0break    c=1break    for i in range(n):break        print(c)break        a=bbreak        b=cbreak        c=a+bbreak    break;1;-1;82700;2017-12-02 17:03:21
1004;1625193;14;def palindrom(text, z = 0):break    if len(text) < 2:break        return Truebreak    else:break        if text[z] == text[len(text) - 1]:break            z += 1break            palindrom(text[z:len(text) - 1], z)break        else:break            re;0;-1;504150;2017-12-02 17:06:52
1005;1622997;2;def fibonacci(n):break    preview=0break    current=1break    for i in range(1,n+1):break        nextt=current+previewbreak        print(current)break        preview=currentbreak        current=nexttbreak;1;-1;15050;2017-12-02 17:08:26
1006;1620587;3;def factorial(n):break    x=1break    for i in range(n):break        x*=nbreak        n-=1break    return xbreak;1;-1;232700;2017-12-02 17:08:36
1007;1618932;5;def duplication(text):break    text2 = ""break    for i in range(len(text)):break        text2 += text[i] + text[i]break    return text2break;1;-1;585450;2017-12-02 17:15:06
1008;1622997;8;def square(n):break    for i in range(1,n+1):break        	print(n*" #")break    print()break;1;-1;181600;2017-12-02 17:17:04
1009;1620587;33;def impose_fine(age, beer):break    if age<18 and beer == True:break        return Truebreak    else:break    	return Falsebreak;1;-1;37000;2017-12-02 17:17:55
1010;1620587;32;def near_fifty(n):break    if n-50<=10 or 50-n<=10:break    	return Truebreak    else:break        return Falsebreak;0;-1;148900;2017-12-02 17:20:28
1011;1625193;14;def palindrom(text):break    if len(text) < 2:break        return Truebreak    else:break        if text[0] == text[len(text) - 1]:break            palindrom(text[1:-1])break            return Truebreak        else:break            return Falsebreak;0;-1;1220900;2017-12-02 17:20:43
1012;1620587;32;def near_fifty(n):break    if n-150<=10:break    	return Truebreak    else:break        return Falsebreak;0;-1;236550;2017-12-02 17:21:56
1013;1625193;14;def palindrom(text):break    if len(text) < 2:break        return Truebreak    else:break        if text[0] == text[len(text) - 1]:break            return palindrom(text[1:-1])break        else:break            return False;1;-1;8750;2017-12-02 17:22:38
1014;1620470;34;def multiples(n):break    print("Dvojnasobek", 2*n)break;0;-1;25500;2017-12-02 17:24:31
1015;1625193;19;def zigzag(text):break    for i in range(len(text)):break        if i % 2 == 0:break        	print(text[i], end="")break        else:break            print(".", end="")break    print()break    for i in range(len(text)):break        if i % 2 == 0:brea;1;-1;212700;2017-12-02 17:26:46
1016;1622997;9;def empty_square(n):break    print(n*"# ")break    for i in range(2,4+1):break        print("#",3*"."," #")break    print(n*"# ")	break;0;-1;210600;2017-12-02 17:27:30
1017;1625193;25;def count_a(text):break    a_counter = 0break    text = text.lower()break    for letter in text:break        if letter == "a":break            a_counter += 1break    return a_counterbreak;1;-1;80300;2017-12-02 17:28:09
1018;1618932;13;def string_intersection(left, right):break    if len(left) < 1 or len(right) < 1:break        return leftbreak    else:break        i = -1break        i += 1break        if left[i] == right[i]:break            print(left[i])break        return string;1;-1;762050;2017-12-02 17:30:03
1019;1620587;7;def divisors(n):break    x=1break    for i in range(n):break        if n % x==0:break    		print(x)break        x+=1break;1;-1;93600;2017-12-02 17:30:52
1020;1620587;18;def digit_sum(n):break    x=0break    while n>0:break        x+=n%10break        n//=10break    return xbreak;1;-1;112600;2017-12-02 17:32:50
1021;1625193;25;def count_a(text, counter = 0):break    text = text.lower()break    if len(text) == 0:break        return counterbreak    else:break        if text[0] == "a":break            counter += 1break        return count_a(text[1:], counter)break    break;1;-1;4300;2017-12-02 17:33:54
1022;1618932;14;def palindrom(text):break    if len(text) < 1:break        return Truebreak    else:break        if text[0] == text[-1]:break        	return palindrom(text[1:-1])break    return Falsebreak    	break;1;-1;163650;2017-12-02 17:35:00
1023;1625193;26;def censorship(text):break    result = ""break    for i in range(len(text)):break        if i % 2 == 1:break            result += "X"break        else:break            result += text[i]break    return resultbreak            break;1;-1;89650;2017-12-02 17:35:27
1024;1622997;6;def nonzero_product(numbers):break    numb=1break    for i in range(len(numbers)):break        if numbers[i] != 0:break            numb= numb*numbers[i]break    return numbbreak;1;-1;191700;2017-12-02 17:38:38
1025;1625193;26;def censorship(text, result = "", z=0):break    if len(text) == 0:break    	return resultbreak    else:break        if z % 2 == 0:break            z += 1break            result += text[0]break            return censorship(text[1:], result, z)break;1;-1;5500;2017-12-02 17:42:27
1026;1625193;27;def first_letters(text):break    a = text.split()break    for word in a:break        print(word[0], end=" ")break    print()break    break;1;-1;105300;2017-12-02 17:44:28
1027;1618932;25;def count_a(text):break    count = 0break    for i in range(len(text)):break        if text[i] == "a" or text[i] == "A":break            count += 1break    return countbreak;1;-1;335900;2017-12-02 17:45:14
1028;1618890;34;def multiples(n):break    print("Dvojnasobek {}\nTrojnasobek {}\nDesetinasobek {}".format(break        n*2, n*3, n*10))break;1;-1;229350;2017-12-02 17:45:54
1029;1618890;32;def near_fifty(n):break    if n in range(40,61) or n in range(140,161):break        return Truebreak    return False;1;-1;51850;2017-12-02 17:47:00
1030;1618890;33;def impose_fine(age, beer):break    if age < 18 and beer is True:break        return Truebreak    return Falsebreak;1;-1;60250;2017-12-02 17:48:17
1031;1618890;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(j+1, end=" ")break        print()break;1;-1;83000;2017-12-02 17:50:23
1032;1618932;26;def censorship(text):break    text1 = list(text)break    for i in range(len(text)):break        if i % 2 == 1:break            text1[i] = "X"break        print(text1[i], end="")break;0;-1;328450;2017-12-02 17:51:31
1033;1618890;36;def products(n):break    for row in range(1, n+1):break        for col in range(1, n+1):break            print(row * col, end=" ")break        print()break;1;-1;68000;2017-12-02 17:51:35
1034;1625200;35;def sequences(n):break    for i in range(n):break        e = 1break        for j in range(i+1):break            print(e, end=" ")break            e += 1break        print()break;1;-1;190350;2017-12-02 17:52:10
1035;1620881;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break    print("Desetinasobek", n*10)break;1;-1;49000;2017-12-02 17:52:13
1036;1618890;37;def stars(n):break    for i in range(n):break        print("*", end="")break        if (i+1) % 5 == 0:break            print("|", end="")break    print()break;1;-1;46900;2017-12-02 17:52:28
1037;1622997;16;def max_pair_sum(num_list):break    maxim = 0break    numb = 0break    for i in range(1,len(num_list)+1):break        numb = num_list[i]+num_list[i+1]break        if numb>maxim:break            maxim=numbbreak	return maxim;0;-1;281250;2017-12-02 17:52:59
1038;1618932;26;def censorship(text):break    if len(text) < 1:break        return textbreak    else:break        break        return text[0] + "X" + censorship(text[2:])break;0;-1;537000;2017-12-02 17:54:59
1039;1620881;32;def near_fifty(n):break    if n in range(40, 61):break        return Truebreak    elif n in range(140, 161):break        return Truebreak    else:break        return Falsebreak;1;-1;179800;2017-12-02 17:55:18
1040;1618932;26;def censorship(text):break    if len(text) < 2:break        return textbreak    else:break        break        return text[0] + "X" + censorship(text[2:])break;1;-1;559250;2017-12-02 17:55:21
1041;1620881;33;def impose_fine(age, beer):break    if age < 18 and beer == True:break        return Truebreak    return Falsebreak;1;-1;74650;2017-12-02 17:56:46
1042;1625200;36;def products(n):break    for row in range(n):break        for col in range(n):break            e = row +1break            x = [1, 2, 3, 4, 5, 6, 7, 8]break            print(e*x[col], end=" ")break        print()break;0;-1;287850;2017-12-02 17:57:01
1043;1625200;36;def products(n):break    for row in range(n):break        for col in range(n):break            e = row +1break            x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]break            print(e*x[col], end=" ")break        print()break;1;-1;311100;2017-12-02 17:57:25
1044;1618890;38;def cross(n):    break    for i in range(3*n):break        for j in range(3*n):break            if i in range(n, 2*n) or j in range(n, 2*n):break                print("#", end="")break            else:break                print(".", end="")break;1;-1;308100;2017-12-02 17:57:44
1045;1618890;1;def numbers(n):break    for i in range(1, n+1):break    	print(i);1;-1;48300;2017-12-02 17:59:09
1046;1618890;2;def fibonacci(n):break    a = 1break    b = 1break    for i in range(n):break        print(a)break        tmp = bbreak        b = a + bbreak        a = tmp;1;-1;148500;2017-12-02 18:01:42
1047;1618890;3;def factorial(n):break    if n < 2:break        return 1break    return n * factorial(n-1);1;-1;39500;2017-12-02 18:02:28
1048;1618890;7;def divisors(n):break    for i in range(1, n + 1):break        if n % i == 0:break            print(i);1;-1;36800;2017-12-02 18:03:10
1049;1618932;27;def first_letters(text):break    print(text[0], end=" ")break    for i in range(len(text)):break        if text[i] == " " and text[i+1] != " ":break            print(text[i+1], end=" ")break    print()break break;1;-1;356500;2017-12-02 18:03:15
1050;1618890;18;def digit_sum(n):break    summa = 0break    while n > 0:break        summa += n % 10break        n //= 10break    return summa;1;-1;43000;2017-12-02 18:04:36
1051;1618890;20;def divisors_count(n):break    divsum = 0break    for i in range(1, n+1):break        if n % i == 0:break            divsum += 1break    return divsum;1;-1;30200;2017-12-02 18:04:56
1052;1618890;21;def powers(base, n):break    for i in range(1, n+1):break        print(base**i);1;-1;36900;2017-12-02 18:05:12
1053;1625382;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break    print("Desetinasobek", n*10)break;1;-1;30600;2017-12-02 18:05:32
1054;1622997;16;def max_pair_sum(num_list):break    maxim = 0break    numb = 0break    for i in range(len(num_list)):break        numb = num_list[i] + num_list[i+1]break        if numb>maxim:break            maxim=numbbreak    return maxim;0;-1;1001600;2017-12-02 18:05:41
1055;1625382;32;def near_fifty(n):break    if (40 <= n <= 60):break    	return Truebreak    elif (140 <= n <= 160):break        return Truebreak    else: break        return Falsebreak;1;-1;54500;2017-12-02 18:06:44
1056;1618890;22;def print_primes(n):break    primes = 0break    cnum = 2break    while primes < n:break        isprime = Truebreak        for i in range(2, cnum):break            if cnum % i == 0:break                isprime = Falsebreak        if isprime == True:br;1;-1;112200;2017-12-02 18:07:17
1057;1618890;23;def greatest_common_divisor(a, b):break    if a == 0 or b == 0:break        return a+bbreak    return greatest_common_divisor(min(a,b), max(a,b) % min(a,b));1;-1;60500;2017-12-02 18:08:27
1058;1625382;33;def impose_fine(age, beer):break    if (age < 18) and (beer == True):break    	return Truebreak	else:break		return True;0;-1;155600;2017-12-02 18:09:31
1059;1618890;8;def square(n):break    for i in range(n):break        for j in range(n):break        	print("#", end=" ")break        print()break    print()break;1;-1;29850;2017-12-02 18:10:24
1060;1625382;33;def impose_fine(age, beer):break    if age < 18 and beer == True:break    	return Falsebreak;0;-1;330300;2017-12-02 18:12:26
1061;1625382;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(j+1, end=" ")break        print()break;1;-1;38500;2017-12-02 18:13:23
1062;1618890;9;def empty_square(n):break    for i in range(n):break        for j in range(n):break            if i == 0 or i == n-1 or j == 0 or j == n-1:break        		print("#", end=" ")break            else:break                print(".", end=" ")break        pr;1;-1;67500;2017-12-02 18:13:35
1063;1625382;36;def products(n):break    e = list(range(1,n+1))break    for row in range(n):break        for col in range(n):break            print((row + 1)*e[col], end=" ")break        print()break;1;-1;58200;2017-12-02 18:14:26
1064;1625382;33;def impose_fine(age, beer):break    if age < 18 and beer == True:break    	return Truebreak    else:break        return Falsebreak;1;-1;64950;2017-12-02 18:15:39
1065;1625193;27;def first_letters(text):break    if len(text) == 0:break    	returnbreak    a = text.split()break    if len(text) > 0:break        print(a[0][0], end=" ")break        break        sign = text[0]break        while sign != " ":break            text = t;1;-1;80750;2017-12-02 18:16:27
1066;1625394;4;def alphabet(n):break    for i in range(n):break        print(chr(65+(i%26)));1;-1;138100;2017-12-02 18:17:51
1067;1625382;37;def stars(n):break    for i in range(1, n+1):break        print("*", end="")break        if i == 5 or i == 10 or i == 15:break            print("|", end="")break    print()break;0;-1;160650;2017-12-02 18:18:27
1068;1625382;37;def stars(n):break    for i in range(1, n+1):break        print("*", end="")break        if i == 5 or i == 10 or i == 15 or i == 20 or i == 25:break            print("|", end="")break    print()break;0;-1;180300;2017-12-02 18:18:46
1069;1625394;5;def duplication(text):break    if len(text) == 1:break        return text*2break    return text[0]*2 + duplication(text[1:]);1;-1;51100;2017-12-02 18:18:47
1070;1625382;37;def stars(n):break    for i in range(1, n+1):break        print("*", end="")break        if i == 5 or i == 10 or i == 15 or i == 20 or i == 25:break            print("|", end="")break    print()break;0;-1;185450;2017-12-02 18:18:52
1071;1625382;37;def stars(n):break    for i in range(1, n+1):break        print("*", end="")break        e = list(range(0, n+1, 5))break        if i in e:break            print("|", end="")break    print()break;1;-1;256700;2017-12-02 18:20:03
1072;1622997;17;def five_multiples(num_list):break    numb=[]break    for i in range(len(num_list)):break        if num_list[i]%5==0:break            numb.append(num_list[i])break    return numbbreak;1;-1;196400;2017-12-02 18:20:35
1073;1625382;1;def numbers(n):break    for i in range (1, n+1):break    	print(i)break;1;-1;48000;2017-12-02 18:22:55
1074;1625382;2;def fibonacci(n):break    last = 0break    act = 1break    f = 0break    for i in range (n):break        print (act)break        f = actbreak        act += lastbreak        last = f;1;-1;84600;2017-12-02 18:24:48
1075;1625382;3;def factorial(n):break    e = 1break    for i in range (1, n+1):break        e *= ibreak    return ebreak;1;-1;114350;2017-12-02 18:27:17
1076;1625382;7;def divisors(n):break    res = [1]break    for i in range (2, n+1):break        tmp = n % ibreak        if tmp == 0:break            if i in res:break                passbreak            else:break                res.append(i)break    for i in range(;1;-1;132750;2017-12-02 18:30:00
1077;1625382;18;def digit_sum(n):break    return sum(list(map(int, str(n))))break;1;-1;20450;2017-12-02 18:31:32
1078;1625382;20;def divisors_count(n):break    res = [1]break    for i in range (2, n+1):break        tmp = n % ibreak        if tmp == 0:break            if i in res:break                passbreak            else:break                res.append(i)break    return le;1;-1;38500;2017-12-02 18:32:32
1079;1625382;21;def powers(base, n):break    for i in range (1, n+1):break        print(base**i)breakbreak;1;-1;67900;2017-12-02 18:33:53
1080;1625382;8;def square(n):break    for _ in range(n):break        for i in range(n):break            print("#", end=" ")break        print()break;1;-1;33400;2017-12-02 18:35:54
1081;1619133;8;def square(n):break    for i in range(n):break        for j in range(n):break        	print("#", end=" ")break        print()    break    break;1;-1;63450;2017-12-02 18:36:17
1082;1625382;9;def empty_square(n):break    for j in range (n):break    	for i in range(n):break        	if (j==0 or i==0 or i == n or j == n):break            	print("#", end=" ")break            else:break                print(".", end=" ")break    	print()	break;0;-1;358150;2017-12-02 18:41:55
1083;1525413;8;def square(n):break    for i in range(n):break        for j in range(n):break        	print("#", end=" ")break        print()break;1;-1;50600;2017-12-02 18:48:09
1084;1525413;9;def empty_square(n):break    for i in range(n):break        for j in range(n):break            if i == 0 or j == 0 or j == n-1 or i == n-1:        break        		print("#", end=" ")break            else:break                print(".", end=" ")break;1;-1;168700;2017-12-02 18:51:05
1085;1625382;4;def alphabet(n):break    for i in range(65, 65+n):break        if i > 90:break            i -= 26break        print(chr(i))break;0;-1;148850;2017-12-02 18:51:23
1086;1625382;4;def alphabet(n):break    abc = [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z]break    for i in range(n):break        print(abc[i])break;0;-1;359000;2017-12-02 18:55:48
1087;1622997;14;def palindrom(text):break    palindrom=text[::-1]break    if text==palindrom:break    	return Truebreak    else:break        return False;1;-1;273050;2017-12-02 19:02:20
1088;1622997;25;def count_a(text):break    poc=0break    for i in range(len(text)):break        if text[i] == "A" or text[i] == "a":break            poc+=1break    return pocbreak;1;-1;71450;2017-12-02 19:15:58
1089;1622997;28;def string_zip(text1, text2):break    for i in range(len(text1)):break        for j in range(len(text2)):break    		return text1[i]+text2[j]break    break;0;-1;422900;2017-12-02 19:29:44
1090;1622997;28;def string_zip(text1, text2):break    text=zip(text1,text2)break    return textbreak;0;-1;28700;2017-12-02 19:32:02
1091;1618932;19;def zigzag(text):break    for i in range(len(text)):break        if i % 2 == 0:break            print(text[i], end="")break        else:break            print(".", end="")break    print()break    for j in range(len(text)):break        if j % 2 == 1:b;1;-1;262800;2017-12-02 20:16:59
1092;1618932;6;def nonzero_product(numbers):break    product = 1break    for number in numbers:break        if number != 0:break            product *= numberbreak    return productbreak;1;-1;150350;2017-12-02 20:21:41
1093;1618932;15;def every_second_number(num_list):break    for number in range(len(num_list)):break        if number % 2 == 0:break    		print(num_list[number])break;1;-1;56350;2017-12-02 20:22:59
1094;1618932;16;def max_pair_sum(num_list):break    max_sum = 0break    for i in range(len(num_list)-1):break        if num_list[i] + num_list[i+1] > max_sum:break            max_sum = num_list[i] + num_list[i+1]break    return max_sumbreak;1;-1;155200;2017-12-02 20:26:03
1095;1618932;29;def unique(mylist):break    return list(set(mylist))break;0;-1;49600;2017-12-02 20:27:20
1096;1618932;29;def unique(mylist):break    a_list = []break    for i in mylist:break        if i not in a_list:break            a_list.append(i)break    return a_listbreak;1;-1;139800;2017-12-02 20:28:50
1097;1612998;7;def divisors(n):break    for i in range (1,n+1):break        if n%i == 0 :break            print(i)break;1;-1;809900;2017-12-02 20:34:14
1098;1612998;20;def divisors_count(n):break    count = 0break    for i in range (1,n+1):break        if n%i==0:break            count+=1break    print(count)break;0;-1;244300;2017-12-02 20:38:48
1099;1618932;30;def most_common(mylist):break    common_dict = {}break    for number in mylist:break        if number not in common_dict.keys():break        	common_dict[number] = 1break        else:break            common_dict[number] += 1break    return max(common;0;-1;112100;2017-12-02 20:54:06
1100;1618932;30;def most_common(mylist):break    common_dict = {}break    for number in mylist:break        if number not in common_dict.keys():break        	common_dict[number] = 1break        else:break            common_dict[number] += 1break    a = max(common_di;1;-1;201150;2017-12-02 20:55:35
1101;1618932;17;def five_multiples(num_list):break    five_list = []break    for number in num_list:break        if number % 5 == 0:break            five_list.append(number)break    return five_listbreak;1;-1;57300;2017-12-02 20:58:09
1102;1618932;31;def find_longest_word(words_list):break    longest_word = ""break    for word in words_list:break        if len(word) > len(longest_word):break            longest_word = wordbreak    return longest_wordbreak;1;-1;62450;2017-12-02 20:59:40
1103;1618932;8;def square(n):break    for i in range(n):break        for j in range(n):break        	print("#", end=" ")break        print()break;1;-1;33300;2017-12-02 21:00:53
1104;1618932;9;def empty_square(n):break    for i in range(n):break        for j in range(n):break            if i == 0 or i == n-1 or j == 0 or j == n-1:break        		print("#", end=" ")break            else:break                print(".", end=" ")break        pr;1;-1;156500;2017-12-02 21:03:34
1105;1619054;14;def palindrom(text):break    for i in range(len(text)//2):break        if text[i]!=text[-1*(i+1)]:break            return Falsebreak    return Truebreak;1;-1;136900;2017-12-02 21:06:27
1106;1618932;11;def chessboard(n):break    a = 1break    for i in range(n):break        if i % 2 == 0:break            a = 0break        else:break            a = 1break        for j in range(n):break            if j % 2 == a:break        		print("#", end=" ")break;1;-1;206850;2017-12-02 21:08:08
1107;1619054;4;def alphabet(n):break    number = 65break    for i in range(n):break        print(chr(number))break        if i == 25 : break            number = 65break        else: break            number += 1break;0;-1;252650;2017-12-02 21:10:49
1108;1625193;28;def string_zip(text1, text2):break    result = ""break    if len(text1) > len(text2):break        longer = text1break        shorter = text2break    else:break        longer = text2break        shorter = text1break    for i in range(len(shorter)):bre;1;-1;203050;2017-12-02 21:16:30
1109;1625193;28;def string_zip(text1, text2, result = ""):break    if len(text1) > len(text2):break        longer = text1break        shorter = text2break    else:break        longer = text2break        shorter = text1break        break    if len(shorter) == 0:break;1;-1;4750;2017-12-02 21:26:27
1110;1625193;8;def square(n):break    for i in range(n):break        for j in range(n):break        	print("#", end=" ")break        print()break;1;-1;57500;2017-12-02 21:29:32
1111;1625193;9;def empty_square(n):break    for i in range(n):break        for j in range(n):break            if j==1 or j==n or i==1 or i == n:break                print(".", end=" ")break            else:break        		print("#", end=" ")break    print()	break;0;-1;172800;2017-12-02 21:32:28
1112;1625193;9;def empty_square(n):break    for i in range(n):break        for j in range(n):break            if j==0 or j==n-1 or i==0 or i == n-1:break                print("#", end=" ")break            else:break                print(".", end=" ")break        pr;1;-1;427250;2017-12-02 21:36:43
1113;1619935;17;def five_multiples(num_list):break    other_list = []break    for i in range(len(num_list)):break        if num_list[i] % 5 == 0:break            other_list.append(num_list[i])  break    return other_listbreak;1;-1;474550;2017-12-02 21:38:27
1114;1619935;6;def nonzero_product(numbers):break    count = 1break    for i in range(len(numbers)):break        if numbers[i] != 0:break            count *= numbers[i]break        else:break            passbreak    return countbreak;1;-1;128100;2017-12-02 21:41:21
1115;1625717;34;def multiples(n):break    for i in range(1,11):break	print("Dvojnasobek", n * i)break;0;-1;449850;2017-12-02 21:42:21
1116;1625717;32;def near_fifty(n):break    if n > 60 or n < 40 or n > 160 or n < 140:break    	return Falsebreak;0;-1;196850;2017-12-02 21:47:15
1117;1619935;15;def every_second_number(num_list):break    for i in range(len(num_list)):break        if i % 2 == 0:break            print (num_list[i])break        break;1;-1;330850;2017-12-02 21:51:44
1118;1625768;34;def multiples(n):break    print("Dvojnasobek", 2*n)break    print("Trojnasobek", 3*n)break    print("Desetinasobek", 10*n)break;1;-1;151850;2017-12-02 21:57:58
1119;1625193;10;def pyramid(n):break    for i in range(1, n+1):break        for j in range(i,n):break            print(" ", end=" ")break        for k in range(1,i*2):break            print("#", end=" ")break        print()break    break    break;1;-1;1416550;2017-12-02 22:06:49
1120;1625193;3;def factorial(n):break    if n == 1:break        return 1break    else:break        return n * factorial(n-1)break;1;-1;54050;2017-12-02 22:08:26
1121;1619935;16;def max_pair_sum(num_list):break    count = 0break    for i in range(len(num_list) - 1):break    	if num_list[i] + num_list[i + 1] > count:break        	count = num_list[i] + num_list[i + 1]break    return countbreak;1;-1;1195600;2017-12-02 22:11:46
1122;1625193;1;def numbers(n, i=1):break    if n == 0:break    	returnbreak    else:break        print(i)break        i += 1break        return numbers(n-1, i)break;1;-1;253000;2017-12-02 22:12:43
1123;1625963;8;def square(n):break    for i in range(n):break        print("# "*5, end="\n")break    print()break;0;-1;91350;2017-12-03 01:41:16
1124;1625963;8;def square(n):break    for i in range(n):break        print("# "*n, end="\n")break    print()break;1;-1;119950;2017-12-03 01:41:45
1125;1625963;9;def empty_square(n):break    for i in range(n):break        if i == n - 1 or i == 0:break        	print("# " * 5)break        else:break            print("# . . . #")break    print()	break;0;-1;154350;2017-12-03 01:44:25
1126;1625963;9;def empty_square(n):break    for i in range(n):break        if i == n - 1 or i == 0:break        	print("# " * n)break        else:break            print("# " + ". " * (n - 2) + "#")break    print()	break;1;-1;215150;2017-12-03 01:45:26
1127;1619929;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break    print("Desetinasobek", n*10)break;1;-1;74600;2017-12-03 02:13:52
1128;1619929;32;def near_fifty(n):break    if n in range(40,61) or n in range (140,161):break        return Truebreak    return Falsebreak;1;-1;86550;2017-12-03 02:15:22
1129;1619929;33;def impose_fine(age, beer):break    if age < 18 and beer:break        return Truebreak    return Falsebreak;1;-1;36550;2017-12-03 02:16:01
1130;1625215;1;def numbers(n):break    for i in range(1, n+1):break    	print(i)break;1;-1;48450;2017-12-03 09:02:45
1131;1625215;2;def fibonacci(n):break    a = 1break    b = 1break    print(a)break    print(b)break    for i in range(n - 2):break        c = a + bbreak        print(c)break        a = bbreak        b = cbreak        break;1;-1;281900;2017-12-03 09:08:06
1132;1625215;3;def factorial(n):break    a = 1break    for i in range(1, n + 1):break        a = a * ibreak	return a;0;-1;192550;2017-12-03 09:11:23
1133;1625215;3;def factorial(n):break    a = 1break    for i in range(1, n + 1):break        a = a * ibreak	break    return a;1;-1;348200;2017-12-03 09:13:58
1134;1625215;7;def divisors(n):break    for i in range(1, n + 1):break        if n % i == 0:break            print(i)break;1;-1;50250;2017-12-03 09:14:54
1135;1625215;18;def digit_sum(n):break    a = 0break    for i in range(len(str(n))):break        b = n % 10break        a += bbreak        n = (n - b) // 10break     break    return abreak;1;-1;234850;2017-12-03 09:58:14
1136;1625215;20;def divisors_count(n):break    count = 0break    for i in range(1, n + 1):break        if n % i == 0:break            count += 1break    break    return countbreak;1;-1;80950;2017-12-03 09:59:53
1137;1625215;21;def powers(base, n):break    for i in range(1, n + 1):break        print(base ** i)break    break;1;-1;89350;2017-12-03 10:01:26
1138;1625215;22;def print_primes(n):break    j = 2break    k = 0break    while k !=  n:break        i = j-1break        while j % i != 0:break                i -= 1break        if i == 1:break            print(j)break            k += 1break        j += 1break;1;-1;1668600;2017-12-03 10:33:12
1139;1625215;23;def greatest_common_divisor(a, b):break    if a > b:break        n = bbreak        for i in range(b):break            if a % n == 0 and b % n == 0:break                return nbreak            else: break                n -= 1break    if a < b:break;1;-1;566100;2017-12-03 10:45:01
1140;1625215;8;def square(n):break    for i in range(n):break        for j in range(n):break            print("#", end=" ")break        print()break;1;-1;37800;2017-12-03 10:46:27
1141;1626854;32;def near_fifty(n):break    if n > 139 and n < 161:break        return Truebreak    elif n > 39 and n < 61:break        return Truebreak    return Falsebreak;1;-1;38900;2017-12-03 10:49:35
1142;1626854;33;def impose_fine(age, beer):break    if beer is True and age<18:break        return Truebreak    return Falsebreak;1;-1;35650;2017-12-03 10:50:34
1143;1626854;36;def products(n):break    for row in range(1,n+1):break        for col in range(1,n+1):break            print(row * col, end=" ")break        print()break;1;-1;58250;2017-12-03 10:51:56
1144;1625215;9;def empty_square(n):break    for i in range(n):break        print("#", end=" ")break    print()break    for j in range(n - 2):break        print("#", end =" ")break        for k in range(n - 2):break            print(".", end=" ")break        print(";0;-1;470050;2017-12-03 10:58:43
1145;1626854;6;def nonzero_product(numbers):break    product = 1break    for i in range(len(numbers)):break        if numbers[i] != 0:break            product *= numbers[i]break    return productbreak;1;-1;58150;2017-12-03 10:58:56
1146;1625215;9;def empty_square(n):break    if n == 1:break        print("#")break        returnbreak    for i in range(n):break        print("#", end=" ")break    print()break    for j in range(n - 2):break        print("#", end =" ")break        for k in range(n;1;-1;520000;2017-12-03 10:59:33
1147;1619935;29;def unique(mylist):break    newlist = []break    for i in range(len(mylist)):break        for j in range (len(mylist)):break    		if newlist[i] != mylist[j]:break        		newlist.append(mylist[j])break    return newlistbreak;0;-1;2258800;2017-12-03 11:03:51
1148;1625215;10;def pyramid(n):break    for i in range(n):break        print((n - i)  * "  ", end=" ")break        print((2 * i + 1) * " #")break    	break;1;-1;401250;2017-12-03 11:06:24
1149;1625215;11;def chessboard(n):break    for j in range(n//2):break        for i in range(n // 2):break            print("#", end=" ")break            print(".", end=" ")break        print()break        for i in range(n // 2):break            print(".", end=" ")br;0;-1;185200;2017-12-03 11:09:35
1150;1620881;35;def sequences(n):break    for i in range(1, n+1):break        for j in range(1, i+1):break            print(j, end=" ")break        print()break;1;-1;200150;2017-12-03 11:23:52
1151;1620881;36;def products(n):break    for row in range(1, n+1):break        for col in range(1, n+1):break            print(row * col, end=" ")break        print()break;1;-1;94650;2017-12-03 11:25:32
1152;1620881;37;def stars(n):break    for i in range(1, n+1):break        print("*", end="")break        if i % 5 == 0:break            print("|", end="")break    print()break;1;-1;64700;2017-12-03 11:26:40
1153;1625215;11;def chessboard(n):break    if n % 2 == 0:break        for j in range(n//2):break            for i in range(n//2):break                print("#", end=" ")break                print(".", end=" ")break            print()break            for k in range(n;1;-1;1140400;2017-12-03 11:27:57
1154;1627172;17;def five_multiples(num_list):break    multiples = []break    for five in num_list:break        if five % 5 == 0:break            multiples.append(five)break    return multiplesbreak;1;-1;65100;2017-12-03 11:30:37
1155;1620881;38;def cross(n):    break    for i in range(3*n):break        for j in range(3*n):break            if 2*n > i >= n or 2*n > j >= n:break                print("#", end="")break            else:break                print(".", end="")break        print()br;1;-1;803850;2017-12-03 11:40:33
1156;1620881;1;def numbers(n):break    for i in range(1, n+1):break    	print(i)break;1;-1;41700;2017-12-03 11:41:36
1157;1620881;2;def fibonacci(n):break    a, b = 1, 1break    for i in range(n):break        print(a)break        a, b = b, a + bbreak;1;-1;345150;2017-12-03 11:48:21
1158;1625215;12;def bigX(n):break    r = 3 * nbreak    i = 0break    while i < n - 1:break        print(2*i * " ", end="")break        print("#", (r - (3 * i + 3 + i)) * " ", " #", end="")break        print()break        i += 1break    print( i* "  ", end="")break;0;-1;1220500;2017-12-03 11:48:31
1159;1625215;12;def bigX(n):break    r = 3 * nbreak    i = 0break    while i < n - 1:break        print(2*i * " ", end="")break        print("#", (r - (3 * i + 3 + i)) * " ", " #", end="")break        print()break        i += 1break    print( i* "  ", end="")break;0;-1;1236200;2017-12-03 11:48:47
1160;1620881;3;def factorial(n):break    a = 1break    for i in range(1, n+1):break        a *= ibreak    return a;1;-1;165900;2017-12-03 11:51:11
1161;1620881;7;def divisors(n):break    for i in range(1, n+1):break        if n % i == 0:break            print(i)break;1;-1;72000;2017-12-03 11:52:43
1162;1620881;18;def digit_sum(n):break    dsum = 0break    while n > 0:break        dsum += n % 10break        n //= 10break    return dsum;1;-1;319850;2017-12-03 11:59:29
1163;1618932;4;def alphabet(n):break    j = 26break    for i in range(n):break        if i > 25:break            j -= 1break            print(chr(ord('A')-j))break        else:break            j = 1break            print(chr(ord('A')+i));0;-1;197500;2017-12-03 12:00:27
1164;1620881;20;def divisors_count(n):break    count = 0break    for i in range(1, n+1):break        if n % i == 0:break            count += 1break    return countbreak;1;-1;61250;2017-12-03 12:01:08
1165;1620881;21;def powers(base, n):break    for i in range(1, n+1):break        print(base ** i)break;1;-1;47600;2017-12-03 12:02:57
1166;1620881;22;def divisors_count(n):break    """return the count of divisors of n"""break    count = 0break    for i in range(1, n+1):break        if n % i == 0:break            count += 1break    return countbreakbreakdef print_primes(n):break    i = 1break    co;1;-1;213600;2017-12-03 12:14:54
1167;1620881;23;def greatest_common_divisor(a, b):break    while b != 0:break        a, b = b, a % bbreak    return abreak;1;-1;247650;2017-12-03 12:21:34
1168;1625215;12;def bigX(n):break    r = 3break    if n % 2 == 0:break        m = 1break    else:break        m = 2break    for i in range(n - 1):break        print((2 * i) * " ", end=" ")break        print("#",end=" ")break        print(((3 * n) -(4 * i) - m) *" ",;0;-1;3039800;2017-12-03 12:28:03
1169;1620881;8;def square(n):break    for j in range(n):break        for i in range(n):break            print("#", end=" ")break        print()break;1;-1;11250;2017-12-03 12:28:51
1170;1625215;12;def bigX(n):break    r = 3break    if n % 2 == 0:break        m = 1break    else:break        m = 2break    for i in range(n - 1):break        print((2 * i) * " ", end=" ")break        print("#",end=" ")break        print(((3 * n) -(4 * i)) *" ", end;0;-1;3390300;2017-12-03 12:34:30
1171;1625215;12;def bigX(n):break    r = 3break    if n % 2 == 0:break        m = 1break    elif n == 7:break        m = 0 break    else:break        m = 2break    for i in range(n - 1):break        print((2 * i) * " ", end=" ")break        print("#",end=" ")break;0;-1;3490150;2017-12-03 12:36:10
1172;1620881;9;def empty_square(n):break    for j in range(n):break        for i in range(n):break            if j == 0 or j == n-1:break                print("#", end=" ")break            else:break                if i == 0 or i == n-1:break                    pri;1;-1;600800;2017-12-03 12:39:03
1173;1620881;10;def pyramid(n):break    for i in range(1, n+1):break        print((n-i)*"  ", i*"# ", (i-1)*"# ", (n-i)*"  ", sep="")break    print()	break;1;-1;201900;2017-12-03 12:43:54
1174;1627361;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break    print("Desetinasobek", n*10)break;1;-1;82000;2017-12-03 13:04:13
1175;1620587;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break    print("Desetinasobek", n*10)break;1;-1;28850;2017-12-03 13:05:58
1176;1620587;33;def impose_fine(age, beer):break    if age < 18 and beer == True:break        return Truebreak    else:break    	return Falsebreak;1;-1;39250;2017-12-03 13:06:49
1177;1627361;32;def near_fifty(n):break    if n >= 40 and n <=60:break    	return Truebreak    if n >= 140 and n <= 160:break        return Truebreak    else:break        return Falsebreak;1;-1;259850;2017-12-03 13:08:42
1178;1620587;35;def sequences(n):break    for i in range(1,n+1):break        for j in range(i):break            print(j+1, end=" ")break        print()break;1;-1;106950;2017-12-03 13:09:13
1179;1627361;33;def impose_fine(age, beer):break    if age < 18 and beer==True:break        return Truebreak    else:break        return Falsebreak;1;-1;69000;2017-12-03 13:10:02
1180;1625215;4;def alphabet(n):break    for i in range(n):break        a = (ord("A") + i)break        if a <= ord("Z"):break        	print(chr(a))break        else:break            print(chr(a - 26))break        break;0;-1;325700;2017-12-03 13:10:38
1181;1627361;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(j+1, end=" ")break        print()break;1;-1;88900;2017-12-03 13:12:07
1182;1627361;36;def products(n):break    for row in range(n):break        for col in range(n):break            print((row+1) * (col+1), end=" ")break        print()break;1;-1;351350;2017-12-03 13:18:05
1183;1627361;37;def stars(n):break    for i in range(n):break        print("*", end="")break        if (i+1)%5==0:break            print("|", end="")break    print()break;1;-1;68750;2017-12-03 13:19:20
1184;1620881;11;def chessboard(n):break    for row in range(n):break        for col in range(n):break            if (row%2 == 0 and col%2 == 0) or (row%2 == 1 and col%2 == 1):break                print("#", end=" ")break            else:break                print(".;1;-1;2300800;2017-12-03 13:23:02
1185;1627361;38;def cross(n):    break    for i in range(3*n):break        for j in range(3*n):break            if ((j>n-1) and (j<2*n)) or ((i>n-1) and (i<2*n)):break                print("#", end="")break            else:break                print(".", end="")brea;1;-1;622250;2017-12-03 13:29:47
1186;1627361;1;def numbers(n):break    for i in range(n):break    	print(i+1)break        break;1;-1;39750;2017-12-03 13:31:03
1187;1620881;12;def bigX(n):break    """Print a big X with arm size of n"""break    for j in range(2*n - 1): # for rowsbreak        for i in range(2*n - 1): # for pointsbreak            if (i == j) or (2*n-2-i == j): # if x=y or x is y spaces from endbreak;1;-1;464300;2017-12-03 13:32:10
1188;1627361;2;def fibonacci(n):break    fibo=[]break    for i in range(n):break        if i<=1:break            fibo.append(1)break        else:break            fibo.append(fibo[i-1]+fibo[i-2])break        print(fibo[i])break;1;-1;354450;2017-12-03 13:38:16
1189;1627361;3;def factorial(n):break    fact=1break    for i in range(1,n+1):break        fact= fact*ibreak    return factbreak;1;-1;103150;2017-12-03 13:40:04
1190;1627361;7;def divisors(n):break    for i in range(1,n+1):break        if n%i==0:break            print(i)break;1;-1;72950;2017-12-03 13:41:20
1191;1627361;18;def digit_sum(n):break    digit=0break    summ=0break    while n > 0:break        digit = n%10break        n=n//10break        summ += digitbreak    return summbreak        break;1;-1;283400;2017-12-03 13:46:10
1192;1627361;20;def divisors_count(n):break    cnt=0break    for i in range(1,n+1):break        if n%i==0:break            cnt+=1break    return cntbreak;1;-1;196600;2017-12-03 13:49:31
1193;1620881;39;def queen(x, y):break    n = 8 # side sizebreak    for j in range(1, n+1): # for rowsbreak        for i in range(1, n+1): # for pointsbreak            if (i, j) == (x, y):break                print("D", end="")break            elif i == x or j == y o;0;-1;1087550;2017-12-03 13:50:44
1194;1627361;21;def powers(base, n):break    base1=1break    for i in range(n):break        base1=base1*basebreak        print(base1)break;1;-1;131350;2017-12-03 13:51:46
1195;1379275;8;def square(n):break    for i in range(n):break        print("#", end=" ")break    print()breakr-p;0;-1;22850;2017-12-03 14:02:00
1196;1379275;8;def square(n):break    for i in range(n):break        print("#", end=" ")break    print()break-p;0;-1;33100;2017-12-03 14:02:10
1197;1379275;8;def square(n):break    for i in range(n):break        print("#", end=" ")break    print()break;0;-1;37500;2017-12-03 14:02:15
1198;1379275;8;def square(n):break    for i in range(n):break        print("#", end=" ")break    print(n)break;0;-1;60500;2017-12-03 14:02:38
1199;1625215;5;def duplication(text):break    a = " "break    for intem in text:break        a+= 2 *intembreak    break    return abreak;1;-1;137500;2017-12-03 14:14:22
1200;1620881;39;def queen(x, y, size=8):break    """on chessboard of "size", show what's endangered by a queen at [x, y]"""break    size = 8 # side sizebreak    for j in range(1, size+1): # for rowsbreak        for i in range(1, size+1): # for pointsbreak;1;-1;2761050;2017-12-03 14:20:17
1201;1620881;4;def alphabet(n):break    for i in range(n):break        print(chr(ord("A")+i%26))break;1;-1;132600;2017-12-03 14:22:46
1202;1627631;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break    print("Desetinasobek", n*10)break;1;-1;35150;2017-12-03 14:24:27
1203;1623006;6;def nonzero_product(numbers):break    result = 1break    for number in numbers:break        if number != 0:break            result *= numberbreak    return resultbreak;1;-1;82250;2017-12-03 14:25:36
1204;1627631;32;def near_fifty(n):break    if n >= 40 and n <= 60:break        return Truebreak    elif: n>=140 and n<=160:break            return Truebreak        else:break    		return Falsebreak;0;-1;83000;2017-12-03 14:25:52
1205;1627631;32;def near_fifty(n):break    if n >= 40 and n <= 60:break        return Truebreak    elif n>=140 and n<=160:break            return Truebreak        else:break    		return Falsebreak;0;-1;89950;2017-12-03 14:25:59
1206;1625215;13;def string_intersection(left, right):break    if len(left) <= len(right):break        for i in range(len(left)):break            if left[i] == right[i]:break        	    print(left[i])break    else:break        for j in range(len(right)):break;1;-1;627050;2017-12-03 14:26:03
1207;1627631;32;def near_fifty(n):break    if n >= 40 and n <= 60:break        return Truebreak    elif n>=140 and n<=160:break            return Truebreak    else:break    	return Falsebreak;1;-1;101500;2017-12-03 14:26:11
1208;1627631;33;def impose_fine(age, beer):break    if age <18 and beer = True:break        return Truebreak    else:break    	return Falsebreak;0;-1;46200;2017-12-03 14:27:00
1209;1627631;33;def impose_fine(age, beer):break    if age < 18 and beer = True:break        return Truebreak    else:break    	return Falsebreak;0;-1;61200;2017-12-03 14:27:15
1210;1623006;15;def every_second_number(num_list):break    print(num_list[::2])break;0;-1;33300;2017-12-03 14:27:16
1211;1623006;15;def every_second_number(num_list):break    print(num_list[::2])break;0;-1;35000;2017-12-03 14:27:17
1212;1627631;33;def impose_fine(age, beer):break    if age < 18 and beer == True:break        return Truebreak    else:break    	return Falsebreak;1;-1;79500;2017-12-03 14:27:33
1213;1623006;15;def every_second_number(num_list):break    for i in range(0, len(num_list), 2):break    	print(num_list[i])break;1;-1;72900;2017-12-03 14:27:55
1214;1623006;16;def max_pair_sum(num_list):break    act_top = 0break    for i in range(len(num_list)-1):break        if act_top < num_list[i] + num_list[i+1]:break        	act_top = num_list[i] + num_list[i+1]break    return act_topbreak;1;-1;209050;2017-12-03 14:31:27
1215;1625215;25;def count_a(text):break    count = 0break    for intem in text:break        if intem == "A" or intem == "a":break            count += 1break    return count;1;-1;350800;2017-12-03 14:32:32
1216;1623006;17;def five_multiples(num_list):break    new_list = []break    for numbers in num_list:break        if numbers%5 == 0:break            new_list.append(numbers)break    return new_listbreak;1;-1;81200;2017-12-03 14:32:54
1217;1625215;14;def palindrom(text):break    for i in range(len(text)//2):break        if text[i] != text[-i - 1]:break            return Falsebreak    break    return Truebreak;1;-1;213400;2017-12-03 14:36:31
1218;1625382;6;def nonzero_product(numbers):break    e = 1break    for i in numbers:break        if i != 0:break    		e *= ibreak    return ebreak;1;-1;2234750;2017-12-03 14:39:59
1219;1625382;15;def every_second_number(num_list):break    for i in range(0,len(num_list),2):break    	print(num_list[i])break;1;-1;63300;2017-12-03 14:41:05
1220;1625215;19;def zigzag(text):break    for i in range(len(text)):break        if i % 2 ==0:break            print(text[i], end="")break        else:break            print(".", end="")break    print()break    for j in range(len(text)):break        if j % 2 != 0:br;1;-1;274500;2017-12-03 14:41:23
1221;1625382;16;def max_pair_sum(num_list):break    e = num_list[0]+num_list[1]break    for i in range(2,len(num_list)):break        if num_list[i]+num_list[i-1] > e:break            e = num_list[i]+num_list[i-1]break    	    break    return ebreak;1;-1;149750;2017-12-03 14:43:37
1222;1625215;26;def censorship(text):break    a = ""break    for i in range(len(text)):break        if i % 2 == 0:break            a += text[i]break        else:break            a += "X"break    return abreak;1;-1;118000;2017-12-03 14:43:57
1223;1627631;31;def find_longest_word(words_list):break    maxlen = []break    for i in range (len(words_list)):break        words_list[i] = list(words_list[i])break    	maxlen.append(i)break    print(maxlen)break   	break    break break;0;-1;878250;2017-12-03 14:47:03
1224;1625382;17;def five_multiples(num_list):break    pole = []break    for i in num_list:break        if i%5==0:break            pole.append(i)break    return polebreak;1;-1;194050;2017-12-03 14:47:18
1225;1625382;29;def unique(mylist):break    my_list = []break    for i in mylist:break        if i not in my_list:break            my_list.append(i)break    return my_listbreak;1;-1;77000;2017-12-03 14:48:38
1226;1623006;29;def unique(mylist):break    new_list = []break    for number in mylist:break       	if not number in new_list:break           	new_list.append(number)break    return new_list;1;-1;948450;2017-12-03 14:48:47
1227;1627631;31;def find_longest_word(words_list):break    maxlen = []break    for i in range (len(words_list)):break        words_list[i] = list(words_list[i])break    for b in range (len(words_list)):break        maxlen.append(len(words_list[b]))break    return ma;0;-1;1046750;2017-12-03 14:49:59
1228;1625215;28;def string_zip(text1, text2):break    a = ""break    if len(text1) <= len(text2):break        for i in range(len(text1)):break            a += text1[i] + text2[i]break        b = len(text1) + 1break        a += text2[b:]break    else:break        for;0;-1;433200;2017-12-03 14:52:00
1229;1625215;28;def string_zip(text1, text2):break    a = ""break    if len(text1) <= len(text2):break        for i in range(len(text1)):break            a += text1[i] + text2[i]break        b = len(text1) + 1break        a += text2[b:]break    else:break        for;0;-1;451300;2017-12-03 14:52:18
1230;1625215;28;def string_zip(text1, text2):break    a = ""break    if len(text1) <= len(text2):break        for i in range(len(text1)):break            a += text1[i] + text2[i]break        b = len(text1) break        a += text2[b:]break    else:break        for i;1;-1;489350;2017-12-03 14:52:57
1231;1623006;30;def most_common(mylist):break    return min()break;0;-1;148750;2017-12-03 14:54:47
1232;1623006;30;def most_common(mylist):break    return min()break;0;-1;149800;2017-12-03 14:54:48
1233;1623006;30;def most_common(mylist):break    return min()break;0;-1;150700;2017-12-03 14:54:49
1234;1623006;30;def most_common(mylist):break    return min()break;0;-1;152150;2017-12-03 14:54:50
1235;1625215;27;def first_letters(text):break    a = text.split()break    for i in range(len(a)):break        print(a[i][0], end=" ")break	break    print();1;-1;118900;2017-12-03 14:55:42
1236;1625215;6;def nonzero_product(numbers):break    a = 1break    for i in range(len(numbers)):break        if numbers[i] != 0:break            a *= numbers[i]break    return abreak;1;-1;77400;2017-12-03 14:57:43
1237;1623006;31;def find_longest_word(words_list):break    act_max = ""break    for words in words_list:break        if len(words) > len(act_max):break            act_max = wordsbreak    return act_maxbreak;1;-1;91650;2017-12-03 14:58:44
1238;1625215;16;def max_pair_sum(num_list):break    maxi = 0break    for i in range(len(num_list) - 1):break        b = num_list[i] + num_list[i + 1]break        if b > maxi:break            maxi = bbreak    return maxibreak;1;-1;157300;2017-12-03 15:00:31
1239;1623006;4;def alphabet(n):break    for i in range(n):break       	print(chr(65+i%26))break;1;-1;100400;2017-12-03 15:01:00
1240;1625215;17;def five_multiples(num_list):break    a = []break    for intem in num_list:break        if intem % 5 == 0:break            a.append(intem)break    return abreak;1;-1;81350;2017-12-03 15:01:56
1241;1623006;5;def duplication(text):break    new_text = ""break    for letter in text:break        new_text += 2*letterbreak    return new_textbreak;1;-1;61300;2017-12-03 15:02:07
1242;1625215;29;def unique(mylist):break    a = []break    for intem in mylist:break        if intem not in a:break            a.append(intem)break    return abreak;1;-1;82750;2017-12-03 15:03:24
1243;1623006;13;def string_intersection(left, right):break    same_letters = ""break    smaller = min(len(left), len(right))break    for i in range(smaller):break        if left[i] == right[i]:break            same_letters += left[i]break    return same_lettersbreak;0;-1;246050;2017-12-03 15:06:18
1244;1627361;23;def greatest_common_divisor(a, b):break    while b != 0:break        (a, b) = (b, a % b)break    return abreak;1;-1;608200;2017-12-03 15:06:39
1245;1623006;13;def string_intersection(left, right):break    same_letters = ""break    smaller = min(len(left), len(right))break    for i in range(smaller):break        if left[i] == right[i]:break            same_letters += left[i]break    return same_lettersbreak;0;-1;281900;2017-12-03 15:06:53
1246;1623006;13;def string_intersection(left, right):break    same_letters = ""break    smaller = min(len(left), len(right))break    for i in range(smaller):break        if left[i] == right[i]:break            same_letters += left[i]break    return same_lettersbreak;0;-1;407950;2017-12-03 15:08:59
1247;1623006;14;def palindrom(text):break    return text == text[::-1]break;1;-1;39250;2017-12-03 15:10:08
1248;1623006;19;def zigzag(text):break    for j in range(2):break        for i in range(len(text)):break            if i%2 == 0:break                print(text[i], end="")break            else:break                print(".", end="")break		print();0;-1;199100;2017-12-03 15:13:38
1249;989253;34;def multiples(n):break    print("Dvojnasobek", n)break;0;-1;42350;2017-12-03 15:14:48
1250;989253;34;def multiples(n):break    print("Dvojnasobek", n)break;0;-1;73200;2017-12-03 15:15:19
1251;989253;34;def multiples(n):break    print("Dvojnasobek", n)breakdů§bůxůnů§jlfůhůúlůvlnůhůgpvůbůmúúgh´dtoźzzzzzzzzzzzzzzzhkohkohkohkokhodctgkokhdxzhj;0;-1;92200;2017-12-03 15:15:38
1252;989253;34;def multiples(n):break    print("Dvojnasobek", n)breakdů§bůxůnů§jlfůhůúlůvlnůhůgpvůbůmúúgh´dtoźzzzzzzzzzzzzzzzhkohkohkohkokhodctgkokhdxzhj;0;-1;95900;2017-12-03 15:15:42
1253;1600658;8;def square(n):break    for i in range(n):break        print("#", end=" ")break    print()break    square(n)break    break;0;-1;35150;2017-12-03 15:16:49
1254;1618852;34;def multiples(n):break    break    print("Dvojnasobek", n)break;0;-1;55950;2017-12-03 15:17:40
1255;1623006;19;def zigzag(text):break    for i in range(len(text)):break        if i%2 == 0:break            print(text[i], end="")break        elif i%2 != 0:break            print(".", end="")break        elif i == len(text) // 2:break            print();0;-1;512250;2017-12-03 15:18:52
1256;1623006;19;def zigzag(text):break    for i in range(len(text)):break        if i%2 == 0:break            print(text[i], end="")break        elif i%2 != 0:break            print(".", end="")break        elif i-1 == len(text)// 2:break            print();0;-1;525150;2017-12-03 15:19:05
1257;1441953;33;pištdef impose_fine(age, beer):break    return Falsebreak;0;-1;24800;2017-12-03 15:19:24
1258;1618852;34;def multiples(n):break    print("Dvojnasobek",2*n)break;0;-1;168350;2017-12-03 15:20:23
1259;1618852;34;def multiples(n):break    print("Dvojnasobek",2*n)break    print("Trojnasobek", 3*n)break    print("Desetinasobek", 10*n)break;1;-1;200500;2017-12-03 15:20:55
1260;1619001;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break    print("Desetinasobek", n*10)break;1;-1;102250;2017-12-03 15:27:24
1261;1627361;8;def square(n):break    for i in range(n):break        for j in range(n):break        	print("#", end=" ")break        print()break;1;-1;31950;2017-12-03 15:34:19
1262;1619001;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(j+1, end=" ")break        print()break;1;-1;41600;2017-12-03 15:35:20
1263;1619001;36;def products(n):break    for row in range(1, n+1):break        for col in range(1, n+1):break            print(row * col, end=" ")break        print()break;1;-1;120850;2017-12-03 15:38:58
1264;1619001;37;def stars(n):break    for i in range(n):break        if i == 5:break            print("|", end="")break        print("*", end="")break    print()break;0;-1;37550;2017-12-03 15:39:38
1265;1619001;37;def stars(n):break    for i in range(1, n+1):break        print("*", end="")break        if i % 5 == 0:break            print("|", end="")break    print()break;1;-1;83300;2017-12-03 15:40:24
1266;1627361;9;def empty_square(n):break	for i in range(n):break		for j in range(n):break			if (i == 0 or j == 0) or (i == n-1 or j == n-1):break				print("#",end=" ")break			else:break				print(".",end=" ")break        	print();1;-1;363150;2017-12-03 15:40:35
1267;1618852;32;def near_fifty(n):break    if 40<=n<=60 or 140<=n<=160:break    	return Truebreak    else:break        return Falsebreak;1;-1;418550;2017-12-03 15:40:59
1268;1619001;38;def cross(n):    break    for i in range(3*n):break        for j in range(3*n):break            if j >n-1 and j<2*n or i >n-1 and i <2*n:break                print("#", end="")break            else:break                print(".", end="")break;1;-1;229200;2017-12-03 15:44:15
1269;1618852;33;def impose_fine(age, beer):break    if age < 18 and beer == True:break    	return Truebreak    else:break        return Falsebreakbreak;1;-1;193900;2017-12-03 15:44:21
1270;1620587;14;def palindrom(text):break    if text==text[::-1]:break    	return Truebreak    else:break        return Falsebreak;1;-1;46750;2017-12-03 15:48:58
1271;1619896;4;def alphabet(n):break    r = 0break    for i in range(n): break        if r > 25:break            r = 0break        print(chr(ord("A")+r))break        r += 1break;1;-1;260550;2017-12-03 15:54:19
1272;1619896;5;def duplication(text):break    dup = ""break    for i in text:break        dup += (2 * i)break    return dupbreak;1;-1;69500;2017-12-03 15:55:31
1273;1619896;13;def string_intersection(left, right):break    if len(left) > len(right):break        l = len(right)break    else:break        l = len(left)break    for i in range(l):break        if left[i] == right[i]:break            print(left[i])break    break;1;-1;175550;2017-12-03 15:58:45
1274;1619896;14;def palindrom(text):break    if text == text[::-1]:break        return Truebreak    return False;1;-1;70400;2017-12-03 16:00:14
1275;1627361;10;def pyramid(n):break    for height in range(n):break        for i in range(1,2*n+1):break            if i<n-height or i>n+height:break                print(" ",end=" ")break            else:break                print("#",end=" ")break        print();1;-1;1566250;2017-12-03 16:07:23
1276;1619896;19;def zigzag(text):break    for i in range(2):break        for j in range(i, len(text), 2):break            if i == 1 and j == 1:break                print(".", end="")break            print(text[j], end="")break            if j != len(text) - (len(tex;0;-1;686900;2017-12-03 16:12:01
1277;1618852;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(j+1, end=" ")break        print()break;1;-1;175850;2017-12-03 16:13:44
1278;1619896;19;def zigzag(text):break    for i in range(2):break        for j in range(i, len(text), 2):break            if i == 1 and j == 1:break                print(".", end="")break            print(text[j], end="")break            if j != len(text) - 1 - (len;0;-1;828400;2017-12-03 16:14:32
1279;1619896;19;def zigzag(text):break    for i in range(2):break        for j in range(i, len(text), 2):break            if i == 1 and j - 1 >= 0:break                print(".", end="")break            print(text[j], end="")break            if i == 0 and j + 1 < le;0;-1;1190100;2017-12-03 16:20:33
1280;1619896;19;def zigzag(text):break    for i in range(2):break        for j in range(i, len(text), 2):break            if i == 1 and j - 1 >= 0:break                print(".", end="")break            print(text[j], end="")break            if i == 0 and j + 1 < le;1;-1;1221850;2017-12-03 16:21:05
1281;1619896;25;def count_a(text):break    counter = 0break    for i in text:break        if i == "a" or i == "A":break            counter += 1break    return counterbreak;1;-1;71450;2017-12-03 16:23:01
1282;1620881;5;def duplication(text):break    a = ""break    for i in text:break        a = a[:] + 2*ibreak    return abreak;1;-1;380600;2017-12-03 16:25:56
1283;1619896;26;def censorship(text):break    text2 = ""break    for i in range(len(text)):break        if i % 2 == 1:break        	text2 += "X"break        else:break            text2 += text[i]break    return text2break;1;-1;252350;2017-12-03 16:27:19
1284;1628006;34;def multiples(n):break    print("Dvojnasobek", 2*n)break    print("Trojnasobek", 3*n)break    print("Desetinasobek", 10*n)break;1;-1;166800;2017-12-03 16:29:31
1285;1619896;27;def first_letters(text):break    first = Truebreak    for i in text:break        if first and i != " ":break            print(i, end=" ")break            first = Falsebreak        if i == " ":break            first = Truebreak    print()break;1;-1;170500;2017-12-03 16:30:14
1286;1628006;32;def near_fifty(n):break    return (n >= 40 and n <= 60) or (n >= 140 and n <= 160)break;1;-1;56200;2017-12-03 16:30:34
1287;1620881;13;def string_intersection(left, right):break    if len(left) <= len(right):break        length = len(left)break    else:break        length = len(right)break    for i in range(length):break        if left[i] == right[i]:break            print(left[i])b;1;-1;276450;2017-12-03 16:30:39
1288;1628006;33;def impose_fine(age, beer):break    return age <= 18 and beerbreak;1;-1;45150;2017-12-03 16:31:24
1289;1628006;35;def sequences(n):break    for i in range(n):break        for j in range(1, i+2):break            print(j, end=" ")break        print()break;1;-1;26200;2017-12-03 16:32:08
1290;1628006;36;def products(n):break    for row in range(1, n+1):break        for col in range(1, n+1):break            print(row * col, end=" ")break        print()break;1;-1;30850;2017-12-03 16:32:42
1291;1619046;38;def cross(n):    break    for i in range(3*n):break        if i < n or i >= 2*n:break            print(n*".", end="")break            print(n*"#", end="")break            print(n*".", end="")break        else:break            print((3*n)*"#", end="");1;-1;629900;2017-12-03 16:33:01
1292;1628006;37;def stars(n):break    for i in range(1, n+1):break        print("*", end="")break        if (i % 5 == 0) :break            print("|", end="")break    print()break;1;-1;46150;2017-12-03 16:33:31
1293;1619896;28;def string_zip(text1, text2):break    text = ""break    v = text1break    m = text2break    if len(text2) > len(text1):break        v, m = m, vbreak    for i in range(len(m)):break        text += text1[i] + text2[i]break    text += v[i:]break    retu;0;-1;320200;2017-12-03 16:35:41
1294;1625382;5;def duplication(text):break    result = ""break    for i in text:break        result = result + i*2break    return resultbreak;1;-1;56800;2017-12-03 16:36:15
1295;1619896;28;def string_zip(text1, text2):break    text = ""break    v = text1break    m = text2break    if len(text2) > len(text1):break        v, m = m, vbreak    for i in range(len(m)):break        text += text1[i] + text2[i]break    if len(v) != len(m):break;0;-1;410300;2017-12-03 16:37:12
1296;1619896;28;def string_zip(text1, text2):break    text = ""break    v = text1break    m = text2break    if len(text2) > len(text1):break        v, m = m, vbreak    for i in range(len(m)):break        text += text1[i] + text2[i]break    text += v[i + 1:]break;1;-1;442400;2017-12-03 16:37:44
1297;1627387;4;def alphabet(n):break    a = 0break    for o in range(n):break        if (65+o) > 90:break            for i in range(65+o-90): break                print(chr(65+a))break                a += 1break        else:break            print(chr(65+o))breakbre;0;-1;45150;2017-12-03 16:38:22
1298;1627387;4;def alphabet(n):break    a = 0break    for o in range(n):break        if (65+o) > 90:break            for i in range(65+o-90): break                print(chr(65+a))break                a += 1break        else:break            print(chr(65+o))breakbre;0;-1;78100;2017-12-03 16:38:55
1299;1627387;4;def alphabet(n):break    a = 0break    for o in range(n):break        if (65+o) > 90:break            for i in range(65+o-90): break                print(chr(65+a))break                a += 1break        else:break            print(chr(65+o))breakbre;0;-1;128600;2017-12-03 16:39:46
1300;1620881;14;def palindrom(text):break    for i in range(len(text)):break        if text[i] != text[-i-1]:break            return Falsebreak    return True;1;-1;222400;2017-12-03 16:40:22
1301;1628006;38;def cross(n):    break    for i in range(1, 3*n + 1):break        for j in range(1, 3*n + 1):break            if (i > n and i < 2*n + 1) or (j > n and j < 2*n+ 1):break                print('#', end='')break            else:break                print;1;-1;294550;2017-12-03 16:40:36
1302;1628006;1;def numbers(n):break    for i in range(1, n+1):break        print(i)break;1;-1;25500;2017-12-03 16:41:26
1303;1625215;30;def most_common(mylist):break    a = {}break    for intem in mylist:break        if intem not in a:break            a[intem] = 1break        break        else:break            a[intem] = a[intem] + 1break    b=sorted(a.items(), key=lambda x:x[1])brea;1;-1;1131650;2017-12-03 16:41:43
1304;1628006;2;def fibonacci(n):break    an = 1break    an1 = 1break    print(an)break    print(an1)break    for i in range(n-2):break    	temp = anbreak    	an = an1break    	temp += anbreak    	an1 = tempbreak    	print(an1)break;1;-1;117300;2017-12-03 16:43:25
1305;1628006;3;def factorial(n):break    if n == 1:break        return 1break    return n * factorial(n-1)break;1;-1;30200;2017-12-03 16:44:00
1306;1628006;7;def divisors(n):break    for i in range(1, n+1):break        if n % i == 0:break            print(i)break;1;-1;30300;2017-12-03 16:44:34
1307;1625215;31;def find_longest_word(words_list):break    a = ""break    for intem in words_list:break        if len(a) < len(intem):break            a = intembreak        break    return abreak;1;-1;155600;2017-12-03 16:44:56
1308;1628006;18;def digit_sum(n):break    summ = 0break    while n > 0:break    	summ += n % 10break    	n = n // 10break    return summbreak;1;-1;60350;2017-12-03 16:45:36
1309;1620881;19;def zigzag(text):break    for i in range(len(text)):break        if i % 2 == 0:break            print(text[i], end="")break        else:break            print(".", end="")break    print()break    for i in range(len(text)):break        if i % 2 == 1:b;1;-1;171350;2017-12-03 16:45:52
1310;1628006;20;def divisors_count(n):break    summ = 0break    for i in range(1, n+1):break        if n % i == 0:break            summ += 1break    return summ;1;-1;36450;2017-12-03 16:46:16
1311;1625215;15;def every_second_number(num_list):break    for i in range(len(num_list)):break        if i % 2 == 0:break        	print(num_list[i])break;1;-1;80450;2017-12-03 16:46:43
1312;1628006;21;def powers(base, n):break    for i in range(1, n+1):break        print(base**i)break;1;-1;28750;2017-12-03 16:46:48
1313;1625382;13;def string_intersection(left, right):break    for i in range(6):break        if left[i] == right[i]:break            print(left[i])break    #print()break;0;-1;63900;2017-12-03 16:47:07
1314;1628030;32;def near_fifty(n):break    if n >= 40 and n <= 60 :break    	return Truebreak    elif  n >= 140 and n <= 160 :break    	return Truebreak    else:break    	return Falsebreak;1;-1;376550;2017-12-03 16:47:53
1315;1620881;25;def count_a(text):break    i = 0break    for char in text:break        if char.lower() == "a":break            i += 1break    return ibreak;1;-1;106650;2017-12-03 16:48:37
1316;1628006;22;def divisors(n):break    summ = 0break    for i in range(1, n+1):break        if n % i == 0:break            summ += 1break    return summbreakbreakdef print_primes(n):break    found = 0break    number = 0break    while found < 10:break        number;0;-1;135850;2017-12-03 16:49:20
1317;1628006;22;def divisors(n):break    summ = 0break    for i in range(1, n+1):break        if n % i == 0:break            summ += 1break    return summbreakbreakdef print_primes(n):break    found = 0break    number = 0break    while found < n:break        number;1;-1;149000;2017-12-03 16:49:34
1318;1628006;8;def square(n):break    for i in range(n):break        for j in range(n):break        	print("#", end=" ")break        print()break;1;-1;27050;2017-12-03 16:50:24
1319;1628006;9;def empty_square(n):break    for i in range(n):break		for j in range(n):break			if (i == 0 or j == 0) or (j ==n-1 or i == n-1):break				print("#", end=" ")break			else:break				print('.', end=' ')break		print()	break;1;-1;134700;2017-12-03 16:52:41
1320;1620881;26;def censorship(text):break    a = ""break    for i in range(len(text)):break        if i % 2 == 0:break            a = a + text[i]break        else:break            a = a + "X"break    return abreak;1;-1;161650;2017-12-03 16:53:18
1321;1619896;6;def nonzero_product(numbers):break    s = 1break    for i in numbers:break        if i != 0:break            s *= ibreak    return sbreak;1;-1;74200;2017-12-03 16:56:33
1322;1620881;27;def first_letters(text):break    let = text.split()break    for word in let:break        print(word[0], end=" ")break    print()break;1;-1;122750;2017-12-03 16:58:19
1323;1628030;32;def near_fifty(n):break    if n >= 40 and n<= 60 :break        return Truebreak    elif n >= 140 and n<= 160 :break    	return Truebreak    else :break    	return Falsebreak;1;-1;143750;2017-12-03 16:58:29
1324;1619896;15;def every_second_number(num_list):break    for i in range(0, len(num_list), 2):break        print(num_list[i])break;1;-1;130850;2017-12-03 16:58:47
1325;1627387;4;def alphabet(n):break    a = 0break    for o in range(n):break        if (65+o) > 90:break            if o % 26 == 0: a += 1break            print(chr((65+o)-26*a))break        else:break            print(chr(65+o))breakbreakbreak;1;-1;1565300;2017-12-03 17:03:43
1326;1619896;16;def max_pair_sum(num_list):break    summ = num_list[0] + num_list[1]break    for i in range(1, len(num_list)-1):break        sum = num_list[i] + num_list[i+1]break        if sum > summ:break            summ = sumbreak    return summ;1;-1;357800;2017-12-03 17:04:48
1327;1619896;17;def five_multiples(num_list):break    five = []break    for i in num_list:break        if i % 5 == 0:break            five.append(i)break    return(five)break;1;-1;84100;2017-12-03 17:06:16
1328;1620881;28;def string_zip(text1, text2):break    a = ""break    if len(text1) >= len(text2):break        try:break            for i in range(len(text1)):break                a = a[:] + text1[i] + text2[i]break        except IndexError:break            a = a[:];1;-1;502200;2017-12-03 17:07:28
1329;1619896;29;def unique(mylist):break    u = []break    for i in mylist:break        if u.count(i) == 0:break            u.append(i)break    return ubreak;1;-1;92600;2017-12-03 17:07:51
1330;1620881;4;def alphabet(n):break    for i in range(n):break        for i in range(n):break            print(chr(ord("A")+i%26))break;0;-1;43250;2017-12-03 17:09:29
1331;1620881;4;def alphabet(n):break    for i in range(n):break            print(chr(ord("A")+i%26))break;1;-1;53800;2017-12-03 17:09:40
1332;1620881;5;def duplication(text):break    a = ""break    for i in text:break        a = a[:] + 2*ibreak    return a;1;-1;14200;2017-12-03 17:10:02
1333;1620881;13;def string_intersection(left, right):break    if len(left) <= len(right):break        length = len(left)break    else:break        length = len(right)break    for i in range(length):break        if left[i] == right[i]:break            print(left[i],;0;-1;11150;2017-12-03 17:10:16
1334;1620881;13;def string_intersection(left, right):break    if len(left) <= len(right):break        length = len(left)break    else:break        length = len(right)break    for i in range(length):break        if left[i] == right[i]:break            print(left[i])b;1;-1;23100;2017-12-03 17:10:28
1335;1628030;34;def multiples(n):break    print("Dvojnasobek", 2*n)break    print("Trojnasobek", 3*n)break    print("Desetinasobek", 10*n);1;-1;151450;2017-12-03 17:11:26
1336;1620881;6;def nonzero_product(numbers):break    a = 1break    for num in numbers:break        if num != 0:break            a *= numbreak    return abreak;1;-1;53650;2017-12-03 17:11:34
1337;1628030;33;def impose_fine(age, beer):break    if age < 18 and beer == True:break        return Truebreak    else :break    	return Falsebreak;1;-1;109500;2017-12-03 17:13:17
1338;1620881;15;def every_second_number(num_list):break    for i in range(len(num_list)):break        if i % 2 == 0:break            print(num_list[i])breakbreak;1;-1;194350;2017-12-03 17:15:44
1339;1628030;35;def sequences(n):break    for i in range(n):break        x = 1break        for j in range(i+1):break            print(x, end=" ")break            x = x + 1break        print()break;1;-1;140050;2017-12-03 17:15:59
1340;1628030;36;def products(n):break    for row in range(n):break        for col in range(n):break            print((row+1) * (col+1), end=" ")break        print()break;1;-1;205600;2017-12-03 17:19:28
1341;1620881;16;def max_pair_sum(num_list):break    max_pair = (0, 0)break    for i in range(len(num_list)-1):break        a = num_list[i], num_list[i+1]break        if a > max_pair:break            max_pair = abreak    return max_pair[0] + max_pair[1]break        b;0;-1;308450;2017-12-03 17:21:52
1342;1628030;37;def stars(n):break    for i in range(n):break        print("*", end="")break        if i % 5 == 0:break            print("|", end="")break    print()break;0;-1;404850;2017-12-03 17:26:17
1343;1619896;30;def most_common(mylist):break    most = [mylist[0]]break    count = mylist.count(mylist[0])break    for i in range(1, len(mylist)):break        if mylist.count(mylist[i]) == count:break            most.append(i)break        else:break            if m;0;-1;1005750;2017-12-03 17:26:24
1344;1628030;37;def stars(n):break    for i in range(n):break        print("*", end="")break        if (i+1) // 5 == (i+1) / 5:break            print("|", end="")break    print()break;1;-1;487350;2017-12-03 17:27:39
1345;1619896;30;def most_common(mylist):break    most = [mylist[0]]break    count = mylist.count(mylist[0])break    for i in range(1, len(mylist)):break        if mylist.count(mylist[i]) == count and most.count(mylist[i]) == 0:break            most.append(i)break;1;-1;1218000;2017-12-03 17:29:56
1346;1619896;31;def find_longest_word(words_list):break    word = words_list[0]break    for i in words_list:break        if len(i) > len(word):break            word = ibreak    return wordbreak;1;-1;103450;2017-12-03 17:31:57
1347;1628030;1;def numbers(n):break    for x in range (n):break        print(x+1)break;1;-1;49150;2017-12-03 17:42:53
1348;1628030;3;def factorial(n):break    x=1break    y=1break    while x<=n:break        y = y * xbreak        x = x + 1break    return ybreak;1;-1;161900;2017-12-03 18:19:21
1349;1618980;28;def string_zip(text1, text2):break    zipped = []break    if text1 >= text2:break        text = text1break    else:break        text = text2break    for i in range(len(text)):break        if i <= len(text1) - 1:break            zipped.append(text1[i];0;-1;1606300;2017-12-03 18:25:17
1350;1628231;34;def multiples(n):break    n *= 10break    print("Desetinasobek", n);0;-1;264600;2017-12-03 18:31:12
1351;1628231;34;def multiples(n):break    n *= 10break    print("Desetinasobek", n);0;-1;276300;2017-12-03 18:31:23
1352;1628231;34;def multiples(n):break    n *= 3break    print("Trojnasobek", n);0;-1;314000;2017-12-03 18:32:01
1353;1628231;34;def multiples(n):break    n *= 3break    print("Trojnasobek", n);0;-1;330750;2017-12-03 18:32:18
1354;1628231;34;def multiples(n):break    n *= 3break    print("Trojnasobek", n);0;-1;334050;2017-12-03 18:32:21
1355;1628231;34;def multiples(n):break    n *= 2break    print("Dvojnasobek", n);0;-1;345650;2017-12-03 18:32:33
1356;1628231;34;def multiples(n):break    n *= 2break    print("Dvojnasobek", n);0;-1;348000;2017-12-03 18:32:35
1357;1628231;34;def multiples(n):break    n *= 10break    print("Desetinasobek", n);0;-1;360550;2017-12-03 18:32:48
1358;1628231;34;def multiples(n):break    n *= 2break    print("Dvojnasobek", n);0;-1;377550;2017-12-03 18:33:05
1359;1628231;34;def multiples(n):break    n *= 2break    print("Dvojnasobek", n);0;-1;383600;2017-12-03 18:33:11
1360;1628231;34;def multiples(n):break    n *= 10break    print("Desetinasobek", n);0;-1;420500;2017-12-03 18:33:48
1361;1628231;34;def multiples(n):break    n *= 10break    print("Desetinasobek", n);0;-1;422050;2017-12-03 18:33:49
1362;1628231;32;def near_fifty(n):break    if n <= 160 and n >= 140:break        return Truebreak    elif n <= 60 and n >= 40:break        return Truebreak    return Falsebreak;1;-1;262100;2017-12-03 18:38:18
1363;1628231;34;def multiples(n):break    n = n * 2break    print("Dvojnasobek", n)break;0;-1;23450;2017-12-03 18:43:19
1364;1628231;34;def multiples(n):break    n = n * 2break    print("Dvojnasobek", n)break;0;-1;28150;2017-12-03 18:43:24
1365;1628231;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break    print("Dessetinasobek", n*10)break;0;-1;67950;2017-12-03 18:44:04
1366;1628231;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break    print("Desetinasobek", n*10)break;1;-1;76300;2017-12-03 18:44:12
1367;1618980;28;def string_zip(text1, text2):break    zipped = []break    if len(text1) >= len(text2):break        text = text1break    else:break        text = text2break    for i in range(len(text)):break        if i <= len(text1) - 1:break            zipped.appen;1;-1;2463550;2017-12-03 18:44:48
1368;1628231;33;def impose_fine(age, beer):break    if age < 18 and beer:break        return Truebreak    return Falsebreak;1;-1;55500;2017-12-03 18:45:11
1369;1628231;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(j+1, end=" ")break        print()break;1;-1;487000;2017-12-03 18:53:52
1370;1628231;36;def products(n):break    for row in range(1, n+1):break        for col in range(1, n+1):break            print(row * col, end=" ")break        print()break;1;-1;164000;2017-12-03 18:56:51
1371;37170;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break    print("Desetinasobek", n*10)breakbreak;1;-1;218900;2017-12-03 18:59:43
1372;1628231;37;def stars(n):break    for i in range(1, n+1):break        print("*", end="")break        if i%5 == 0:break            print("|", end="")break    print()break;1;-1;116700;2017-12-03 19:00:21
1373;1618980;4;def alphabet(n):break    start = 65break    counter = 0breakbreak    for i in range(n):break        if counter > 25:break            start = start - counterbreak            counter = 0break        print(chr(start + i))break        counter += 1;1;-1;569100;2017-12-03 19:06:05
1374;37170;32;def near_fifty(n):break    i = 0break    if n > 100:break        i = 100break    if n >= 40+i and n <= 60+i:break        return Truebreak    else:break        return Falsebreak;1;-1;149650;2017-12-03 19:06:44
1375;37170;33;def impose_fine(age, beer):break    if age<18 and beer==True:break  		return Truebreak    else:break    	return Falsebreak;1;-1;148500;2017-12-03 19:09:32
1376;37170;4;def alphabet(n):break	alf = [A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z]break    for i in range(n):break        if i > len(alf):break            print(alf[i-26])break        else:break            print(alf[i])breakbreak;0;-1;380450;2017-12-03 19:16:23
1377;37170;4;def alphabet(n):break    alf = [A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z]break    for i in range(n):break        if i > 26:break            print(alf[i-26])break        else:break        	print(alf[i])break;0;-1;128400;2017-12-03 19:19:20
1378;37170;4;def alphabet(n):break    alf = [A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z]break    for i in range(n):break        if i > 26:break            print(alf[i-26])break        else:break        	print(alf[i])break;0;-1;131150;2017-12-03 19:19:23
1379;1628231;38;def cross(n):    break    for i in range((3*n)):break        for j in range(3*n):break            if i >= n and i < ((3*n)-n) or j >= n and j < ((3*n)-n):break                print("#", end="")break            else:break                print(".", end;1;-1;987400;2017-12-03 19:37:53
1380;1620587;37;def stars(n):break    for i in range(n*1):break        print("*", end="")break        if i == 5:break            print("|", end="")break    for i in range(n*1):break        print("*", end="")break        if i == 5:break            print("|", end="")b;0;-1;20450;2017-12-03 19:38:02
1381;1620587;37;def stars(n):break    for i in range(n+1):break        print("*", end="")break        if i == 5:break            print("|", end="")break        if i == 10:break           	print("|", end="")break    print()break;0;-1;78750;2017-12-03 19:39:31
1382;1620587;37;def stars(n):break    for i in range(n+1):break        print("*", end="")break        if i == 5:break            print("|", end="")break        if i == 10:break           	print("|", end="")break    print()break;0;-1;84100;2017-12-03 19:39:36
1383;1628231;1;def numbers(n):break    for i in range(1,n+1):break    	print(i)break;1;-1;156600;2017-12-03 19:43:23
1384;1628231;2;def fibonacci(n):break    a = 0break    b = 1break    print(b)break    for i in range(1, n):break		c = a + bbreak		print(c)break		a = bbreak		b = cbreak;1;-1;332050;2017-12-03 19:49:21
1385;1620587;37;def stars(n):break    for i in range(n+1):break        print("*", end="")break        if i % 5 == 0 and i!=0:break           	print("|", end="")breakbreak    print()break;0;-1;489350;2017-12-03 19:49:55
1386;1620587;37;def stars(n):break    for i in range(n+1):break        print("*", end="")break        if i % 5 == 0 and i!=0:break           	print("|", end="")breakbreak    print()break;0;-1;500000;2017-12-03 19:50:06
1387;1620587;37;def stars(n):break    for i in range(n):break        print("*", end="")break        if i % 4 == 0 and i!=0:break           	print("|", end="")breakbreak    print()break;0;-1;75900;2017-12-03 19:54:18
1388;1628231;3;def factorial(n):break    if n == 0:break    	return 1break    else:break        return n * factorial(n-1)break;1;-1;44850;2017-12-03 19:57:13
1389;1628231;7;def divisors(n):break    for i in range(1, n+1):break        if n%i == 0:break    	print(i)break;1;-1;67800;2017-12-03 19:58:23
1390;1628477;31;def find_longest_word(words_list):break    max_word = 0break    for word in words_list:break        if len(word) > max_word:break            max_word = len(word)break            longest_word = wordbreak    return longest_wordbreak;1;-1;170300;2017-12-03 19:59:14
1391;1628477;6;def nonzero_product(numbers):break    if len(numbers) == 1:break        return numbers[0]break    else:break        a = numbers[-1]break        del numbers[-1]break        while a == 0 and len(numbers) > 2:break            a = numbers[-1]break;0;-1;508650;2017-12-03 20:10:51
1392;1628477;6;def nonzero_product(numbers):break    if len(numbers) == 1:break        if numbers[0] == 0:break            numbers[0] = 1break        return numbers[0]break    else:break        a = numbers[-1]break        del numbers[-1]break        while a == 0 an;1;-1;574100;2017-12-03 20:11:57
1393;1625153;34;def multiples(n):break    print("Dvojnasobek", 2n)break    print("Trojnasobek", 3n)break    print("Desetinasobek", 10n)break;0;-1;138450;2017-12-03 20:14:51
1394;1625153;34;def multiples(n):break    print("Dvojnasobek", 2*n)break    print("Trojnasobek", 3*n)break    print("Desetinasobek", 10*n)break;1;-1;192650;2017-12-03 20:15:46
1395;1625153;32;def near_fifty(n):break    if 50 - n >= -10 and 50 - n <= 10:break        return Truebreak    if 150 - n >= -10 and 150 - n <= 10:break        return Truebreak    return Falsebreak;1;-1;197600;2017-12-03 20:19:09
1396;1628477;15;def every_second_number(num_list):break    k = 0break    while k < len(num_list):break        print(num_list[k])break        k += 2break;1;-1;530900;2017-12-03 20:21:17
1397;1628477;30;def most_common(mylist):break    b = {}break    a = []break    max_b = 0break    min_a = 10000000break    for i in range(len(mylist)):break        if mylist[i] not in b:break            b[mylist[i]] = 1break        else:break            b[mylist[i]];0;-1;516700;2017-12-03 20:35:31
1398;1628477;30;def most_common(mylist):break    b = {}break    a = []break    max_b = 0break    min_a = 10000000break    for i in range(len(mylist)):break        if mylist[i] not in b:break            b[mylist[i]] = 1break        else:break            b[mylist[i]];0;-1;521100;2017-12-03 20:35:35
1399;1628477;30;def most_common(mylist):break    b = {}break    a = []break    max_b = 0break    min_a = 10000000break    for i in range(len(mylist)):break        if mylist[i] not in b:break            b[mylist[i]] = 1break        else:break            b[mylist[i]];0;-1;522050;2017-12-03 20:35:36
1400;1628477;30;def most_common(mylist):break    b = {}break    a = []break    max_b = 0break    min_a = 10000000break    for i in range(len(mylist)):break        if mylist[i] not in b:break            b[mylist[i]] = 1break        else:break            b[mylist[i]];0;-1;522850;2017-12-03 20:35:37
1401;1628655;10;def pyramid(n):break    for i in range(n):break		for j in range(2*n):break			if (j >= n - i and j <= n + i):break				print("#", end=" ")break			else:break				print(' ', end=' ')break		print()	break;1;-1;205850;2017-12-03 20:37:24
1402;1628655;8;def square(n):break	for i in range(n):break		for j in range(n):break			print('#', end=' ')break		print();1;-1;74100;2017-12-03 20:38:41
1403;1628655;9;def empty_square(n):break	for i in range(n):break		for j in range(n):break			if i == 0 or j== 0 or i == n - 1 or j == n - 1:break				print('#', end=' ')break			else:break				print('.', end=' ')break		print()	break;1;-1;105250;2017-12-03 20:40:29
1404;1628477;30;def most_common(mylist):break    a = []break    for i in range(max(mylist)+1):break        a.append(0)break    for item in mylist:break        a[item] += 1break    return max(a)break;0;-1;813850;2017-12-03 20:40:33
1405;1628655;11;def chessboard(n):break    black = Truebreak    for i in range(n):break        for j in range(n):break            black = not blackbreak            if black:break                print('#', end=' ')break            else:break                print('.',;0;-1;160250;2017-12-03 20:43:21
1406;1628477;30;def most_common(mylist):break    a = []break    for i in range(max(mylist)+1):break        a.append(0)break    for item in mylist:break        a[item] += 1break    for i in range(len(a)):break        if a[i] == max(a):break            return ibreak;1;-1;999650;2017-12-03 20:43:42
1407;1628655;11;def chessboard(n):break	black = Truebreak	for i in range(n):break		for j in range(n):break			if black:break				print('#', end=' ')break			else:break				print('.', end=' ')break			black = not blackbreak		print()break;0;-1;244100;2017-12-03 20:44:37
1408;1628655;11;def chessboard(n):break	black = Truebreak	for i in range(n):break		for j in range(n):break			if black:break				print('#', end=' ')break			else:break				print('.', end=' ')break			black = not blackbreak		black = not blackbreak		print();0;-1;293600;2017-12-03 20:45:26
1409;1628655;11;def chessboard(n):break	for i in range(n):break		for j in range(n):break			if ((i + j) % 2) == 0:break				print('#', end=' ')break			else:break				print('.', end=' ')break		print();1;-1;380050;2017-12-03 20:46:53
1410;1628477;16;def max_pair_sum(num_list):break    max_s = 0break    for i in range(len(num_list)-1):break        if num_list[i] + num_list[i+1] > max_s:break            max_s = num_list[i] + num_list[i+1]break    return max_sbreak;1;-1;175450;2017-12-03 20:47:19
1411;1628477;17;def five_multiples(num_list):break    for item in num_list:break        if item % 5 == 0:break            a.append(item)break    return abreak;0;-1;59300;2017-12-03 20:48:25
1412;1628477;17;def five_multiples(num_list):break    a = []break    for item in num_list:break        if item % 5 == 0:break            a.append(item)break    return abreak;1;-1;68300;2017-12-03 20:48:34
1413;1628655;12;def bigX(n):break    indicator = 0break    for i in range(2*n - 1):break        for j in range(2*n - 1):break            if (indicator == j or 2*n - 2 - indicator == j):break                print('#', end=' ')break            else:break;1;-1;175100;2017-12-03 20:49:51
1414;1620587;37;def stars(n):break    for i in range(n):break        if i != 0:break            if i % 5 == 0:break                print("|", end="")break        print("*", end="")break    print()break;1;-1;294000;2017-12-03 20:57:04
1415;1628655;39;def queen(x, y):break    for i in range(1, 9):break        for j in range(1, 9):break            if j == x and i == y:break                print('D', end='')break            elif (x - j == y - i) or (abs(j - x) == abs(i - y)) or i == y or j == x:brea;1;-1;877800;2017-12-03 21:06:33
1416;1628655;4;def alphabet(n):break    for i in range(n):break        itorator = i % 26break        print(chr(65 + itorator))break;1;-1;57650;2017-12-03 21:08:09
1417;1628655;5;def duplication(text):break    duplicated = ''break    for element in text:break        duplicated += 2*elementbreak    return duplicatedbreak;1;-1;57400;2017-12-03 21:09:08
1418;1628655;13;def string_intersection(left, right):break    length = min(len(left), len(right))break    for i in range(length):break        if left[i] == right[i]:break            print(left[i])break;1;-1;176750;2017-12-03 21:12:07
1419;1628655;14;def palindrom(text):break    return text == text[::-1]break;1;-1;15000;2017-12-03 21:12:25
1420;1628655;19;def zigzag(text):break    rows = ['','']break    for i in range(len(text)):break        if i % 2 == 0:break            rows[0] += text[i]break            rows[1] += '.'break        else:break            rows[1] += text[i]break            rows[0] += ';1;-1;193850;2017-12-03 21:15:42
1421;1620587;25;def count_a(text):break    text.split()break    text=text.lower()break    return text.count("a")break;1;-1;350000;2017-12-03 21:15:56
1422;1628655;25;def count_a(text):break    sum_a = 0break    for char in text:break        if char.lower() == 'a':break            sum_a += 1break    return sum_abreak;1;-1;58000;2017-12-03 21:17:16
1423;1628655;26;def censorship(text):break    censor = ''break    for i in range(len(text)):break        if i % 2 == 0:break            censor += text[i]break        else:break            censor += 'X'break    return censorbreak            break;1;-1;70000;2017-12-03 21:18:29
1424;1628655;27;def first_letters(text):break    text = text.split()break    for word in text:break        print(word[0], end=' ')break    print();1;-1;79650;2017-12-03 21:19:50
1425;1620587;28;def string_zip(text1, text2):break    text1.split()break    return text2.join(text1)break;0;-1;297150;2017-12-03 21:26:12
1426;1623006;25;def count_a(text):break    return text.upper().count("A")break;1;-1;40200;2017-12-03 21:43:11
1427;1623006;26;def censorship(text):break    new_text = ""break    for i in range(len(text)):break        if i%2 == 0:break            new_text += text[i]break        else:break            new_text += "X"break    return new_textbreak;1;-1;103400;2017-12-03 21:45:05
1428;1628655;28;def string_zip(text1, text2):break    zipped = ''break    for i in range(len(text1) + len(text2)):break        try:break            zipped += text1[i]break        except:break            passbreak        try:break            zipped += text2[i]break;1;-1;1612150;2017-12-03 21:46:47
1429;1628655;6;def nonzero_product(numbers):break    product = 1break    for number in numbers:break        if number != 0:break            product *= numberbreak    return productbreak;1;-1;50350;2017-12-03 21:48:51
1430;1628655;15;def every_second_number(num_list):break    for number in num_list[::2]:break        print(number)break;1;-1;39800;2017-12-03 21:49:33
1431;1628655;16;def max_pair_sum(num_list):break    pair_sum = 0break    for i in range(len(num_list) - 1):break        intermetiate_sum = num_list[i] + num_list[i+1]break        if intermetiate_sum > pair_sum:break            pair_sum = intermetiate_sumbreak    ret;1;-1;118550;2017-12-03 21:51:36
1432;1628655;17;def five_multiples(num_list):break    multiple_list = []break    for number in num_list:break        if number % 5 == 0:break            multiple_list.append(number)break    return multiple_listbreak;1;-1;63000;2017-12-03 21:52:42
1433;1623006;27;def first_letters(text):break    new_text = ""break    text = text.split(" ")break    for words in text:break        new_text += words[0]break    print(new_text)break        break;0;-1;423350;2017-12-03 21:52:55
1434;1623006;27;def first_letters(text):break    new_text = ""break    text = text.split(" ")break    for words in text:break        new_text += words[0] + " "break    print(new_text)break        break;0;-1;432300;2017-12-03 21:53:04
1435;1623006;27;def first_letters(text):break    new_text = ""break    text = text.split(" ")break    for words in text:break        new_text += words[0] + " "break    print(new_text)break        break;0;-1;436450;2017-12-03 21:53:08
1436;1623006;27;def first_letters(text):break    new_text = ""break    text = text.split(" ")break    for words in text:break        new_text += words[0] + " "break    print(new_text)break        break;0;-1;438100;2017-12-03 21:53:10
1437;1623006;27;def first_letters(text):break    new_text = ""break    text = text.split(" ")break    for words in text:break        new_text += words[0] + " "break    print(new_text)break        break;0;-1;439300;2017-12-03 21:53:11
1438;1623006;27;def first_letters(text):break    new_text = ""break    text = text.split(" ")break    for words in text:break        new_text += words[0] + " "break    print(new_text)break        break;0;-1;444050;2017-12-03 21:53:16
1439;1623006;27;def first_letters(text):break    new_text = ""break    text = text.split(" ")break    for words in text:break        new_text += words[0] + " "break    print(new_text)break        break;0;-1;445550;2017-12-03 21:53:17
1440;1628655;29;def unique(mylist):break    mylist = list(set(mylist))break    return mylistbreak;0;-1;37450;2017-12-03 21:53:46
1441;1628655;29;def unique(mylist):break    newlist = []break    for number in mylist:break        if number not in newlist:break            newlist.append(number)break    return newlistbreak;1;-1;94800;2017-12-03 21:54:43
1442;1623006;27;def first_letters(text):break    new_text = ""break    text = text.split(" ")break    for words in text:break        new_text += words[0]break    print(new_text)break        break;0;-1;510300;2017-12-03 21:55:33
1443;1623006;27;def first_letters(text):break    new_text = ""break    text = text.split(" ")break    for words in text:break        new_text += words[0]break    print(new_text)break        break;0;-1;516200;2017-12-03 21:55:39
1444;1623006;27;def first_letters(text):break    new_text = ""break    text = text.split(" ")break    for words in text:break        new_text += words[0] + " "break    print(new_text)break        break;0;-1;521450;2017-12-03 21:55:44
1445;1623006;27;def first_letters(text):break    new_text = ""break    text = text.split(" ")break    for words in text:break        new_text += words[0] + " "break    print(new_text)break        break;0;-1;523500;2017-12-03 21:55:46
1446;1623006;27;def first_letters(text):break    i = 0break    new_text = ""break    text = text.split(" ")break    for words in text:break        if word[0] != " "break        	new_text += words[0] + " "break        else:break            while word[i] !=" ":break;0;-1;650300;2017-12-03 21:57:53
1447;1623006;27;def first_letters(text):break    i = 0break    new_text = ""break    text = text.split(" ")break    for words in text:break        if word[0] != " ":break        	new_text += words[0] + " "break        else:break            while word[i] !=" ":break;0;-1;669500;2017-12-03 21:58:12
1448;1623006;27;def first_letters(text):break    i = 0break    new_text = ""break    text = text.split(" ")break    for words in text:break        if words[0] != " ":break        	new_text += words[0] + " "break        else:break            while words[i] !=" ":brea;0;-1;677500;2017-12-03 21:58:20
1449;1623006;27;def first_letters(text):break    i = 0break    new_text = ""break    text = text.split(" ")break    for words in text:break        if words[0] != " ":break        	new_text += words[0] + " "break        else:break            while words[i] !=" ":brea;0;-1;680800;2017-12-03 21:58:23
1450;1623006;27;def first_letters(text):break    i = 0break    new_text = ""break    text = text.split(" ")break    for words in text:break        if words[0] != " ":break        	new_text += words[0] + " "break        else:break            while words[i] !=" ":brea;0;-1;681800;2017-12-03 21:58:25
1451;1623006;27;def first_letters(text):break    i = 0break    new_text = ""break    text = text.split(" ")break    for words in text:break        if words[0] != " ":break        	new_text += words[0] + " "break        else:break            while words[i] !=" ":brea;0;-1;683200;2017-12-03 21:58:26
1452;1623006;27;def first_letters(text):break    i = 0break    new_text = ""break    text = text.split(" ")break    for words in text:break        if words[0] != " ":break        	new_text += words[0] + " "break        else:break            while words[i] !=" ":brea;0;-1;684150;2017-12-03 21:58:27
1453;1623006;27;def first_letters(text):break    i = 0break    new_text = ""break    text = text.split(" ")break    for words in text:break        if words[0] != " ":break        	new_text += words[0] + " "break    print(new_text)break        break;0;-1;753550;2017-12-03 21:59:37
1454;1623006;27;def first_letters(text):break    i = 0break    new_text = ""break    text = text.split(" ")break    for words in text:break        if words[0] != " ":break        	new_text += words[0] + " "break    print(new_text)break        break;0;-1;755750;2017-12-03 21:59:39
1455;1623006;27;def first_letters(text):break    i = 0break    new_text = ""break    text = text.split(" ")break    for words in text:break        if words[0] != " ":break        	new_text += words[0] + " "break    print(new_text)break        break;0;-1;756950;2017-12-03 21:59:40
1456;1623006;27;def first_letters(text):break    i = 0break    new_text = ""break    text = text.split(" ")break    for words in text:break        if words[0] != " ":break        	new_text += words[0] + " "break    print(new_text)break        break;0;-1;757950;2017-12-03 21:59:41
1457;1623006;27;def first_letters(text):break    i = 0break    new_text = ""break    text = text.split(" ")break    for words in text:break        if words[0] != " ":break            new_text += words[0] + " "break    print(new_text)break        break;0;-1;775900;2017-12-03 21:59:59
1458;1623006;27;def first_letters(text):break    i = 0break    new_text = ""break    text = text.split(" ")break    for words in text:break        if words[0] != " ":break            new_text += words[0] + " "break    print(new_text)break        break;0;-1;777900;2017-12-03 22:00:01
1459;1623006;27;def first_letters(text):break    new_text = ""break    text = text.split(" ")break    for words in text:break        if words[0] != " ":break            new_text += words[0] + " "break    print(new_text)break        break;0;-1;787150;2017-12-03 22:00:10
1460;1623006;27;def first_letters(text):break    new_text = ""break    text = text.split(" ")break    for words in text:break        if len(words) > 0:break            new_text += words[0] + " "break    print(new_text)break        break;1;-1;855750;2017-12-03 22:01:19
1461;1628655;30;def most_common(mylist):break    mylist.sort()break    numbers = [0]*max(mylist)break    for number in mylist:break        numbers[number - 1] += 1break    commoner = numbers.index(max(numbers))break    return commoner + 1break;1;-1;449200;2017-12-03 22:03:25
1462;1628813;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(j+1, end=" ")break        print()break;1;-1;126300;2017-12-03 22:04:32
1463;1628655;31;def find_longest_word(words_list):break    index = 0break    maxlength = 0break    for word in words_list:break        if len(word) > maxlength:break            maxlength = len(word)break            index = words_list.index(word)break    return words;1;-1;103450;2017-12-03 22:05:15
1464;1628813;36;def products(n):break    for row in range(n):break        for col in range(n):break            print((row+1) * (col+1), end=" ")break        print()break;1;-1;129300;2017-12-03 22:06:46
1465;1628813;37;def stars(n):break    for i in range(n):break        print("*", end="")break        if i == 4:break            print("|", end="")break    print()break;0;-1;76600;2017-12-03 22:08:06
1466;1623006;28;def string_zip(text1, text2):break    zip_word = ""break    longer = max(len(text1), len(text2))break    shorter = min(len(text1), len(text2))break    for i in range(longer):break        if i < shorter:break            zip_word += text1[i] + text2[i];1;-1;176900;2017-12-03 22:08:23
1467;1623006;19;def zigzag(text):break    for i in range(len(text)*2):break        if i%2 == 0:break            print(text[i], end="")break        else:break            print(".", end="")break        if i == len(text):break            print()break;0;-1;111100;2017-12-03 22:10:21
1468;1628813;37;def stars(n):break    for i in range(n):break        print("*", end="")break        if (i+1)%5 ==0 :break            print("|", end="")break    print()break;1;-1;353100;2017-12-03 22:14:53
1469;1628813;38;def cross(n):    break    for i in range(3*n):break        for j in range(3*n):break            if j in range(n,n*2) or i in range(n,n*2):break                print("#", end="")break            else:break                print(".", end="")break;1;-1;416550;2017-12-03 22:21:57
1470;1628831;33;def impose_fine(age, beer):break    if age<18 and beer:break        return Truebreak    break    return Falsebreak;1;-1;116050;2017-12-03 22:24:07
1471;1628813;8;def square(n):break    for i in range(n):break        print(n*"# ")break    print()break;1;-1;37150;2017-12-03 22:38:45
1472;1620088;4;import stringbreakdef alphabet(n):break    x = 65break    while n > 0:break        print(chr(x))break        if x == 90:break            x = 65break        else:break            x += 1break        n -= 1break        break;1;-1;307600;2017-12-03 22:59:13
1473;1628813;9;def empty_square(n):break    print(n*"# ")break    for i in range(n-2):break        print("# " + (n-2)*". " + "# ")break    print(n*"# ")break    print()	break;0;-1;108200;2017-12-03 22:59:58
1474;1628813;9;def empty_square(n):break    print(n*"# ")break    for i in range(n-2):break        print("# " + (n-2)*". " + "# ")break    print(n*"# ")break    print()	break;0;-1;116600;2017-12-03 23:00:06
1475;1628813;9;def empty_square(n):break    for i in range(n):break        if i in [0,n-1]:break            print(n*"# ")break        else:break            print("# " + (n-2)*". " + "# ")break;1;-1;261200;2017-12-03 23:04:28
1476;1628813;9;def empty_square(n):break    for i in range(n):break        if i in [0,n-1]:break            print(n*"# ")break        else:break            print("# " + (n-2)*". " + "# ")break;1;-1;6450;2017-12-03 23:04:48
1477;1628813;9;def empty_square(n):break   for i in range(n):break        if i in [0,n-1]:break            print(n*"# ")break        else:break            print("# " + (n-2)*". " + "# ")break;1;-1;4600;2017-12-03 23:04:56
1478;1628813;9;def empty_square(n):break   for i in range(n):break        if i in [0,n-1]:break            print(n*"# ")break        else:break            print("# " + (n-2)*". " + "# ")break;1;-1;30650;2017-12-03 23:06:09
1479;1620088;5;def duplication(text):break    text1 = str()break    for i in text:break        text1 += i + ibreak    return text1break;1;-1;351250;2017-12-03 23:07:49
1480;1620088;13;def string_intersection(left, right):break    for i in range(len(right)):break        if left[i] == right[i]:break            print(left[i]);1;-1;562950;2017-12-03 23:26:16
1481;1612998;37;def stars(n):break    for i in range(n):break        print("*", end="")break        if (i) %5 == 4:break            print("|", end="")break    print()break;1;-1;240050;2017-12-03 23:29:35
1482;1620088;14;def palindrom(text):break    if text == text[::-1]:break    	return Truebreak    else:break        return Falsebreak;1;-1;232450;2017-12-03 23:32:37
1483;1628813;10;def pyramid(n):break    j = 1break    s = n*2-1break    for i in range(n):break        print(s*" "+j*"# ")break        j+=2break        s-=2break    print()	break;1;-1;284250;2017-12-03 23:40:49
1484;1628813;11;def chessboard(n):break    for i in range(n):break        if i%2==1:break            print(int(n/2)*"# . ")break        if i%2==0:break            print(int(n/2)*". # ");0;-1;199250;2017-12-03 23:44:14
1485;1628813;11;def chessboard(n):break    for i in range(n):break        if i%2==0:break            print(int(n/2)*"# . ")break        if i%2==1:break            print(int(n/2)*". # ");0;-1;215050;2017-12-03 23:44:30
1486;1628813;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break    print("Desetinasobek", n*10)break;1;-1;61350;2017-12-03 23:47:37
1487;1628813;32;def near_fifty(n):break    if abs(n - 50) <= 10 or abs(n-150) <=10:break    	return Truebreak    else:break        return False;1;-1;227900;2017-12-03 23:52:15
1488;1628813;33;def impose_fine(age, beer):break    if age < 18 and beer == True:break        return Truebreak    else:break        return Falsebreak;1;-1;97000;2017-12-03 23:54:41
1489;1628813;1;def numbers(n):break    for i in range(1,n+1):break        print(i);1;-1;75300;2017-12-03 23:56:49
1490;1620088;19;def zigzag(text):break    for i in range(len(text)):break        if i % 2 == 0:break            print(text[i], ".", end = "")break    for i in range(len(text)):break        if i % 2 == 1:break            print(text[i], ".", end = "")break           b;0;-1;691550;2017-12-03 23:59:18
1491;1620088;19;def zigzag(text):break    for i in range(len(text)):break        if i % 2 == 0:break            print(text[i], ".", end = "", sep = "")break    print()break    for i in range(len(text)):break        if i % 2 == 1:break            print(".", text[i],;0;-1;797750;2017-12-04 00:01:24
1492;1628949;33;def impose_fine(age, beer):break    if age < 18 and beer:break        return Truebreak    return Falsebreak;1;-1;194050;2017-12-04 00:34:05
1493;1620867;7;def divisors(n):break    for i in range(1,n+1):break        if (n%i) == 0:break            print(i)break;1;-1;151000;2017-12-04 07:55:26
1494;1620867;2;def fibonacci(n):break    a = 0break    b = 1break    print(b)break    for i in range(n - 2):break        number = a + bbreak        a = bbreak        b = numberbreak        print(number)break;0;-1;100950;2017-12-04 07:59:45
1495;1620867;2;def fibonacci(n):break    a = 0break    b = 1break    print(b)break    for i in range(n - 1):break        number = a + bbreak        a = bbreak        b = numberbreak        print(number)break;1;-1;139900;2017-12-04 08:00:24
1496;1620867;3;def factorial(n):break    number = 1break    for i in range(1,n+1):break        number = number * ibreak    return numberbreak;1;-1;107250;2017-12-04 08:02:17
1497;1620867;18;def digit_sum(n):break	text = str(n)break    cisla = []break    for i in range(len(text)):break        cisla.append(int(text[i:i+1]))break    return (sum(cisla))break;0;-1;100750;2017-12-04 08:14:48
1498;1620867;20;def divisors_count(n):break    x = 0break    for i in range(2, n):break        if (n%i) == 0:break            x += ibreak    return ibreak            break;0;-1;289100;2017-12-04 08:20:31
1499;1620867;20;def divisors_count(n):break    x = 0break    for i in range(2, n-2):break        if (n%i) == 0:break            x += ibreak    return ibreak            break;0;-1;309850;2017-12-04 08:20:52
1500;1611806;6;def nonzero_product(numbers):break    prod = 1break    for i in numbers:break        if i != 0:break            prod *= ibreak    return prodbreak;1;-1;150300;2017-12-04 08:22:35
1501;1629545;5;def duplication(text):break    result = []break    for i in range(len(text)):break        result.append(2*text[i])break    result = "".join(result)break    return result;1;-1;625500;2017-12-04 09:28:08
1502;1629545;4;def alphabet(n):break    for i in range(n):break        print(chr((i%26)+65))break;1;-1;226900;2017-12-04 09:31:59
1503;1629630;31;def find_longest_word(words_list):break    return "prase"break;0;-1;17750;2017-12-04 09:49:34
1504;1629630;31;def find_longest_word(words_list):break    return sorted(key=lambda x: len(x))[0]break;0;-1;58200;2017-12-04 09:50:15
1505;1629630;31;def find_longest_word(words_list):break    return sorted(words_list, key=lambda x: len(x))[0]break;0;-1;72000;2017-12-04 09:50:28
1506;1629630;31;def find_longest_word(words_list):break    return sorted(words_list, key=lambda x: len(x), reverse=True)[0]break;0;-1;84750;2017-12-04 09:50:41
1507;1358252;34;def multiples(n):break    print("Dvojnasobek", n)break;0;-1;42500;2017-12-04 10:19:39
1508;1629686;34;def multiples(n):break    print("Dvojnasobek", 2*n)break    print("Trojnasobek", 3*n)break    print("Desetinasobek", 10*n)break;1;-1;597550;2017-12-04 10:32:02
1509;1629686;32;def near_fifty(n):break    values= [50, 150]break    for i in values:break    	if(n<= i+ 10 and n>= i-10):break    		return Truebreak    return Falsebreak;1;-1;216400;2017-12-04 10:35:45
1510;1629686;33;def impose_fine(age, beer):break    if(age< 18 and beer== True):break        return Truebreak    return Falsebreak;1;-1;69750;2017-12-04 10:37:15
1511;1629686;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(j+1, end=" ")break        print()break;1;-1;99300;2017-12-04 10:39:18
1512;1629686;36;def products(n):break    for row in range(1, n+1):break        for col in range(1, n+1):break            print(row*col, end=" ")break        print()break;1;-1;130300;2017-12-04 10:41:31
1513;1629707;6;def nonzero_product(numbers):break    result = 1break    for i in numbers:break        if i != 0:break            result *= ibreak    return resultbreak;1;-1;120000;2017-12-04 10:42:19
1514;1629686;37;def stars(n):break    for i in range(1, n+1):break        print("*", end="")break        if (i % 5 == 0):break            print("|", end="")break    print()break;1;-1;175550;2017-12-04 10:44:30
1515;1629707;15;def every_second_number(num_list):break    for i in range(0, len(num_list)):break        if i % 2 == 0:break            print(num_list[i])break;1;-1;139600;2017-12-04 10:44:53
1516;1620622;32;def near_fifty(n):break    if abs((n-50))<=10 or abs((n-150))<=10:break        return Truebreak    return Falsebreak;1;-1;92750;2017-12-04 10:46:45
1517;1629707;16;def max_pair_sum(num_list):break    result = 0break    for i in range(0, len(num_list) - 1):break        x = num_list[i] + num_list[i + 1]break        if x > result:break            result = xbreak    return resultbreak;1;-1;118050;2017-12-04 10:47:07
1518;1629707;17;def five_multiples(num_list):break    result = []break    for i in num_list:break        if i % 5 == 0:break            result.append(i)break    return resultbreak;1;-1;70350;2017-12-04 10:48:20
1519;1629707;29;def unique(mylist):break    result = []break    for i in mylist:break        if i not in result:break            result.append(i)break    return resultbreak;1;-1;82100;2017-12-04 10:49:50
1520;1629686;38;def cross(n):    break    for i in range(3*n):break        for j in range(3*n):break            if ((j >= n and j <= n+ n-1)or(i >= n and i <= n+ n- 1)):break                print("#", end="")break            else:break                print(".", end=;1;-1;331200;2017-12-04 10:50:04
1521;1629686;6;def nonzero_product(numbers):break    result= 1break    for i in numbers:break        if (i != 0):break            result*= ibreak    return resultbreak;1;-1;111800;2017-12-04 10:52:47
1522;1629686;15;def every_second_number(num_list):break    for i in range(len(num_list)):break        if(i % 2 == 0):break    		print(num_list[i])break;1;-1;130050;2017-12-04 10:55:01
1523;1629707;30;def most_common(mylist):break    freq = {}break    for i in mylist:break        if i in freq:break            freq[i] += 1break        else:break            freq[i] = 1break    result = []break    for i in freq:break        if freq[i] == max(freq.val;1;-1;542900;2017-12-04 11:23:24
1524;1629707;31;def find_longest_word(words_list):break    dict = {}break    for i in words_list:break        dict[i] = len(i)break    for i in dict:break        if dict[i] == max(dict.values()):break            return ibreak;0;-1;186350;2017-12-04 11:26:42
1525;1629707;31;def find_longest_word(words_list):break    alist = [len(i) for i in words_list]break    for i in range(len(alist)):break        if alist[i] == max(alist):break            return words_list[i]break;1;-1;343400;2017-12-04 11:29:19
1526;1629707;4;def alphabet(n):break    for i in range(n):break        if (ord("A") + i) > (ord("Z")):break            print(chr(ord("A") + i - (ord("Z") - ord("A") + 1)))break        else:break        	print(chr(ord("A") + i))break;0;-1;457650;2017-12-04 11:41:28
1527;1629707;4;def alphabet(n):break    level = 0break    for i in range(n):break        if (ord("A") + i) > (ord("Z")):break            level += 1break        else:break        	print(chr(ord("A") + i - (26 * level)))break;0;-1;538050;2017-12-04 11:42:48
1528;1629707;4;def alphabet(n):break    level = 0break    for i in range(n):break        if (ord("A") + i - (26 * level)) > (ord("Z")):break            level += 1break        print(chr(ord("A") + i - (26 * level)))break;1;-1;721650;2017-12-04 11:45:52
1529;1629707;5;def duplication(text):break    return "".join([i * 2 for i in text])break;1;-1;44250;2017-12-04 11:46:46
1530;1629992;34;def multiples(n):break    print("Dvojnasobek", 2*n)break    print("Trojnasobek", 3*n)break    print("Desetinasobek", 10*n)break;1;-1;49750;2017-12-04 11:47:45
1531;1629707;13;def string_intersection(left, right):break    if len(left) > len(right):break        left, right = right, leftbreak    for i in range(len(left)):break        if left[i] == right[i]:break            print(left[i]);1;-1;239050;2017-12-04 11:50:49
1532;1629992;32;def near_fifty(n):break    if 50 - n >= -10 and 50 - n <= 10 or 150 - n >= -10 and 150 - n <= 10:break    	return Truebreak    else:break        return Falsebreak;1;-1;153100;2017-12-04 11:52:33
1533;1629707;14;def palindrom(text):break    if text == text[::-1]:break    	return Truebreak    return Falsebreak;1;-1;45850;2017-12-04 11:52:53
1534;1629992;33;def impose_fine(age, beer):break    if age <= 18 and beer == True:break        return Truebreak    else:break    	return Falsebreak;1;-1;83300;2017-12-04 11:54:02
1535;1629707;19;def zigzag(text):break    first = [i for i in text[::2]]break    second = [i for i in text[1::2]]break    print(".".join(first))break    print("." + ".".join(second) + ".")break;0;-1;311400;2017-12-04 11:58:08
1536;1629707;19;def zigzag(text):break    first = [i for i in text[::2]]break    second = [i for i in text[1::2]]break    print(".".join(first) + ("." if len(text) % 2 == 0 else ""))break    print("." + ".".join(second) + ("." if len(text) % 2 == 1 else ""))break;1;-1;433300;2017-12-04 12:00:10
1537;1629992;17;def five_multiples(num_list):break    n = []break    for i in num_list:break        if i % 5 == 0:break            n.append(i)break         break    break    return nbreak;1;-1;51300;2017-12-04 12:00:40
1538;1629707;25;def count_a(text):break    text.lower()break    result = 0break    for i in text:break        if i == "a":break            result += 1break    return resultbreak;0;-1;51250;2017-12-04 12:01:14
1539;1629707;25;def count_a(text):break    result = 0break    for i in text.lower():break        if i == "a":break            result += 1break    return resultbreak;1;-1;105700;2017-12-04 12:02:08
1540;1629707;26;def censorship(text):break    return"".join([text[i] if i % 2 == 0 else "X" for i in range(len(text))])break;1;-1;146450;2017-12-04 12:04:42
1541;1630029;1;def numbers(n):break    for i in range(n):break    	print(i+1)break;1;-1;62200;2017-12-04 12:08:20
1542;1629707;27;def first_letters(text):break    print(" ".join([i[0] for i in text.split()]))break;1;-1;322350;2017-12-04 12:10:09
1543;1629992;6;def nonzero_product(numbers):break    n = []break    x = 1break    for i in numbers:break        if i != 0:break            n.append(i)break    for i in n:break        x *= ibreak    return xbreak;1;-1;224450;2017-12-04 12:12:24
1544;1629707;34;def multiples(n):break    print("Dvojnasobek", n * 2)break    print("Trojnasobek", n * 3)break    print("Desetinasobek", n * 10)break;1;-1;62700;2017-12-04 12:13:08
1545;1629707;32;def near_fifty(n):break    if (n > 39 and n < 61) or (n > 139 and n < 161):break        return Truebreak    return Falsebreak;1;-1;104400;2017-12-04 12:14:55
1546;1630029;2;def fibonacci(n):break    if n == 0: return 0break    elif n == 1: return 1break    else: return fibonacci(n-1)+fibonacci(n-2)breakbreak    break;0;-1;232450;2017-12-04 12:15:10
1547;1629707;33;def impose_fine(age, beer):break    if age < 18 and beer:break        return Truebreak    return Falsebreak;1;-1;61100;2017-12-04 12:16:01
1548;1629707;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(j + 1, end=" ")break        print()break;1;-1;29500;2017-12-04 12:16:47
1549;1629707;36;def products(n):break    for row in range(n):break        for col in range(n):break            print((row + 1) * (col + 1), end=" ")break        print()break;1;-1;37350;2017-12-04 12:17:27
1550;1629707;37;def stars(n):break    for i in range(n):break        print("*", end="")break        if (i + 1) % 5 == 0 and i > 0:break            print("|", end="")break    print()break;1;-1;86000;2017-12-04 12:18:56
1551;1630029;2;def fibonacci(n):break    a,b = 1,1break    for i in range(n - 1):break      a,b = b, a+bbreak      print(a)breakbreak;0;-1;79900;2017-12-04 12:22:26
1552;1630029;2;def fibonacci(n):break    a,b = 0,1break    for i in range(n ):break      a,b = b, a+bbreak      print(a)breakbreak;1;-1;109400;2017-12-04 12:22:56
1553;1630029;3;def factorial(n):break    return 1 if (n < 1) else n * factorial(n-1)break;1;-1;31850;2017-12-04 12:24:06
1554;1629707;38;def cross(n):    break    for i in range(n):break        print("." * n + "#" * n + "." * n)break    for i in range(n):break        print("#" * (3 * n))break    for i in range(n):break        print("." * n + "#" * n + "." * n)break;1;-1;212250;2017-12-04 12:24:31
1555;1630029;7;def divisors(n):break    for i in range(1, n + 1):break        if n%i == 0:break    		print(i)break;1;-1;53400;2017-12-04 12:25:05
1556;1630029;18;def digit_sum(n):break    return sum(int(digit) for digit in str(n))break;1;-1;61100;2017-12-04 12:26:44
1557;1630029;20;def divisors_count(n):break    x = 0break    for i in range(1, n+1):break        if n%i == 0:break            x += 1break    return xbreak;1;-1;50550;2017-12-04 12:27:38
1558;1630029;21;def powers(base, n):break    for i in range(1, n+1):break    	print(base**i)break;1;-1;48850;2017-12-04 12:28:30
1559;1625215;33;def impose_fine(age, beer):break    if age < 18 and beer==True:break        return Truebreak    else:break        return False;1;-1;50250;2017-12-04 13:25:59
1560;1625215;37;def stars(n):break    for i in range(1, n +1):break        print("*", end="")break        if i % 5 == 0:break            print("|", end="")break    print()break;1;-1;50050;2017-12-04 13:27:10
1561;1625215;3;def factorial(n):break    if n <= 1:break        return 1break    else:break        return n * factorial(n -1)break;1;-1;46400;2017-12-04 13:28:12
1562;1627361;4;def alphabet(n):break    abc=65break    for i in range(n):break        if abc==91:break            abc=65break       	print(chr(abc))break        abc+=1;0;-1;1350100;2017-12-04 13:33:00
1563;1625215;13;def string_intersection(left, right):break    if len(left) <= len(right):break        for i in range(len(left)):break            if left[i] == right[i]:break                print(left[i])break    else:break        for i in range(len(right)):break;1;-1;753800;2017-12-04 13:44:11
1564;1625215;23;def greatest_common_divisor(a, b):break    c = 1break    for i in range(1, a + 1):break        if a % i == 0 and b % i == 0:break            c = ibreak    return c;1;-1;247700;2017-12-04 13:48:38
1565;1627361;5;def duplication(text):break    new_text=("")break    for i in range(len(text)):break    	new_text=new_text+2*text[i]break    text=new_textbreak    return textbreak;1;-1;141900;2017-12-04 13:49:27
1566;1627361;13;def string_intersection(left, right):break    for i in range(len(left)):break        if left[i]==right[i]:break            print(left[i])break            break;1;-1;236900;2017-12-04 13:53:45
1567;1625215;25;def count_a(text):break    a = text.upper()break    count = 0break    for i in range(len(a)):break        if a[i] == "A":break            count += 1break	break    return count;1;-1;457250;2017-12-04 13:56:47
1568;1627361;14;def palindrom(text):break    if text==text[::-1]:break    	return Truebreak    else:break        return Falsebreak;1;-1;75900;2017-12-04 13:57:03
1569;1625215;29;def unique(mylist):break    s = []break    for intem in mylist:break        if intem not in s:break            s.append(intem)break    break    return sbreak;1;-1;60700;2017-12-04 13:58:05
1570;1627361;19;def zigzag(text):break    for i in range(1,len(text)+1):break        if i%2!=0:break            print(text[i-1],end="")break        else:break            print(".",end="")break    print()break    for i in range(1,len(text)+1):break        if i%2==0:b;1;-1;206150;2017-12-04 14:00:41
1571;1415962;34;def multiples(n):break    x = 2*nbreak    y=3*nbreak    z=10*nbreak    print("Dvojnasobek", x)break    print("Trojnasovak", y)break    print("Desetinasobek", z)break    break;0;-1;85900;2017-12-04 14:03:13
1572;1415962;34;def multiples(n):break    x = 2*nbreak    y=3*nbreak    z=10*nbreak    print("Dvojnasobek", x)break    print("Trojnasovak", y)break    print("Desetinasobek", z)break    break;0;-1;120700;2017-12-04 14:03:48
1573;1415962;34;def multiples(n):break    x = 2*nbreak    y=3*nbreak    z=10*nbreak    print("Dvojnasobek", x)break    print("Trojnasobek", y)break    print("Desetinasobek", z)break    break;1;-1;136100;2017-12-04 14:04:03
1574;1627361;25;def count_a(text):break    n=0break    for i in range(len(text)):break        if text[i]=="A" or text[i]=="a":break            n+=1break    return nbreak;1;-1;119250;2017-12-04 14:06:24
1575;1630328;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(j + 1, end=" ")break        print()break;1;-1;102650;2017-12-04 14:06:32
1576;1630328;36;def products(n):break    for row in range(n):break        for col in range(n):break            print((row + 1) * (col + 1), end=" ")break        print()break;1;-1;27050;2017-12-04 14:08:19
1577;13849;34;def multiples(n):break    x = 2*nbreak    y = 3*nbreak    z = 10*nbreak    print("Dvojnasobek", x)break    print("Trojnasobek", y)break    print("Desetinasobek",z)break;1;-1;51350;2017-12-04 14:08:40
1578;1627361;26;def censorship(text):break    new_t=""break    for i in range(len(text)):break        if i==0 or i%2==0:break            new_t=new_t+text[i]break        if i%2==1:break            new_t=new_t+"X"break    return new_tbreak;1;-1;169800;2017-12-04 14:09:56
1579;1630328;37;def stars(n):break    for i in range(1, n + 1):break        print("*", end="")break        if i % 5 == 0:break            print("|", end="")break    print()break;1;-1;117900;2017-12-04 14:11:07
1580;1630328;38;def cross(n):    break    for i in range(3*n):break        for j in range(3*n):break            if (n <= i <= 2 * n - 1) or (n <= j <= 2 * n - 1):break                print("#", end="")break            else:break                print(".", end="")brea;1;-1;144800;2017-12-04 14:17:46
1581;1630545;35;def sequences(n):break    for i in range(1,n+1):break        for j in range(1,i+1):break            print(j, end=" ")break        print()break;1;-1;191450;2017-12-04 15:19:29
1582;1630545;36;def products(n):break    for row in range(1,n+1):break        for col in range(1,n+1):break            res=row*colbreak            print(res, end=" ")break        print()break;1;-1;77400;2017-12-04 15:21:04
1583;1619364;14;def palindrom(text):break    if text == text[::-1]:break    	return Truebreak    return Falsebreak;1;-1;64200;2017-12-04 15:25:42
1584;1619364;4;def alphabet(n):break    for i in range(n):break        print(chr(ord('A')+i%26))break;1;-1;163450;2017-12-04 15:30:20
1585;1619364;5;def duplication(text):break    storage = []break    for i in range(len(text)):break        storage += text[i]*2break    return "".join(storage)break;1;-1;231800;2017-12-04 15:34:26
1586;1619364;13;def string_intersection(left, right):break    for i in range(len(max([left,right]))-1):break        if left[i] == right[i]:break            print(left[i])break;0;-1;284800;2017-12-04 15:39:23
1587;1619364;13;def string_intersection(left, right):break    for i in range(len(max([left,right]))):break        if left[i] == right[i]:break            print(left[i])break;1;-1;299100;2017-12-04 15:39:37
1588;1625215;4;def alphabet(n):break    x = ord('A')break    for i in range(n):break        y = x + ibreak        while y > ord('Z'):break            y -= 26break        print(chr(y))break;1;-1;567600;2017-12-04 15:40:16
1589;1616747;37;def stars(n):break    for i in range(n):break        print("*", end="")break        if i == 5:break            print("|", end="")break    print()break;0;-1;15950;2017-12-04 15:47:38
1590;1630673;34;def multiples(n):break    n = n*3break    print("Trojnasobek", n)break;0;-1;107700;2017-12-04 16:14:41
1591;1630673;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break    print("Desetinasobek", n*10)break;1;-1;167100;2017-12-04 16:15:41
1592;1630673;32;def near_fifty(n):break    if abs(50-n) <= 10 or abs(150-n) <= 10:break    	return Truebreak    else:break        return Falsebreak;1;-1;252650;2017-12-04 16:19:59
1593;1630673;33;def impose_fine(age, beer):break    if age < 18 and beer == True:break        return Truebreak    else:break        return Falsebreak;1;-1;76300;2017-12-04 16:21:39
1594;1630673;35;def sequences(n):break    for i in range(n):break        for j in range(1,i+2):break            print(j, end=" ")break        print()break;1;-1;68550;2017-12-04 16:23:46
1595;1630673;36;def products(n):break    for row in range(1,n+1):break        for col in range(1,n+1):break            print(row * col, end=" ")break        print()break;1;-1;61350;2017-12-04 16:24:53
1596;1630673;37;def stars(n):break    count = 1break    for i in range(1,n+1):break        print("*", end="")break        if i == 5*count:break            count += 1break            print("|", end="")break    print()break;1;-1;145950;2017-12-04 16:27:41
1597;1630724;33;def impose_fine(age, beer):break    if age < 18:break       	if beer == True:break			return Truebreak    	else:break           	return Falsebreak    else:break    	return False;0;-1;65550;2017-12-04 16:29:09
1598;1630724;33;def impose_fine(age, beer):break    if age < 18:break        if beer == True:break            return Truebreak        else:break            return Falsebreak    else:break    	return False;1;-1;81000;2017-12-04 16:30:57
1599;1630642;34;def multiples(n):break    n = 2 * nbreak    print("Dvojnasobek", n)break;0;-1;109000;2017-12-04 16:31:52
1600;1630724;34;def multiples(n):break    print("Dvojnasobek", 2*n)break    print("Trojnasobek", 3*n)break    print("Desetinasobek", 10*n)break;1;-1;70950;2017-12-04 16:32:15
1601;1630642;34;def multiples(n):break    n = 2 * nbreak    print("Dvojnasobek", n)break;0;-1;137100;2017-12-04 16:32:20
1602;1630642;34;def multiples(n):break    n = 2*nbreak    print("Dvojnasobek", n)break;0;-1;170200;2017-12-04 16:33:47
1603;1630724;32;def near_fifty(n):break    if 140 <= n <= 160:break        return Truebreak    else:break        if 40 <= n <= 60:break            return Truebreak        else:break            return Falsebreak;1;-1;143350;2017-12-04 16:34:55
1604;1620248;33;def impose_fine(age, beer):break    if age < 18 and beer == True:break        return Truebreak    else:break        return Falsebreak;1;-1;125200;2017-12-04 16:40:21
1605;1630724;38;def cross(n):    break    for i in range(3*n):break        for j in range(3*n):break            if n<= i <= n+(n-1) or n<= j <= n+(n-1) :break                print("#", end="")break            else:break                print(".", end="")break;1;-1;243050;2017-12-04 16:44:19
1606;1620248;35;def sequences(n):break    for i in range(1,n+1):break        for j in range(1,i+1):break            print(j, end = " ")break        print()break;1;-1;175850;2017-12-04 16:44:26
1607;1630724;37;def stars(n):break    for i in range(n):break        i += 1break        print("*", end="")break        if i % 5 == 0:break            print("|", end="")break    print()break;1;-1;88500;2017-12-04 16:45:57
1608;1620248;36;def products(n):break    for row in range(1,n+1):break        for col in range(1,n+1):break            print(row * col, end=" ")break        print()break;1;-1;95000;2017-12-04 16:46:05
1609;1630724;36;def products(n):break    for row in range(n):break        for col in range(n):break            print(row+1 * col+1, end=" ")break        print()break;0;-1;38200;2017-12-04 16:47:18
1610;1630724;36;def products(n):break    for row in range(n):break        for col in range(n):break            print(row+1 * col+1, end=" ")break        print()break;0;-1;68500;2017-12-04 16:47:48
1611;1630724;36;def products(n):break    for row in range(n):break        for col in range(n):break            print(row+1 * col+1, end=" ")break        print()break;0;-1;70350;2017-12-04 16:47:50
1612;1630724;36;def products(n):break    for row in range(n):break        for col in range(n):break            print(row+1 * col+1, end=" ")break        print()break;0;-1;73650;2017-12-04 16:47:54
1613;1630724;36;def products(n):break    for row in range(n):break        for col in range(n):break            print(row * col+1, end=" ")break        print()break;0;-1;94150;2017-12-04 16:48:18
1614;1630673;1;def numbers(n):break    for i in range(1, n+1):break    	print(i)break;1;-1;30650;2017-12-04 16:50:24
1615;1630724;36;def products(n):break    for row in range(n):break        for col in range(n):break        	print((row + 1) * (col+1), end=" ")break        print()break;1;-1;103200;2017-12-04 16:51:46
1616;1620248;37;def stars(n):break    for i in range(1,n+1):break        print("*", end="")break        if i % 5 == 0:break            print("|", end="")break    print()break;1;-1;493600;2017-12-04 16:54:25
1617;1630724;35;def sequences(n):break    for i in range(n):break        i += 1break        for j in range(i):break            j += 1break            print(j, end=" ")break        print()break;1;-1;69700;2017-12-04 16:55:11
1618;1630724;1;def numbers(n):break    for i in range(n):break        i += 1break        print(i)break;1;-1;24400;2017-12-04 16:56:30
1619;1630673;4;def alphabet(n):break    for i in range(1,n+1):break        if i > 26:break            print(chr(ord("A")-27+i))break        else:break            print(chr(ord("A")-1+i))breakbreakbreak;0;-1;454950;2017-12-04 17:04:20
1620;1620248;1;def numbers(n):break    for i in range(1,n+1):break    	print(i)break;1;-1;50100;2017-12-04 17:04:51
1621;1620248;2;def fibonacci(n):break    first = 1break    second = 1break    print(first, second, end = " ")break    for i in range(n):break        third = first + secondbreak        first = secondbreak        second = thirdbreak        print(third, end = " ")brea;0;-1;226250;2017-12-04 17:09:13
1622;1620248;2;def fibonacci(n):break    first = 1break    second = 1break    for i in range(n):break        third = first + secondbreak        first = secondbreak        second = thirdbreak        print(third, end = " ")break;0;-1;262700;2017-12-04 17:09:49
1623;1620248;2;def fibonacci(n):break    first = 1break    second = 1break    print(first, second, end = " ")break    for i in range(n - 2):break        third = first + secondbreak        first = secondbreak        second = thirdbreak        print(third, end = " ");0;-1;301900;2017-12-04 17:10:28
1624;1620248;2;def fibonacci(n):break    first = 1break    second = 1break    print(first)break    print(second)break    for i in range(n - 2):break        third = first + secondbreak        first = secondbreak        second = thirdbreak        print(third)break;1;-1;341550;2017-12-04 17:11:08
1625;1620248;3;def factorial(n):break    if n == 0:break        return 1break    else:break        return n*factorial(n-1)break;1;-1;197050;2017-12-04 17:16:07
1626;1625382;25;def count_a(text):break    counter = 0break    for i in text:break        if i == "A" or i == "a":break            counter += 1break    return counterbreak;1;-1;62850;2017-12-04 17:19:06
1627;1625382;26;def censorship(text):break    result = ""break    for i in range(0, len(text)):break        if i % 2 == 0:break            result += text[i]break        elif i % 2 == 1:break            result += "X"break        break    return resultbreak;1;-1;172650;2017-12-04 17:23:19
1628;1620248;7;def divisors(n):break    divisors = []break    for i in range(1,n):break        if n % i == 0:break            divisors.append(i)break    return divisorsbreak;0;-1;383550;2017-12-04 17:24:14
1629;1620248;7;def divisors(n):break    for i in range(1,n+1):break        if n % i == 0:break            print(i)break    break;1;-1;450150;2017-12-04 17:25:20
1630;1630927;36;def products(n):break    for row in range(1, n):break        for col in range(1, n):break            print(row * col, end=" ")break        print()break;0;-1;50050;2017-12-04 17:31:38
1631;1630927;36;def products(n):break    for row in range(1, n+1):break        for col in range(1, n+1):break            print(row * col, end=" ")break        print()break;1;-1;82750;2017-12-04 17:32:11
1632;1619364;13;def string_intersection(left, right):break    for i in range(len(min([left,right], key=len))):break        if left[i] == right[i]:break            print(left[i]);0;-1;1698800;2017-12-04 17:36:33
1633;1619364;19;def zigzag(text):break    for i in range(len(text)):break        if i%2==0:break            print(text[i], end="")break        else:break            print(".", end="")break    print()break    for i in range(len(text)):break        if i%2==1:break;1;-1;181600;2017-12-04 17:40:04
1634;1630724;2;def fibonacci(n):break    x1 = 1break    x2 = 1break    print(x1)break    print(x2)break    for i in range(n-2):break        x3 = x1 + x2break        print(x3)break        x1 = x2break        x2 = x3;1;-1;160400;2017-12-04 17:42:22
1635;1620248;18;def digit_sum(n):break    result = 0break    while n > 0:break        result = result + n % 10break        n = n // 10break    return resultbreak;1;-1;41000;2017-12-04 17:42:28
1636;1630724;3;def factorial(n):break    f = 1break    for i in range(1,n+1):break        f *= ibreak    return fbreak;1;-1;39050;2017-12-04 17:43:15
1637;1619364;25;def count_a(text):break    count = 0break    for s in text:break        if s == "a" or s == "A":break            count +=1break    return countbreak;1;-1;170250;2017-12-04 17:43:31
1638;1630927;32;def near_fifty(n):break    if 40 <= n <= 60 or 140 <= n <= 160:break        return Truebreak    else:break    	return Falsebreak;1;-1;133400;2017-12-04 17:43:47
1639;1630724;7;def divisors(n):break    for i in range(1,n+1):break        if n % i == 0:break   			 print(i)break;1;-1;52400;2017-12-04 17:44:18
1640;1630724;18;def digit_sum(n):break    cs = 0break    for cifra in str(n):break        cs += int(cifra)break    return csbreak;1;-1;54000;2017-12-04 17:45:18
1641;1630724;20;def divisors_count(n):break    pd = 0break    for i in range(1,n+1):break        if n % i == 0:break            pd += 1break    return pdbreak;1;-1;32200;2017-12-04 17:45:56
1642;1619364;26;def censorship(text):break    censored = []break    for i in range(len(text)):break        if i%2==0:break            censored += text[i]break        else:break            censored += "X"break    return "".join(censored)break;1;-1;142450;2017-12-04 17:46:02
1643;1630830;11;def chessboard(n):break    for i in range(n):break        print("#", end=" ")break    print()break;0;-1;17450;2017-12-04 17:47:35
1644;1630830;11;def chessboard(n):break    for i in range(n):break        print("#", end=".")break    print()break;0;-1;65250;2017-12-04 17:48:33
1645;1630724;21;def powers(base, n):break    x = 1break    for i in range(1,n+1):break        x *= basebreak        print(x)break;1;-1;161000;2017-12-04 17:48:40
1646;1630830;11;def chessboard(n):break    for i in range(n):break        print(".", end=".")break    print()break;0;-1;77650;2017-12-04 17:48:47
1647;1630724;22;def print_primes(n):break    i = 0break    p = 2break    while i == n:break        check = 1break        for j in range(2,p):break            if p % j == 0:break                check = 0break        if check == 1:break            i += 1break;0;-1;176550;2017-12-04 17:51:46
1648;1630724;22;def print_primes(n):break    i = 0break    p = 2break    while i != n:break        check = 1break        for j in range(2,p):break            if p % j == 0:break                check = 0break        if check == 1:break            i += 1break;1;-1;339550;2017-12-04 18:02:20
1649;1630724;23;def greatest_common_divisor(a, b):break    gcd = 0break    ab = min(a,b)break    for i in range(1,ab+1):break        if a % i == 0:break            if b % i == 0:break                if gcd < i:break                    gcd = ibreak    return gcdbreak;1;-1;327350;2017-12-04 18:07:57
1650;1630724;8;def square(n):break    for i in range(n):break        for j in range(n):break        	print("#", end=" ")break        print()break;1;-1;44350;2017-12-04 18:08:56
1651;1630724;9;def empty_square(n):break    for i in range(n):break        print("#", end=" ")break    print()break    for i in range(n-2):break        print("#", end=" ")break        for i in range(n-2):break            print(".", end=" ")break        print("#", e;0;-1;166650;2017-12-04 18:11:46
1652;1630724;9;def empty_square(n):break    for i in range(n):break        print("#", end=" ")break    print()break    for i in range(n-2):break        print("#", end=" ")break        for i in range(n-2):break            print(".", end=" ")break        print("#", e;0;-1;170900;2017-12-04 18:11:50
1653;1630724;9;def empty_square(n):break    for i in range(n):break        print("#", end=" ")break    print()break    for i in range(n-2):break        print("#", end=" ")break        for i in range(n-2):break            print(".", end=" ")break        print("#", e;0;-1;3250;2017-12-04 18:12:08
1654;1630724;9;def empty_square(n):break    print("#")break;0;-1;22700;2017-12-04 18:12:27
1655;1630724;9;def empty_square(n):break    def empty_square(n):break    for i in range(n):break        print("#", end=" ")break    print()break    for i in range(n-2):break        print("#", end=" ")break        for i in range(n-2):break            print(".", end=;0;-1;27150;2017-12-04 18:12:31
1656;1630724;9;def empty_square(n):break    for i in range(n):break        print("#", end=" ")break    print()break    for i in range(n-2):break        print("#", end=" ")break        for i in range(n-2):break            print(".", end=" ")break        print("#", e;0;-1;35050;2017-12-04 18:12:39
1657;1630724;9;def empty_square(n):break    if n = 1:break        print("#")break    else:break    	for i in range(n):break        	print("#", end=" ")break    	print()break    	for i in range(n-2):break        	print("#", end=" ")break        	for i in range(n-2):;0;-1;70100;2017-12-04 18:13:14
1658;1630724;9;def empty_square(n):break    if n == 1:break        print("#")break    else:break    	for i in range(n):break        	print("#", end=" ")break    	print()break    	for i in range(n-2):break        	print("#", end=" ")break        	for i in range(n-2);1;-1;75250;2017-12-04 18:13:20
1659;1620248;4;def alphabet(n):break	for i in range(n):break		print(chr(ord("A")+i%26))break            break        break;1;-1;1351500;2017-12-04 18:20:21
1660;1631081;4;def alphabet(n):break    a = 65break    for i in range(n):break        print(chr(a))break        a = a+1break        if a > 90:break            a = a - 26break;1;-1;447450;2017-12-04 18:25:57
1661;1620248;38;def cross(n):    break    for i in range(3*n):break        for j in range(3*n):break            if (i > n-1 and i < 2*n) or (j > n-1 and j < 2*n):break                print("#", end="")break            else:break                print(".", end="")brea;1;-1;238350;2017-12-04 18:28:19
1662;1631228;4;def alphabet(n):break    for i in range(n):break        print('A')break;0;-1;46850;2017-12-04 18:49:39
1663;1631228;34;def multiples(n):break    print("Dvojnasobek", n)break;0;-1;87800;2017-12-04 18:52:09
1664;1631228;34;def multiples(n):break    print("Dvojnasobek", n)break;0;-1;26300;2017-12-04 18:52:43
1665;1631228;34;def multiples(n):break    print("Dvojnasobek", n)break;0;-1;67300;2017-12-04 18:53:24
1666;1631228;34;def multiples(n):break    print("Dvojnasobek", n)break;0;-1;39150;2017-12-04 18:54:35
1667;1631228;34;def multiples(n):break    print("Dvojnasobek", n)break;0;-1;61450;2017-12-04 18:54:57
1668;1631228;34;def multiples(7):break    print("14", 7)break;0;-1;21600;2017-12-04 18:55:47
1669;1631228;34;def multiples(7):break    print("14", 7)break;0;-1;22950;2017-12-04 18:55:48
1670;1631228;34;def multiples(7):break    print("14", 7)break;0;-1;23900;2017-12-04 18:55:49
1671;1631228;34;def multiples(7):break    print("14", 7)break;0;-1;26050;2017-12-04 18:55:51
1672;1631228;34;def multiples(7):break    print("14", 7)break;0;-1;27200;2017-12-04 18:55:53
1673;1631228;34;def multiples(n):break    print("Dvojnasobek", n)breakmultiples(7)breakprint("14",7);0;-1;42450;2017-12-04 18:56:39
1674;1631228;34;def multiples(n):break    print("Dvojnasobek", n)breakmultiples(7)breakprint("14",7);0;-1;44550;2017-12-04 18:56:41
1675;1631228;34;def multiples(n):break    print("Dvojnasobek", n)breakmultiples(7)breakprint("14",7);0;-1;58800;2017-12-04 18:56:55
1676;1631235;34;def multiples(n): x + ybreak    print("Dvojnasobek", n)break;0;-1;96600;2017-12-04 18:57:23
1677;1631235;34;def multiples(n): x + ybreak    print("Dvojnasobek", n)break;0;-1;101100;2017-12-04 18:57:27
1678;1625382;30;def most_common(mylist):break    hist = {}break    for i in mylist:break        if i in hist:break            hist[i] += 1break        else:break            hist[i] = 1break    celkem = 0break    prvek = 0break    for i in hist.keys():break        if;1;-1;727950;2017-12-04 18:58:14
1679;1631228;33;def impose_fine(age,beer):break    return Truebreakdef impose_fine(age,beer)breakreturn falsebreakbreak;0;-1;191550;2017-12-04 19:00:37
1680;1631228;34;def multiples(n):break    print("Dvojnasobek", n)breakdef multiple(7):break    print("14",7);0;-1;42500;2017-12-04 19:01:34
1681;1631228;34;def multiples(n):break    print("Dvojnasobek", n)breakdef multiple(5):break    print("14",7);0;-1;57450;2017-12-04 19:01:49
1682;1631228;34;def multiples(n):break    print("Dvojnasobek", n)breakmultiple(5):break    print("14",7);0;-1;68500;2017-12-04 19:02:00
1683;1631228;34;def multiples(7):break    print("14", 7)break;0;-1;102800;2017-12-04 19:03:56
1684;1631228;34;def multiples(5):break    print("5",10)break;0;-1;131800;2017-12-04 19:04:26
1685;1631228;34;def multiples(5)break    print("5",10)break;0;-1;149500;2017-12-04 19:04:43
1686;1618992;34;def multiples(n):break    n = 2 * nbreak    print("Dvojnasobek", n)break;0;-1;16950;2017-12-04 19:06:30
1687;1630844;8;def square(n):break    for i in range(n):break        print("#", end=" ")break    print()break;0;-1;14900;2017-12-04 19:07:44
1688;1630844;6;def nonzero_product(numbers):break    return 0break;0;-1;12800;2017-12-04 19:09:09
1689;1630844;6;def nonzero_product(numbers):break    return 0break;0;-1;16050;2017-12-04 19:09:12
1690;1630844;6;def nonzero_product(numbers):break    return 0break;0;-1;17250;2017-12-04 19:09:13
1691;1618992;34;def multiples(n):break    print("Dvojnasobek", n * 2)break	print("Trojnasobek", n * 3)break    print("Desetinasobek", n * 10);0;-1;36700;2017-12-04 19:09:22
1692;1631081;5;def duplication(text):break    text = list(text)break    text1 = ""break    for i in range(len(text)):break        text[i] = text[i]*2break    text1 = "".join(str(a) for a in text)break    return text1break;1;-1;1788550;2017-12-04 19:22:08
1693;1628813;12;def bigX(n):break    a=(n*2)-3break    for i in range(n-1):break        print(i*"  "+"# "+a*"  "+"#")break        a-=2break    print((2*n-2)*" "+"#")break    b=1break    c=2*n-4break    for i in range(n-1):break        print(c*" "+"# "+b*"  "+"#")bre;1;-1;1402000;2017-12-04 19:22:21
1694;1631081;13;def string_intersection(left, right):break    if len(left)<len(right):break        temp = leftbreak    else:break        temp = rightbreak    for i in range (len(temp)):break        if left[i] == right[i]:break            print(left[i])break;1;-1;274650;2017-12-04 19:26:46
1695;1631081;14;def palindrom(text):break    if text == text[::-1]:break    	return Truebreak    else:break        return Falsebreak;1;-1;37050;2017-12-04 19:27:34
1696;1628813;3;def factorial(n):break	num = 1break	while n >= 1:break		num = num * nbreak		n = n - 1break	return num;1;-1;214750;2017-12-04 19:27:50
1697;1631412;35;def sequences(n):break    for i in range(n):break        for j in range(1,i+2):break            print(j, end=" ")        break        print()break;1;-1;106350;2017-12-04 19:39:44
1698;1631412;36;def products(n):break    for row in range(1,n+1):break        for col in range(1,n+1):break            print(row * col, end=" ")break        print()break;1;-1;64900;2017-12-04 19:40:53
1699;1631412;37;def stars(n):break    for i in range(1,n+1):break        print("*", end="")break        if i % 5 == 0:break            print("|", end="")break    print()break;1;-1;32450;2017-12-04 19:41:28
1700;1628813;7;def divisors(n):break    num=1break    while num<=n:break        if n%num==0:break            print(num)break        num+=1break;1;-1;657400;2017-12-04 19:45:39
1701;1618913;33;def impose_fine(age, beer):break    if age < 18 and beer == True:break        return Truebreak    return Falsebreak;1;-1;78700;2017-12-04 19:46:17
1702;1618913;34;def multiples(n):break    print("Dvojnasobek", n * 2)break	#print("Trojnasobek", n * 3)break    #print("Desetinasobek", n * 10);0;-1;143300;2017-12-04 19:48:44
1703;1618913;34;def multiples(n):break    print("Dvojnasobek", n * 2)break	#print("Trojnasobek", n * 3)break    #print("Desetinasobek", n * 10);0;-1;151400;2017-12-04 19:48:52
1704;1618913;34;def multiples(n):break    print("Dvojnasobek", n * 2)break    print("Trojnasobek", n * 3)break	print("Desetinasobek", n * 10);0;-1;139250;2017-12-04 19:51:41
1705;1619441;33;def impose_fine(age, beer):break    if age <= 18 and beer == True:break    	return Truebreak    return Falsebreak;1;-1;119000;2017-12-04 20:12:37
1706;1628813;15;def every_second_number(num_list):break    x=0break    while x<int(len(num_list)):break        if x%2==0:break            print(num_list[x])break        x+=1;1;-1;618550;2017-12-04 20:14:21
1707;1628813;6;def nonzero_product(numbers):break    x=1break    for i in range(len(numbers)):break        if int(numbers[i])>0:break            x=x*numbers[i]break        else:break           	i+=1break    print(x);0;-1;405200;2017-12-04 20:21:21
1708;1628813;6;def nonzero_product(numbers):break    x=1break    for i in range(len(numbers)):break        if int(numbers[i])>0:break            x=x*numbers[i]break        else:break           	i+=1break    return x;0;-1;419600;2017-12-04 20:21:35
1709;1628813;6;def nonzero_product(numbers):break    x=1break    for i in range(len(numbers)):break        if int(numbers[i])!=0:break            x=x*numbers[i]break        else:break           	i+=1break    return x;1;-1;436550;2017-12-04 20:21:52
1710;1631502;34;def multiples(n):break    print("Dvojnasobek", 2*n)break    print("Trojnasobek", 3*n)break    print("Desetinasobek", 10*n)break;1;-1;71150;2017-12-04 20:22:43
1711;1631502;32;def near_fifty(n):break    return n>39 & n>139 & n<61 & n<161break;0;-1;81250;2017-12-04 20:24:08
1712;1631502;32;def near_fifty(n):break    return (n>39 & n<61) || (  n<161 & n>139)break;0;-1;127250;2017-12-04 20:24:54
1713;1631502;32;def near_fifty(n):break    return (n>39 & n<61) or (  n<161 & n>139)break;0;-1;141000;2017-12-04 20:25:07
1714;1631606;34;def multiples(n):break    print("Dvojnasobek", 2*n)break	print("Trojnasobek", 3*n)break    print("Desetinasobek", 10*n);0;-1;45150;2017-12-04 20:28:47
1715;1618913;32;def near_fifty(n):break    if abs(50 - n) <= 10 or abs(150 - n) <= 10:break        return Truebreak    return Falsebreak;1;-1;116450;2017-12-04 20:29:00
1716;1627452;6;def nonzero_product(numbers):break    result = 1break    for i in numbers:break        if i != 0:break       		result = result * ibreak    return resultbreak;1;-1;281050;2017-12-04 20:29:27
1717;1628813;16;def max_pair_sum(num_list):break    i=0break    a=[]break    while i+1<len(num_list):break        x=num_list[i]+num_list[i+1]break        a.append(x)break        i+=1break    return max(a)break        break;1;-1;358000;2017-12-04 20:29:27
1718;1618913;35;def sequences(n):break    for i in range(1,n+1):break        for j in range(1,i+1):break            print(j, end=" ")break        print()break;1;-1;76150;2017-12-04 20:30:31
1719;1631606;34;def multiples(n):break    print("Dvojnasobek", 2*n)break    print("Trojnasobek", 3*n)break    print("Desetinasobek", 10*n);1;-1;143000;2017-12-04 20:30:51
1720;1628813;17;def five_multiples(num_list):break    a=[]break    for i in range(len(num_list)):break        if num_list[i]%5==0:break            a.append(num_list[i])break        i+=1break    return abreak;1;-1;145150;2017-12-04 20:31:58
1721;1631606;32;def near_fifty(n):break    return (39<n<61) or (139<n<161)break;1;-1;64000;2017-12-04 20:32:01
1722;1618913;37;def stars(n):break    for i in range(1,n+1):break        print("*", end="")break        if i % 5 == 0:break            print("|", end="")break    print()break;1;-1;92600;2017-12-04 20:32:08
1723;1631412;1;def numbers(n):break    for i in range(1,n+1):break    	print(i)break;1;-1;34850;2017-12-04 20:33:22
1724;1631606;33;def impose_fine(age, beer):break    return (beer and age<18)break;1;-1;87100;2017-12-04 20:33:31
1725;1631606;35;def sequences(n):break    for i in range(1,n+1):break        for j in range(1,i+2):break            print(j, end=" ")break        print()break;0;-1;55850;2017-12-04 20:34:43
1726;1631606;35;def sequences(n):break    for i in range(1,n+1):break        for j in range(1,i+1):break            print(j, end=" ")break        print()break;1;-1;65800;2017-12-04 20:34:53
1727;1631412;2;def fibonacci(n):break    j = 0break    for i in range(1,n+1):break    	j +=ibreak    	print(j)break;0;-1;139400;2017-12-04 20:35:48
1728;1631412;2;def fibonacci(n):break    j = 0break    for i in range(1,n+1):break    	j +=ibreak    	print(j)break;0;-1;145350;2017-12-04 20:35:54
1729;1631606;36;def products(n):break    for row in range(1,n+1):break        for col in range(1,n+1):break            print(row * col, end=" ")break        print()break;1;-1;136250;2017-12-04 20:37:12
1730;1631606;37;def stars(n):break    for i in range(1,n+1):break        print("*", end="")break        if i % 5==0:break            print("|", end="")break    print()break;1;-1;65800;2017-12-04 20:38:21
1731;1618913;1;def numbers(n):break    for i in range(1,n+1):break    	print(i)break;1;-1;51550;2017-12-04 20:38:37
1732;1621276;34;def multiples(n):break    print("Dvojnasobek", 2*n)break    print("Trojnasobek", 3*n)break    print("Desetinasobek", 10*n)break;1;-1;31300;2017-12-04 20:39:58
1733;1631628;6;def nonzero_product(numbers):break    total = 1break    for number in numbers:break        if number != 0:break            total *= numberbreak    return totalbreak;1;-1;40000;2017-12-04 20:40:15
1734;1628813;29;def unique(mylist):break    a=[]break    for i in range(len(mylist)):break        if mylist[i] in a:break            i+=1break        else:break            a.append(mylist[i])break    return abreak;1;-1;196450;2017-12-04 20:41:51
1735;1621276;32;def near_fifty(n):break    if (n < 60 and n > 40) or (n <= 160 and n > 140):break		return Truebreak    else:break        return Falsebreak;0;-1;133750;2017-12-04 20:42:15
1736;1621276;32;def near_fifty(n):break    if (n <= 60 and n >= 40) or (n <= 160 and n >= 140):break		return Truebreak    else:break        return Falsebreak;1;-1;147100;2017-12-04 20:42:28
1737;1621276;33;def impose_fine(age, beer):break    if age < 18 and beer:break    	return Truebreak    else:break        return Falsebreak;1;-1;62300;2017-12-04 20:43:33
1738;1627452;15;def every_second_number(num_list):break    i = 0break    print(num_list[i])break    for _ in range(1, len(num_list)-2):break        i += 2break        print(num_list[i])break;1;-1;678350;2017-12-04 20:43:51
1739;1618913;2;def fibonacci(n):break    first = 1break    second = 1break    print(first)break    print(second)break    for i in range(n-2):break        result = first + secondbreak        print(result)break        first = secondbreak        second = resultbreak;1;-1;293800;2017-12-04 20:43:57
1740;1631412;3;def factorial(n):break    if n>= 1:break        return n*factorial(n-1)break    else:break        return 1;1;-1;147000;2017-12-04 20:44:49
1741;1631606;1;def numbers(n):break    for i in range(1,n+1):break    	print(i)break;1;-1;29400;2017-12-04 20:45:17
1742;1621276;35;def sequences(n):break    for i in range(1, n+1):break        for j in range(1,i+1):break            print(j, end=" ")break        print()break;1;-1;41750;2017-12-04 20:45:34
1743;1621276;36;def products(n):break    for row in range(1, n+1):break        for col in range(1,n+1):break            print(row * col, end=" ")break        print()break;1;-1;33400;2017-12-04 20:46:10
1744;1631412;7;def divisors(n):break    for i in range(1,n+1):break        if n%i == 0:break        	print(i)break;1;-1;74150;2017-12-04 20:46:10
1745;1631628;15;def every_second_number(num_list):break    i = 0break    for number in num_list:break        i += 1break        if i % 2 != 0:break			print(number)break;1;-1;149550;2017-12-04 20:46:12
1746;1618913;3;def factorial(n):break    if n == 1:break        return 1break    else:break        f = n * factorial(n-1)break    return fbreak;1;-1;160450;2017-12-04 20:46:42
1747;1627452;16;def max_pair_sum(num_list):break    max_pair = 0break    for i in range(len(num_list)-1):break        if (num_list[i] + num_list[i+1]) > max_pair:break            max_pair = (num_list[i] + num_list[i+1])break    return max_pairbreak;1;-1;168950;2017-12-04 20:46:56
1748;1621276;37;def stars(n):break    for i in range(1,n+1):break        print("*", end="")break        if i%5 == 0:break            print("|", end="")break    print()break;1;-1;54450;2017-12-04 20:47:07
1749;1618913;7;def divisors(n):break    for i in range(1,n+1):break        if n % i == 0:break            print(i)break    break;1;-1;44000;2017-12-04 20:47:30
1750;1631606;3;def factorial(n):break    if n==0:break        return 1break    return n*factorial(n-1)break;1;-1;48350;2017-12-04 20:47:41
1751;1627452;17;def five_multiples(num_list):break    result = []break    for number in num_list:break        if number % 5 == 0:break            result.append(number)break    return resultbreak;1;-1;97700;2017-12-04 20:48:48
1752;1631606;7;def divisors(n):break    for i in range(1,n+1):break        if n%i==0:break            print(i)break;1;-1;46300;2017-12-04 20:48:53
1753;1621276;38;def cross(n):    break    for i in range(3*n):break        for j in range(3*n):break            if (i >= n and i < 2*n) or (j >= n and j < 2*n):break                print("#", end="")break            else:break                print(".", end="")break;1;-1;154950;2017-12-04 20:49:45
1754;1631606;2;def fibonacci(n):break   if n < 2:break       return nbreak   else:break       return(fibonacci(n-1) + fibonacci(n-2))break;0;-1;57300;2017-12-04 20:50:18
1755;1627452;29;def unique(mylist):break    result = []break    for number in mylist:break        if number not in result:break            result.append(number)break    return resultbreak;1;-1;88400;2017-12-04 20:50:20
1756;1621276;1;def numbers(n):break    for i in range(1, n+1):break    	print(i)break;1;-1;25650;2017-12-04 20:50:29
1757;1631628;16;def max_pair_sum(num_list):break    tuplemax = num_list[0] + num_list[1]break    break    for i in range(2, len(num_list) - 1):break        if num_list[i] + num_list[i - 1] > tuplemax:break            tuplemax = num_list[i] + num_list[i - 1]break;0;-1;251200;2017-12-04 20:51:09
1758;1618913;31;def find_longest_word(words_list):break    max_len = len(words_list[0])break    for i in range(1,len(words_list)):break        if len(words_list[i]) > max_len:break            max_len = len(words_list[i])break            a = ibreak    return words_li;0;-1;272850;2017-12-04 20:53:25
1759;1618913;31;def find_longest_word(words_list):break    a = 0break    max_len = len(words_list[0])break    for i in range(1,len(words_list)):break        if len(words_list[i]) > max_len:break            max_len = len(words_list[i])break            a = ibreak    r;1;-1;294750;2017-12-04 20:53:47
1760;1631628;16;def max_pair_sum(num_list):break    tuplemax = num_list[0] + num_list[1]break    break    for i in range(2, len(num_list)):break        if num_list[i] + num_list[i - 1] > tuplemax:break            tuplemax = num_list[i] + num_list[i - 1]break    retu;1;-1;520500;2017-12-04 20:55:38
1761;1618913;6;def nonzero_product(numbers):break    result = 1break    for x in numbers:break        if x != 0:break            result *= xbreak    return resultbreak;1;-1;137500;2017-12-04 20:56:07
1762;1631652;35;def sequences(n):break    for i in range(1,n+1):break        for j in range(1,i+1):break            print(j, end=" ")break        print()break;1;-1;15350;2017-12-04 20:57:00
1763;1631628;17;def five_multiples(num_list):break    alist = []break    for number in num_list:break        if number % 5 == 0:break            alist.append(number)break    return alistbreak;1;-1;79900;2017-12-04 20:57:11
1764;1631652;36;def products(n):break    for row in range(1,n+1):break        for col in range(1,n+1):break            print(row * col, end=" ")break        print()break;1;-1;44600;2017-12-04 20:57:48
1765;1631652;37;def stars(n):break    for i in range(1,n+1):break        print("*", end="")break        if i % 5 == 0:break            print("|", end="")break    print()break;1;-1;47600;2017-12-04 20:58:40
1766;1618913;15;def every_second_number(num_list):break    for i in range(0,len(num_list),2):break    	print(num_list[i])break;1;-1;30650;2017-12-04 20:58:40
1767;1631606;18;def digit_sum(n):break    summ=0break    while n>10:break        summ+=n%10break        n=n//10break    summ+=nbreak    return summbreak        break;0;-1;137950;2017-12-04 20:58:47
1768;1631606;18;def digit_sum(n):break    summ=0break    while n>=10:break        summ+=n%10break        n=n//10break    summ+=nbreak    return summbreak        break;1;-1;155400;2017-12-04 20:59:04
1769;1631628;29;def unique(mylist):break    newlist = []break    for number in mylist:break        if number not in newlist:break            newlist.append(number)break    return newlistbreak;1;-1;133900;2017-12-04 20:59:29
1770;1631606;20;def divisors_count(n):break    divisors=0break    for i in range(1,n+1):break        if n%i==0:break            divisors+=1break    return divisorsbreak;1;-1;54700;2017-12-04 21:00:12
1771;1618913;16;def max_pair_sum(num_list):break    maxim = num_list[0] + num_list[1]break    for i in range(1,len(num_list)-1):break        res = num_list[i] + num_list[i+1]break        if res > maxim:break            maxim = resbreak    return maximbreak;1;-1;204300;2017-12-04 21:04:06
1772;1631606;21;def powers(base, n):break    x=1break    for i in range(1,n+1):break        for j in range(i):break            x*=basebreak    	print(base)break            break            break;0;-1;278650;2017-12-04 21:06:33
1773;1631606;21;def powers(base, n):break    x=1break    for i in range(1,n+1):break        x*=basebreak        print(x)break            break            break;1;-1;326500;2017-12-04 21:07:20
1774;1631628;30;def most_common(mylist):break    common = {}break    for number in mylist:break        if number not in common:break            common[number] = 1break        else:break            common[number] += 1break    maxlist = [-99999999999999]break    for k;0;-1;552400;2017-12-04 21:08:44
1775;1631606;8;def square(n):break    for i in range(n):break        for j in range(n):break        	print("#", end=" ")break    	print()break;0;-1;91150;2017-12-04 21:09:33
1776;1631628;30;def most_common(mylist):break    common = {}break    for number in mylist:break        if number not in common:break            common[number] = 1break        else:break            common[number] += 1break    maxlist = [-99999999999999]break    for k;0;-1;603900;2017-12-04 21:09:36
1777;1618913;17;def five_multiples(num_list):break    s = []break    for i in range(len(num_list)):break        if num_list[i] % 5 == 0:break            s.append(num_list[i])break    return sbreak;1;-1;62450;2017-12-04 21:09:51
1778;1621276;3;def factorial(n):break    suu = 1break    for i in range(1, n+1):break        suu *= ibreak    return suubreak;1;-1;308350;2017-12-04 21:09:55
1779;1631606;8;def square(n):break    for i in range(n):break        for k in range(n):break            print("#", end= " ")break        print()break;1;-1;130500;2017-12-04 21:10:12
1780;1627452;30;def most_common(mylist):break    counts = {}break    for number in mylist:break        if number not in counts:break            counts[number] = 1break        else:break            counts[number] += 1break    print(max(counts.values()));0;-1;71450;2017-12-04 21:10:54
1781;1621276;7;def divisors(n):break    for i in range(1, n+1):break    	if n%i == 0:break    		print(i)break;1;-1;46400;2017-12-04 21:11:48
1782;1631705;35;def sequences(n):break    for i in range(1,n+1):break        for j in range(1,i+1):break            print(j, end=" ")break        print()break;1;-1;13500;2017-12-04 21:12:01
1783;1631606;6;def nonzero_product(numbers):break    nonzero=1break    for i in numbers:break        if i!=0:break            nonzero*=ibreak    print(nonzero)break            break;0;-1;107300;2017-12-04 21:12:11
1784;1631606;6;def nonzero_product(numbers):break    nonzero=1break    for i in numbers:break        if i!=0:break            nonzero*=ibreak    return nonzerobreak            break;1;-1;129450;2017-12-04 21:13:03
1785;1631705;4;def alphabet(n):break    for i in range(n):break        print(chr(65+i))break;0;-1;51600;2017-12-04 21:14:50
1786;1631705;4;def alphabet(n):break    for i in range(n):break        print(chr(65+i))break;0;-1;90650;2017-12-04 21:15:29
1787;1627452;31;def find_longest_word(words_list):break    result = ""break    for word in words_list:break        if len(word) > len(result):break            result = wordbreak    return resultbreak;1;-1;81500;2017-12-04 21:15:43
1788;1631606;9;def empty_square(n):break    for i in range(1,n+1):break        for j in range(1,n+1):break            if j==1 or j==n or i==1 or i==n:break        		print("#", end=" ")break            else:break                print(".", end=" ")break        print(;1;-1;153050;2017-12-04 21:15:47
1789;1631606;15;def every_second_number(num_list):break    for i in range(len(num_list)):break        if i%2==0 or i==0:break    		print(num_list[i])break;1;-1;71050;2017-12-04 21:17:10
1790;1631705;4;def alphabet(n):break    a = 0break    for i in range(n):break        if i < 26:break            a = ibreak        else:break            a = (i-26)break        print(chr(a))break        break;0;-1;306150;2017-12-04 21:19:04
1791;1631606;16;def max_pair_sum(num_list):break    maxx=0break    for i in range(len(num_list)-1):break        if maxx<num_list[i]+num_list[i+1]:break            maxx=num_list[i]+num_list[i+1]break    return maxxbreak;1;-1;115850;2017-12-04 21:19:15
1792;1631606;17;def five_multiples(num_list):break    for i in range(len(num_list)):break        if num_list[i]%5==0:break            print(num_list[i])break;0;-1;51000;2017-12-04 21:20:08
1793;1631705;4;def alphabet(n):break    for i in range(n):break        if i < 26:break        	print(chr(65+i))break        else:break            passbreak            break;0;-1;73700;2017-12-04 21:20:26
1794;1631606;17;def five_multiples(num_list):break    listt=[]break    for i in range(len(num_list)):break        if num_list[i]%5==0:break            listt.append(num_list[i])break    return listtbreak;1;-1;85750;2017-12-04 21:20:43
1795;1631705;4;def alphabet(n):break    for i in range(n):break        if i < 26:break        	print(chr(65+i))break        else:break            i -= 26break            print(chr(65+i))break            break            break;0;-1;122400;2017-12-04 21:21:15
1796;1631705;4;def alphabet(n):break    for i in range(n):break        if i < 26:break        	print(chr(65+i))break        else:break            i -= 26break            print(chr(65+i))break            break            break;0;-1;124200;2017-12-04 21:21:17
1797;1631705;4;def alphabet(n):break    for i in range(n):break        print(65+(n-i-26))break            break            break;0;-1;259600;2017-12-04 21:24:20
1798;1631606;4;def alphabet(n):break    if n>26:break        alphabet(n-26)break    for i in range(n):break        print(chr(65+i))break;0;-1;162350;2017-12-04 21:24:27
1799;1627452;5;def duplication(text):break    result = ""break    for letter in text:break        result += letter * 2break    return resultbreak;1;-1;87650;2017-12-04 21:24:39
1800;1630852;4;def alphabet(n):break    if n < 26:break        for i in range(n):break            print(chr(65+i))break    if n > 26:break        k = n // 26break        l = n % 26break        for j in range(k):break            for p in range(26):break;1;-1;1130550;2017-12-04 21:24:55
1801;1631705;4;def alphabet(n):break    a = -1break    i=-1break    while i <= n:break        a += 1break        i += 1break        if a == 26:break            a = 1break        print (chr(65+a))break            break            break;0;-1;429150;2017-12-04 21:27:10
1802;1631705;4;def alphabet(n):break    a = -1break    i=-1break    while i < n-1:break        a += 1break        i += 1break        if a == 26:break            a = 1break        print (chr(65+a))break            break            break;0;-1;445650;2017-12-04 21:27:26
1803;1631705;4;def alphabet(n):break    a = -1break    i=-1break    while i < n-1:break        a += 1break        i += 1break        if a == 26:break            a = 0break        print (chr(65+a))break            break            break;1;-1;455900;2017-12-04 21:27:37
1804;1627452;29;def unique(mylist):break    return set(mylist)break;0;-1;34500;2017-12-04 21:29:40
1805;1627452;29;def unique(mylist):break    return list(set(mylist))break;0;-1;54750;2017-12-04 21:30:00
1806;1631705;5;def duplication(text):break    new_text = ""break    for i in range (len(text)):break        new_text += text[i]break        new_text += text[i]break    return(new_text)break        break        break;1;-1;608200;2017-12-04 21:41:45
1807;1631628;31;def find_longest_word(words_list):break    longest = words_list[0]break    for word in words_list:break        if len(word) > len(longest):break            longest = wordbreak            print(">",longest)break        elif len(word) == len(longest[0];0;-1;497800;2017-12-04 21:44:37
1808;1631628;31;def find_longest_word(words_list):break    longest = words_list[0]break    for word in words_list:break        if len(word) > len(longest):break            longest = wordbreak        elif len(word) == len(longest[0]):break            longest.append(w;0;-1;505750;2017-12-04 21:44:45
1809;1631705;13;def string_intersection(left, right):break    if len(left) >= len (right):break        longer = leftbreak        shorter = rightbreak    else:break        longer = rightbreak        shorter = leftbreak    for i in range (len (shorter)):break        i;1;-1;364950;2017-12-04 21:49:03
1810;1621276;18;def digit_sum(n):break    suu = 0break    while n != 0:break        suu += n%10break        n = n // 10break    return suubreak;1;-1;160850;2017-12-04 21:50:17
1811;1631628;4;def alphabet(n):break    k = -1break    for i in range(n):break        if k <= 24:break            k += 1break        else:break            k = 0break        print(chr(65 + k))break;1;-1;218550;2017-12-04 21:50:57
1812;1621276;20;def divisors_count(n):break    suu = 0break    for i in range(1, n+1):break        if n%i ==0:break            suu += 1break    return suubreak;1;-1;40500;2017-12-04 21:51:07
1813;1621276;21;def powers(base, n):break    for i in range(1, n+1):break        print(base**i)break;1;-1;42950;2017-12-04 21:51:57
1814;1631628;5;def duplication(text):break    new = ''break    for char in text:break        new += (char * 2)break    return newbreak;1;-1;62200;2017-12-04 21:52:06
1815;1621276;8;def square(n):break    for i in range(n):break        for j in range(n):break        	print("#", end=" ")break        print()break;1;-1;46050;2017-12-04 21:52:52
1816;1631628;13;def string_intersection(left, right):break    i = -1break    for char in min(left, right):break        i += 1break        if char == max(left, right)[i]:break            print(char)break;1;-1;36000;2017-12-04 21:59:02
1817;1631779;5;def duplication(text):break    new = ""break    for i in text:break        new = new + i*2break    return newbreak;1;-1;181550;2017-12-04 22:05:40
1818;1631628;13;def string_intersection(left, right):break    i = -1break    if len(left) <= len(right):break        mini = leftbreak        maxi = rightbreak    else:break        mini = rightbreak        maxi = leftbreak    for char in mini:break        i += 1break;1;-1;257950;2017-12-04 22:09:21
1819;1631628;14;def palindrom(text):break    if text == text[::-1]: return Truebreak    else:break        return Falsebreak;1;-1;74050;2017-12-04 22:10:38
1820;1628231;28;def string_zip(A, B):break    new_text=""break    if len(A) >= len(B):break        length = len(A)break        longer = Abreak        shorter = Bbreak    else:break        length = len(B)break        longer = Bbreak        shorter = Abreak    for i i;0;-1;41400;2017-12-04 22:10:59
1821;1628231;28;def string_zip(A, B):break    new_text=""break    if len(A) >= len(B):break        length = len(A)break        longer = Abreak        shorter = Bbreak    else:break        length = len(B)break        longer = Bbreak        shorter = Abreak    for i i;0;-1;43350;2017-12-04 22:11:01
1822;1628231;28;def string_zip(A, B):break    new_text=""break    if len(A) >= len(B):break        length = len(A)break        longer = Abreak        shorter = Bbreak    else:break        length = len(B)break        longer = Bbreak        shorter = Abreak    for i i;0;-1;56100;2017-12-04 22:11:14
1823;1628231;28;def string_zip(A, B):break    new_text=""break    if len(A) >= len(B):break        length = len(A)break        longer = Abreak        shorter = Bbreak    else:break        length = len(B)break        longer = Bbreak        shorter = Abreak    for i i;0;-1;57300;2017-12-04 22:11:15
1824;1631779;5;def duplication(text):break    new = ""break    for i in text:break        new = new + i*2break    return newbreak;1;-1;230200;2017-12-04 22:12:59
1825;1631628;19;def zigzag(text):break    s = ''break    for i in range(2):break        for j in range(len(text)):break            pos = j * 2 + ibreak            if pos < len(text):break                s += text[pos] + '.'breakbreak    print(s[:len(s) // 2])break;0;-1;832300;2017-12-04 22:24:44
1826;1631628;27;def first_letters(text):break    text = text.split()break    for word in text:break        print(word[0], end=' ')break    print()break;1;-1;87950;2017-12-04 22:27:03
1827;1625382;27;def first_letters(text):break    fld = text.split()break    for i in range(len(fld)):break        print(fld[i][0], end = " ")break    print()break;1;-1;217250;2017-12-04 23:49:43
1828;1619117;29;def unique(mylist):break    return set(mylist)break;0;-1;36800;2017-12-05 00:00:40
1829;1619117;29;def unique(mylist):        break    return set(mylist)break;0;-1;170700;2017-12-05 00:04:49
1830;1612998;6;def nonzero_product(numbers):break    counter=1break    for number in numbers:break        if number ==0:break            continuebreak        counter=counter*numberbreak    return counterbreak;1;-1;179100;2017-12-05 01:31:06
1831;1612998;15;def every_second_number(num_list):break    break    print(num_list[0::2])break;0;-1;71900;2017-12-05 01:34:33
1832;1612998;20;def divisors_count(n):break    counter=0break    for i in range (1,n+1):break        if n%i == 0 :break            counter= counter+1break    print(counter)break	break;0;-1;280700;2017-12-05 01:48:34
1833;1502478;8;def square(n):break    for i in range(n):break		for j in range(n):    break    		print("#", end=" ")break		print();1;-1;277950;2017-12-05 05:00:58
1834;1502478;9;def empty_square(n):break    for i in range(n):break        print("#", end=" ")break    print()break    for i in range(n-2):break    	print("#", end=" ")break    	for j in range(n-2):break        	print(".", end=" ")break    	print("#", end=" ")break;0;-1;306150;2017-12-05 05:06:27
1835;1502478;9;def empty_square(n):break    for i in range(n):break        print("#", end=" ")break    print()break    if n > 1:break    	for i in range(n-2):break    		print("#", end=" ")break    		for j in range(n-2):break        		print(".", end=" ")break    		p;0;-1;555600;2017-12-05 05:10:41
1836;1502478;9;def empty_square(n):break    for i in range(n):break        print("#", end=" ")break    print()break    if n > 1:break    	for i in range(n-2):break    		print("#", end=" ")break    		for j in range(n-2):break        		print(".", end=" ")break    		p;0;-1;856850;2017-12-05 05:15:46
1837;1502478;9;def empty_square(n):break    for i in range(n):break        print("#", end=" ")break    print()break    if n > 1:break    	for i in range(n-2):break    		print("#", end=" ")break    		for j in range(n-2):break        		print(".", end=" ")break    		p;1;-1;922600;2017-12-05 05:16:53
1838;1632395;34;def multiples(n):break    print("Dvojnasobek", 2*n)break    print("Trojnasobek", 3*n)break    print("Desetinasobek", 10*n)break;1;-1;71100;2017-12-05 08:07:28
1839;1632395;32;def near_fifty(n):break    if (n <= 60 and n >=40) or (n >= 160 and n >= 140):break        return Truebreak    else:break        return Falsebreak;0;-1;151950;2017-12-05 08:10:08
1840;1632395;32;def near_fifty(n):break    if (n <= 60 and n >=40) or (n <= 160 and n >= 140):break        return Truebreak    else:break        return Falsebreak;1;-1;172150;2017-12-05 08:10:25
1841;1632395;33;def impose_fine(age, beer):break    if age < 18 and beer == True:break    	return Truebreak    return Falsebreak;1;-1;44800;2017-12-05 08:11:13
1842;1632395;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(j+1, end=" ")break        print()break;1;-1;155650;2017-12-05 08:14:05
1843;1632395;36;def products(n):break    for row in range(n):break        for col in range(n):break            print((row+1) * (col+1), end=" ")break        print()break;1;-1;203250;2017-12-05 08:17:32
1844;1632395;37;def stars(n):break    for i in range(1, n+1):break        print("*", end="")break        if i % 5 == 0:break            print("|", end="")break    print()break;1;-1;96250;2017-12-05 08:19:12
1845;1632395;6;def nonzero_product(numbers):break    result = 1break    for number in numbers:break        if number != 0:break            result *= numberbreak    return resultbreak;1;-1;61100;2017-12-05 08:31:13
1846;1632395;15;def every_second_number(num_list):break    for i in range(len(num_list)):break        if i % 2 == 0:break            print(num_list[i])break;1;-1;92750;2017-12-05 08:32:49
1847;1632395;16;def max_pair_sum(num_list):break    maximum = 0break    for i in range(len(num_list)-2):break        if (num_list[i] + num_list[i+1]) > maximum:break            maximum = num_list[i] + num_list[i+1]break        elif (num_list[i+1] + num_list[i]) > ma;0;-1;187250;2017-12-05 08:36:00
1848;1632395;16;def max_pair_sum(num_list):break    maximum = 0break    result = 0break    for i in range(len(num_list)-1):break        if (num_list[i] + num_list[i+1]) >= maximum:break            maximum = num_list[i] + num_list[i+1]break        elif (num_list[i+1];1;-1;349900;2017-12-05 08:38:42
1849;1630906;34;def multiples(n):break    print("Dvojnasobek", 2*n)break    print("trojnasobek", 3*n)break    print("desetinasobek", 10*n)break;0;-1;60450;2017-12-05 09:08:42
1850;1630906;34;def multiples(n):break    print("Dvojnasobek", 2*n)break    print("Trojnasobek", 3*n)break    print("Desetinasobek", 10*n)break;1;-1;79350;2017-12-05 09:09:01
1851;1630906;35;def sequences(n):break    for i in range(1,n+1):break        for j in range(1,i+1):break            print(j, end=" ")break        print()break;1;-1;84750;2017-12-05 09:14:33
1852;1630906;36;def products(n):break    for row in range(1,n+1):break        for col in range(1,n+1):break            print(row * col, end=" ")break        print()break;1;-1;88550;2017-12-05 09:16:06
1853;1630906;37;def stars(n):break    for i in range(1,n+1):break        print("*", end="")break        if i % 5 == 0:break            print("|", end="")break    print()break;1;-1;89000;2017-12-05 09:17:40
1854;1630906;4;def alphabet(n):break    while True:break        for i in range(n):break            if i <26:break            	print(chr(65+i))break            else:break                breakbreak        if n > 26:break            n -= 26break        else:break;1;-1;351050;2017-12-05 09:25:11
1855;1628463;32;def near_fifty(n):break    if (n <= 60 and n >= 40) or (n <= 160 and n >= 140):break        return Truebreak    else:break    	return Falsebreak;1;-1;174800;2017-12-05 09:54:10
1856;1628463;34;def multiples(n):break    print("Dvojnasobek", n*2)break    print("Trojnasobek", n*3)break    print("Desetinasobek", n*10)break;1;-1;118850;2017-12-05 09:56:33
1857;1628463;33;def impose_fine(age, beer):break    if age < 18 and beer:break        return Truebreak    else:break    	return Falsebreak;1;-1;94800;2017-12-05 09:58:12
1858;1628463;35;def sequences(n):break    for i in range(n):break        for j in range(i+1):break            print(j+1, end=" ")break        print()break;1;-1;64700;2017-12-05 09:59:49
1859;1628463;36;def products(n):break    for row in range(1,n+1):break        for col in range(1,n+1):break            print(row * col, end=" ")break        print()break;1;-1;75500;2017-12-05 10:01:08
1860;1628463;37;def stars(n):break    for i in range(1,n+1):break        print("*", end="")break        if i % 5 == 0:break            print("|", end="")break    print()break;1;-1;220450;2017-12-05 10:04:51
1861;1628463;38;def cross(n):    break    for i in range(3*n):break        for j in range(3*n):break            if (i >= n*3//3 and i < (n*3//3)*2) or (j >= n*3//3 and j < (n*3//3)*2):break                print("#", end="")break            else:break;1;-1;381550;2017-12-05 10:11:15
1862;1628463;1;def numbers(n):break    for i in range(1,n+1):break        print(i)break    	break;1;-1;67450;2017-12-05 10:20:32
1863;1628463;2;def fibonacci(n):break    kokos = [1,1]break    for i in range(2,n):break        kokos.append(kokos[i-1] + kokos[i-2])break    for i in range(len(kokos)):break        print(kokos[i])break    break;1;-1;431350;2017-12-05 10:27:50
1864;1628463;3;def factorial(n):break    if n == 1:break        return 1break    else:break        return factorial(n-1)*nbreak;1;-1;39800;2017-12-05 10:28:38
1865;1628463;7;def divisors(n):break    for i in range(1, n+1):break        if n % i == 0:break            print(i)break    break;1;-1;62250;2017-12-05 10:29:46
1866;1632866;8;def square(n):break    for i in range(n):break        print("#", end=" ")break    print()break;0;-1;37150;2017-12-05 10:42:03
1867;1632866;8;def square(n):break    for i in range(n):break    	for j in range(n):break        	print("#", end=" ")break    	print()break;1;-1;81250;2017-12-05 10:42:47
1868;1628463;18;import mathbreakdef digit_sum(n):break    a = 0break    while 10**a < n:break        a += 1break    kokos = a-1break    z = 0break    while kokos != -1:break        leo = n//10**kokosbreak        n -= leo*(10**kokos)break        kokos -= 1break;0;-1;1195350;2017-12-05 10:53:47
1869;1632866;9;def empty_square(n):break    for j in range(n):break    	for i in range(n):break			if((i > 0) and (i < (n-1)) and (j > 0) and (j < n-1)):break				print(".", end=" ")break			else:break				print("#", end=" ")break    	print()	break;1;-1;217550;2017-12-05 10:55:12
1870;1628463;18;import mathbreakdef digit_sum(n):break    a = 0break    while 10**a < n:break        a += 1break    kokos = a-1break    z = 0break    while kokos != -1:break        leo = n//10**kokosbreak        n -= leo*(10**kokos)break        kokos -= 1break;0;-1;1391050;2017-12-05 10:57:02
1871;1628463;18;import mathbreakdef digit_sum(n):break    a = 0break    while 10**a < n:break        a += 1break    if n > 10:break        kokos = a-1break    else:break        kokos = abreak    z = 0break    while kokos != -1 and n != 0:break        leo = n//10**ko;0;-1;1921200;2017-12-05 11:06:05
1872;1632866;10;def pyramid(n):break    for i in range(n):break        for j in range(2*n):break            if((j >= n-i) and (j <= n+j)):break                print("#", end=" ")break			else:break                print(" ", end=" ")break    	print()	break;0;-1;93550;2017-12-05 11:13:55
1873;1632866;10;def pyramid(n):break	for i in range(n):break		for j in range(2*n):break			if((j >= n-i) and (j <= n+i)):break				print("#", end=" ")break			else:break				print(" ", end=" ")break		print()	break;1;-1;226050;2017-12-05 11:16:08
1874;1622798;6;def nonzero_product(numbers):break    result = 1break    for n in numbers:break        if (n != 0):break			result = result * nbreak    return resultbreak;1;-1;224550;2017-12-05 12:31:37
1875;1633178;34;def multiples(n):break    print("Dvojnasobek", 2*n)break    print("Trojnasobek", 3*n)break    print("Desetinasobek", 10*n)break;1;-1;94100;2017-12-05 12:48:15
1876;1633178;32;def near_fifty(n):break    if 30 <= n <= 60 or 140 <= n <= 160:break        return Truebreak    else:break    	return Falsebreak;1;-1;214950;2017-12-05 12:51:55
1877;1633178;33;def impose_fine(age, beer):break    if age < 18 and beer:break        return Truebreak    else:break    	return Falsebreak;1;-1;94700;2017-12-05 12:53:33
1878;1633178;35;def sequences(n):break    for i in range(n):break        for j in range(1, i+2):break            print(j, end=" ")break        print()break;1;-1;56450;2017-12-05 12:54:47
1879;1633178;36;def products(n):break    for row in range(1,n + 1):break        for col in range(1,n + 1):break            print(row * col, end=" ")break        print()break;1;-1;318100;2017-12-05 13:00:11
1880;1633178;37;def stars(n):break    for i in range(1,n + 1):break        print("*", end="")break        if i % 5 == 0:break            print("|", end="")break    print()break;1;-1;118550;2017-12-05 13:02:13
1881;1633178;38;def cross(n):    break    for i in range(3*n):break        for j in range(3*n):break            if n <= i < 2*n  or n <= j < 2*n:break                print("#", end="")break            else:break                print(".", end="")break        print()b;1;-1;272650;2017-12-05 13:06:54
1882;1633178;1;def numbers(n):break    for i in range(1, n + 1):break    	print(i)break;1;-1;39550;2017-12-05 13:08:02
1883;1633178;2;def fibonacci(n):break    a0 = 1break    a1 = 1break    for i in range(n):break        if i == 0:break            print(a0, end=", ")break        elif i == 1:break            print(a1, end=", ")break        else:break            a2 = a0 + a1break;0;-1;361900;2017-12-05 13:15:08
1884;1633178;2;def fibonacci(n):break    a0 = 1break    a1 = 1break    for i in range(n):break        if i == 0:break            print(a0)break        elif i == 1:break            print(a1)break        else:break            a2 = a0 + a1break            print(a2)bre;1;-1;388400;2017-12-05 13:15:34
1885;1620881;16;def max_pair_sum(num_list):break    maxsum = 0break    for i in range(len(num_list)-1):break        b = num_list[i] + num_list[i+1]break        if b > maxsum:break            maxsum = bbreak    return maxsum;1;-1;2424700;2017-12-05 13:39:45
1886;1620881;17;def five_multiples(num_list):break    return [i for i in num_list if i % 5 == 0]break;1;-1;128150;2017-12-05 13:46:23
1887;1620881;30;def most_common(mylist):break    times = 0break    common = []break    for num in mylist:break        if mylist.count(num) > times:break            common = [num]break            times = mylist.count(num)break        elif mylist.count(num) == times:b;1;-1;866200;2017-12-05 14:21:29
1888;1383430;35;ZGVmIHNlcXVlbmNlcyhuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgZm9yIGogaW4gcmFuZ2UoaSsxKTpicmVhayAgICAgICAgICAgIHByaW50KGorMSwgZW5kPSIgIilicmVhayAgICAgICAgcHJpbnQoKWJyZWFr;1;-1;1650;2017-12-05 14:21:56
1889;1633523;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBuPTIqbmJyZWFrICAgIHByaW50KCJEdm9qbmFzb2JlayIsIG4pYnJlYWsgICAgYnJlYWs=;0;-1;87000;2017-12-05 14:48:26
1890;1633523;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBuPTIqbmJyZWFrICAgIHByaW50KCJEdm9qbmFzb2JlayIsIG4pYnJlYWsgICAgbj0zKm4vMmJyZWFrICAgIHByaW50KCJUcm9qbmFzb2JlayIsIG4pYnJlYWsgICAgbj0xMCpuLzNicmVhayAgICBwcmludCgiRGVzZXRuYXNvYmVrIiwgbilicmVhayAgICBicmVhayAgICBicmVhaw==;0;-1;297750;2017-12-05 14:52:45
1891;1633178;3;def factorial(n):break    if n == 1:break    	return 1break    else:break        return n*factorial(n-1)break;1;-1;497200;2017-12-05 15:04:01
1892;1618258;28;ZGVmIHN0cmluZ196aXAodGV4dDEsIHRleHQyKTpicmVhayAgICByX3RleHQ9IiJicmVhayAgICBmb3IgaSBpbiByYW5nZShtYXgobGVuKHRleHQxKSwgbGVuKHRleHQyKSkpOmJyZWFrICAgICAgICBpZiBpPGxlbih0ZXh0MSk6YnJlYWsgICAgICAgICAgICByX3RleHQrPXRleHQxW2ldYnJlYWsgICAgICAgIGlmIGk8bGVuKHRleH;1;-1;178950;2017-12-05 15:23:10
1893;1633675;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCBuKjIpYnJlYWsgICAgcHJpbnQoIlRyb2puYXNvYmVrIiwgbiozKWJyZWFrICAgIHByaW50KCJEZXNldGluYXNvYmVrIiwgbioxMCk=;1;-1;119700;2017-12-05 16:10:40
1894;1633675;32;ZGVmIG5lYXJfZmlmdHkobik6YnJlYWsgICAgaWYgYWJzKG4tNTApPD0xMCBvciBhYnMobi0xNTApPD0xMDpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICByZXR1cm4gRmFsc2VicmVhaw==;1;-1;143750;2017-12-05 16:13:08
1895;1633675;33;ZGVmIGltcG9zZV9maW5lKGFnZSwgYmVlcik6YnJlYWsgICAgaWYgYWdlPDE4IGFuZCBiZWVyOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;1;-1;58150;2017-12-05 16:14:12
1896;1633675;35;ZGVmIHNlcXVlbmNlcyhuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZSgxLCBuKzEpOmJyZWFrICAgICAgICBmb3IgaiBpbiByYW5nZSgxLCBpKzEpOmJyZWFrICAgICAgICAgICAgcHJpbnQoaiwgZW5kPSIgIilicmVhayAgICAgICAgcHJpbnQoKWJyZWFr;1;-1;435500;2017-12-05 16:24:07
1897;1633675;36;ZGVmIHByb2R1Y3RzKG4pOmJyZWFrICAgIGZvciByb3cgaW4gcmFuZ2UoMSwgbisxKTpicmVhayAgICAgICAgZm9yIGNvbCBpbiByYW5nZSgxLCBuKzEpOmJyZWFrICAgICAgICAgICAgcHJpbnQocm93ICogY29sLCBlbmQ9IiAiKWJyZWFrICAgICAgICBwcmludCgpYnJlYWs=;1;-1;63350;2017-12-05 16:25:15
1898;1633675;37;ZGVmIHN0YXJzKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsIDErbik6YnJlYWsgICAgICAgIHByaW50KCIqIiwgZW5kPSIiKWJyZWFrICAgICAgICBpZiBpICUgNSA9PSAwOmJyZWFrICAgICAgICAgICAgcHJpbnQoInwiLCBlbmQ9IiIpYnJlYWsgICAgcHJpbnQoKWJyZWFr;1;-1;98400;2017-12-05 16:26:55
1899;1553567;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;2150;2017-12-05 16:32:15
1900;1633675;38;ZGVmIGNyb3NzKG4pOiAgICBicmVhayAgICBmb3IgaSBpbiByYW5nZSgzKm4pOmJyZWFrICAgICAgICBmb3IgaiBpbiByYW5nZSgzKm4pOmJyZWFrICAgICAgICAgICAgaWYgaT49biBhbmQgaTxuK24gIG9yIGo PW4gYW5kIGo8bituIDpicmVhayAgICAgICAgICAgICAgICBwcmludCgiIyIsIGVuZD0iIilicmVhayAgICAgICAgIC;1;-1;541100;2017-12-05 16:36:01
1901;1633675;1;ZGVmIG51bWJlcnMobik6YnJlYWsgICAgZm9yIGkgaW4gcmFuZ2UoMSwgbisxKTpicmVhayAgICAJcHJpbnQoaSlicmVhaw==;1;-1;184000;2017-12-05 16:40:35
1902;1633675;2;ZGVmIGZpYm9uYWNjaShuKTpicmVhayAgICB4MSA9IDBicmVhayAgICB4MiA9IDFicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoeDIpYnJlYWsgICAgICAgIGEgPSB4MWJyZWFrICAgICAgICB4MSA9IHgyYnJlYWsgICAgICAgIHgyID0gYSArIHgy;1;-1;710700;2017-12-05 16:52:45
1903;1633675;3;ZGVmIGZhY3RvcmlhbChuKTpicmVhayAgICBpZiBuID09IDA6YnJlYWsgICAgCXJldHVybiAxYnJlYWsgICAgZWxzZTpicmVhayAgICAgICAgcmV0dXJuIG4qZmFjdG9yaWFsKG4tMSlicmVhaw==;1;-1;71950;2017-12-05 16:53:59
1904;1633675;7;ZGVmIGRpdmlzb3JzKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsIG4rMSk6YnJlYWsgICAgCWlmIG4gJSBpID09IDA6YnJlYWsgICAgICAgIAlwcmludChpKWJyZWFr;1;-1;68700;2017-12-05 16:55:11
1905;1633675;18;ZGVmIGRpZ2l0X3N1bShuKTpicmVhayAgICBpZiBuPDEwOmJyZWFrICAgIAlyZXR1cm4gbmJyZWFrICAgIGVsc2U6YnJlYWsgICAgICAgIHJldHVybiBuJTEwK2RpZ2l0X3N1bShuLy8xMClicmVhaw==;1;-1;120400;2017-12-05 16:57:15
1906;1633675;20;ZGVmIGRpdmlzb3JzX2NvdW50KG4pOmJyZWFrICAgIGNvdW50ID0gMGJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsIG4rMSk6YnJlYWsJCWlmIG4gJSBpID09IDA6YnJlYWsJCQljb3VudCArPSAxYnJlYWsgICAgcmV0dXJuIGNvdW50YnJlYWs=;1;-1;83200;2017-12-05 16:58:42
1907;1633675;21;ZGVmIHBvd2VycyhiYXNlLCBuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZSgxLG4rMSk6YnJlYWsgICAgCXByaW50KGJhc2UqKmkpYnJlYWs=;1;-1;46850;2017-12-05 16:59:32
1908;1633905;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICBzdW1hID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHN1bWEgKj0gaSBicmVhayAgICByZXR1cm4gc3VtYWJyZWFr;1;-1;92500;2017-12-05 17:10:07
1909;1633905;15;ZGVmIGV2ZXJ5X3NlY29uZF9udW1iZXIobnVtX2xpc3QpOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKDAsbGVuKG51bV9saXN0KSwyKTpicmVhayAgICAgICAgcHJpbnQobnVtX2xpc3RbaV0p;1;-1;92950;2017-12-05 17:11:44
1910;1633905;16;ZGVmIG1heF9wYWlyX3N1bShudW1fbGlzdCk6YnJlYWsgICAgbWF4ID0gMGJyZWFrICAgIGZvciBpIGluIHJhbmdlKGxlbihudW1fbGlzdCkpOmJyZWFrICAgICAgICB0cnk6YnJlYWsgICAgICAgIAlhID0gbnVtX2xpc3RbaV0gKyBudW1fbGlzdFtpKzFdYnJlYWsgICAgICAgIAlpZiBhID4gbWF4OmJyZWFrICAgICAgICAgICAgCW;1;-1;120450;2017-12-05 17:13:48
1911;1633905;17;ZGVmIGZpdmVfbXVsdGlwbGVzKG51bV9saXN0KTpicmVhayAgICByZXN1bHQgPSBbXWJyZWFrICAgIGZvciBpIGluIG51bV9saXN0OmJyZWFrICAgICAgICBpZiBpICUgNSA9PSAwOmJyZWFrICAgICAgICAgICAgcmVzdWx0LmFwcGVuZChpKWJyZWFrICAgIHJldHVybiByZXN1bHRicmVhaw==;1;-1;74750;2017-12-05 17:15:08
1912;1634551;26;ZGVmIGNlbnNvcnNoaXAodGV4dCk6YnJlYWsgICAgbmV3ID0gJydicmVhayAgICBmb3IgaSBpbiByYW5nZShsZW4odGV4dCkpOmJyZWFrICAgICAgICBpZiBpICUgMiA9PSAwOmJyZWFrICAgICAgICAgICAgbmV3ICs9IHRleHRbaV1icmVhayAgICAgICAgZWxzZTpicmVhayAgICAgICAgICAgIG5ldyArPSAnWCdicmVhayAgICByZX;1;-1;130550;2017-12-05 21:15:41
1913;1618258;30;ZGVmIG1vc3RfY29tbW9uKG15bGlzdCk6YnJlYWsgICAgc29ydGVkX2xpc3Q9c29ydGVkKG15bGlzdClicmVhayAgICBtb3N0X2NvbT1zb3J0ZWRfbGlzdFswXWJyZWFrICAgIG1vc3RfY29tX2NvdW50PTFicmVhayAgICBudW09c29ydGVkX2xpc3RbMF1icmVhayAgICBudW1fY291bnQ9MGJyZWFrICAgIGZvciBpIGluIHJhbmdlKD;1;-1;2167150;2017-12-05 22:37:18
1914;1618258;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICBwcm9kdWN0PTFicmVhayAgICBmb3IgaSBpbiBudW1iZXJzOmJyZWFrICAgICAgICBpZiBpIT0wOmJyZWFrICAgICAgICAgICAgcHJvZHVjdCo9aWJyZWFrICAgIHJldHVybiBwcm9kdWN0YnJlYWsgICAgICAgIGJyZWFr;1;-1;142500;2017-12-05 22:41:57
1915;1634794;15;ZGVmIGV2ZXJ5X3NlY29uZF9udW1iZXIobnVtX2xpc3QpOmJyZWFrICAgIGZvciBpIGluIChudW1fbGlzdFs6OjJdKTpicmVhawkJcHJpbnQoaSk=;1;-1;134150;2017-12-06 00:16:52
1916;1628030;7;ZGVmIGRpdmlzb3JzKG4pOmJyZWFrICAgIGEgPSAxYnJlYWsgICAgd2hpbGUgYSA8PSBuOmJyZWFrICAgICAgICBpZiBuL2E9PW4vL2E6YnJlYWsgICAgICAgICAgICBwcmludChhKWJyZWFrICAgICAgICBhID0gYSArIDFicmVhaw==;1;-1;195200;2017-12-06 07:42:36
1917;1628030;18;ZGVmIGRpZ2l0X3N1bShuKTpicmVhayAgICBhID0gMWJyZWFrICAgIGIgPSAwYnJlYWsgICAgYyA9IG5icmVhayAgICB3aGlsZSBuPj1hOmJyZWFrICAgICAgICBhID0gYSAqIDEwYnJlYWsgICAgICAgIGIgPSBiICsgKGMlYSkvYSoxMGJyZWFrICAgICAgICBjID0gYyAtIChjJWEpYnJlYWsgICAgcmV0dXJuIGJicmVhaw==;0;-1;398150;2017-12-06 07:49:20
1918;1628030;18;ZGVmIGRpZ2l0X3N1bShuKTpicmVhayAgICByZXN1bHQgPSAwYnJlYWsgICAgd2hpbGUgbj4wOmJyZWFrICAgICAgICByZXN1bHQgKz0gbiUxMGJyZWFrICAgICAgICBuID0gbiAvLyAxMGJyZWFrICAgIHJldHVybiByZXN1bHRicmVhaw==;1;-1;69800;2017-12-06 07:56:02
1919;1628030;20;ZGVmIGRpdmlzb3JzX2NvdW50KG4pOmJyZWFrICAgIGE9MGJyZWFrICAgIGZvciBrIGluIHJhbmdlICgxLCBuKzEpOmJyZWFrICAgICAgICBpZiBuJWsgPT0gMDpicmVhayAgICAgICAgICAgIGEgPSBhKzFicmVhayAgICByZXR1cm4gYWJyZWFr;1;-1;121550;2017-12-06 07:58:12
1920;1628030;2;ZGVmIGZpYm9uYWNjaShuKTpicmVhayAgICBhLGIgPSAxLDFicmVhayAgICBwcmludChhKWJyZWFrICAgIGZvciBpIGluIHJhbmdlKG4tMSk6YnJlYWsgICAgCWEsYj1iLGErYmJyZWFrICAgIAlwcmludChhKWJyZWFr;1;-1;385700;2017-12-06 08:04:55
1921;1628030;21;ZGVmIHBvd2VycyhiYXNlLCBuKTpicmVhayAgICBhID0gMGJyZWFrICAgIGZvciBpIGluIHJhbmdlICgxLG4pOmJyZWFrICAgIAlwcmludChiYXNlICoqIGkpYnJlYWsJCWJyZWFr;0;-1;215750;2017-12-06 08:08:42
1922;1628030;21;ZGVmIHBvd2VycyhiYXNlLCBuKTpicmVhayAgICBhID0gMGJyZWFrICAgIGZvciBpIGluIHJhbmdlICgxLG4rMSk6YnJlYWsgICAgCXByaW50KGJhc2UgKiogaSlicmVhawkJYnJlYWs=;1;-1;231100;2017-12-06 08:08:57
1923;1636021;35;ZGVmIHNlcXVlbmNlcyhuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgZm9yIGogaW4gcmFuZ2UoaSsxKTpicmVhayAgICAgICAgICAgIHByaW50KGksIGVuZD0iICIpYnJlYWsgICAgICAgIHByaW50KClicmVhaw==;0;-1;32550;2017-12-06 11:24:05
1924;1635972;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;15600;2017-12-06 11:31:27
1925;1635972;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;20600;2017-12-06 11:31:32
1926;1635972;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;21400;2017-12-06 11:31:32
1927;1635972;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;24550;2017-12-06 11:31:36
1928;1633675;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhawkJZm9yIGogaW4gcmFuZ2Uobik6YnJlYWsJCQlwcmludCgiIyIsIGVuZD0iICIpYnJlYWsJCXByaW50KClicmVhaw==;1;-1;217450;2017-12-06 11:57:58
1929;1633675;9;ZGVmIGVtcHR5X3NxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgZm9yIGogaW4gcmFuZ2Uobik6YnJlYWsJCQlpZiBpPT0wIG9yIGk9PW4tMSBvciBqPT0wIG9yIGo9PW4tMTpicmVhawkJCQlwcmludCgiIyIsIGVuZD0iICIpYnJlYWsJCQllbHNlOmJyZWFrCQkJCXByaW50KCIuIixlbmQ9Ii;1;-1;203050;2017-12-06 12:01:24
1930;1633675;10;ZGVmIHB5cmFtaWQobik6YnJlYWsgICAgZm9yIGkgaW4gcmFuZ2Uobik6YnJlYWsJCWZvciBqIGluIHJhbmdlKC1uKzEsbik6YnJlYWsJCQlpZiBhYnMoaik8PWk6YnJlYWsJCQkJcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrCQkJZWxzZTpicmVhawkJCQlwcmludCgiICIsZW5kPSIgIilicmVhawkJcHJpbnQoKQlicmVhaw==;1;-1;309550;2017-12-06 12:06:40
1931;1636178;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCBuKjIpYnJlYWsJcHJpbnQoIlRyb2puYXNvYmVrIiwgbiozKWJyZWFrICAgIHByaW50KCJEZXNldGluYXNvYmVrIiwgbioxMClicmVhayAgICA=;0;-1;263050;2017-12-06 12:07:37
1932;1636178;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCBuKjIpYnJlYWsJYnJlYWsgICAgcHJpbnQoIkRlc2V0aW5hc29iZWsiLCBuKjEwKWJyZWFrICAgIHByaW50KCJUcm9qbmFzb2JlayIsIG4qMyk=;0;-1;273150;2017-12-06 12:07:47
1933;1633675;11;ZGVmIGNoZXNzYm9hcmQobik6YnJlYWsgICAgZm9yIGkgaW4gcmFuZ2Uobik6YnJlYWsgICAgICAgIGZvciBqIGluIHJhbmdlKGksIG4raSk6YnJlYWsJCQlpZiBqICUgMiA9PSAwOmJyZWFrCQkJCXByaW50KCIjIiwgZW5kPSIgIilicmVhawkJCWVsc2U6YnJlYWsJCQkJcHJpbnQoIi4iLGVuZD0iICIpYnJlYWsJcHJpbnQoKWJyZW;1;-1;265550;2017-12-06 12:11:08
1934;1636178;32;ZGVmIG5lYXJfZmlmdHkobik6YnJlYWsgICAgaWYgbi0xMCA8PSA1MCA8PSBuKzEwOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIGlmIG4tMTAgPD0gMTUwIDw9IG4rMTA6YnJlYWsgICAgICAgIHJldHVybiBUcnVlYnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWs=;1;-1;210050;2017-12-06 12:11:35
1935;1636178;33;ZGVmIGltcG9zZV9maW5lKGFnZSwgYmVlcik6YnJlYWsgICAgaWYgYWdlIDwgMTggYW5kIGJlZXIgPT0gVHJ1ZTpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICByZXR1cm4gRmFsc2VicmVhaw==;1;-1;69900;2017-12-06 12:14:16
1936;1636178;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCBuKjIpYnJlYWsgICAgcHJpbnQoIlRyb2puYXNvYmVrIiwgbiozKWJyZWFrICAgIHByaW50KCJEZXNldGluYXNvYmVrIiwgbioxMCk=;1;-1;66500;2017-12-06 12:15:30
1937;1636178;35;ZGVmIHNlcXVlbmNlcyhuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgZm9yIGogaW4gcmFuZ2UoaSsxKTpicmVhayAgICAgICAgICAgIHByaW50KGorMSwgZW5kPSIgIilicmVhayAgICAgICAgcHJpbnQoKWJyZWFr;1;-1;140750;2017-12-06 12:18:25
1938;1630724;10;ZGVmIHB5cmFtaWQobik6YnJlYWsgICAgZm9yIGkgaW4gcmFuZ2Uobik6YnJlYWsgICAgICAgICAgICBwcmludCgyICogKG4gLSAxIC0gaSkgKiAiICIsIGVuZCA9ICIgIilicmVhayAgICAgICAgICAgIHByaW50KCgyICogaSArIDEpICogIiMgIiwgZW5kID0gIiAiKWJyZWFrICAgICAgICAgICAgcHJpbnQoKWJyZWFrICAgIHByaW;1;-1;470500;2017-12-06 12:21:33
1939;1636178;36;ZGVmIHByb2R1Y3RzKG4pOmJyZWFrICAgIGZvciByb3cgaW4gcmFuZ2Uobik6YnJlYWsgICAgICAgIGZvciBjb2wgaW4gcmFuZ2Uobik6YnJlYWsgICAgICAgICAgICBwcmludCgocm93ICsgMSkgKiAoY29sKzEpLCBlbmQ9IiAiKWJyZWFrICAgICAgICBwcmludCgpYnJlYWs=;1;-1;206250;2017-12-06 12:21:53
1940;1630724;11;ZGVmIGNoZXNzYm9hcmQobik6YnJlYWsgICAgZm9yIGkgaW4gcmFuZ2Uobik6YnJlYWsgICAgICAgIGlmIGkgJSAyID09IDA6YnJlYWsgICAgICAgIAlwcmludCgobi8vMikgKiAiIyAuICIsIGVuZD0iICIpYnJlYWsgICAgICAgIAlwcmludCgpYnJlYWsgICAgICAgIGVsc2U6YnJlYWsgICAgICAgICAgICBwcmludCgobi8vMikgKi;0;-1;139050;2017-12-06 12:24:02
1941;1636178;37;ZGVmIHN0YXJzKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsbisxKTpicmVhayAgICAgICAgcHJpbnQoIioiLCBlbmQ9IiIpYnJlYWsgICAgICAgIGlmIGkgJSA1ID09IDA6YnJlYWsgICAgICAgICAgICBwcmludCgifCIsIGVuZD0iIilicmVhayAgICBwcmludCgpYnJlYWs=;1;-1;417400;2017-12-06 12:28:55
1942;1630724;4;ZGVmIGFscGhhYmV0KG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKG4pOmJyZWFrICAgICAgICBwcmludChjaHIoNjUgKyBpKSlicmVhaw==;0;-1;142700;2017-12-06 12:31:57
1943;1630724;4;ZGVmIGFscGhhYmV0KG4pOmJyZWFrICAgIGlmIG4gPiAyNjpicmVhayAgICAgICAgZm9yIGkgaW4gcmFuZ2UoMCwyNyk6YnJlYWsgICAgICAgICAgICBwcmludChjaHIoNjUgKyBpKSlicmVhayAgICAgICAgZm9yIGkgaW4gcmFuZ2UoMjcsbik6YnJlYWsgICAgICAgICAgICBwcmludChwcmludChjaHIoNjUgLSAyNiArIGkpKSlicm;0;-1;304000;2017-12-06 12:34:39
1944;1636178;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;2900;2017-12-06 12:37:46
1945;1636178;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAJZm9yIHggaW4gcmFuZ2Uobik6YnJlYWsgICAgICAgIAlwcmludCgiIyIsIGVuZD0iICIpYnJlYWsgICAgCXByaW50KClicmVhaw==;1;-1;70600;2017-12-06 12:38:53
1946;1636379;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCAyKm4pYnJlYWsgICAgcHJpbnQoIlRyb2puYXNvYmVrIiwgMypuKWJyZWFrICAgIHByaW50KCJEZXNldGluYXNvYmVrIiwgMTAqbilicmVhaw==;1;-1;84700;2017-12-06 13:18:24
1947;1636379;32;ZGVmIG5lYXJfZmlmdHkobik6YnJlYWsgICAgaWYgbiA PSA0MCBhbmQgbiA8PSA2MDpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICBlbGlmIG4gPj0gMTQwIGFuZCBuPD0gMTYwOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIGVsc2U6YnJlYWsgICAgICAgIHJldHVybiBGYWxzZWJyZWFr;1;-1;180450;2017-12-06 13:22:10
1948;1636379;33;ZGVmIGltcG9zZV9maW5lKGFnZSwgYmVlcik6YnJlYWsgICAgaWYgYWdlPD0xOCBhbmQgYmVlciA9PSBUcnVlOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIGVsc2U6YnJlYWsgICAgICAgIHJldHVybiBGYWxzZWJyZWFr;1;-1;57250;2017-12-06 13:26:13
1949;1618258;31;ZGVmIGZpbmRfbG9uZ2VzdF93b3JkKHdvcmRzX2xpc3QpOmJyZWFrICAgIG1heF93b3JkPXdvcmRzX2xpc3RbMF1icmVhayAgICBtYXhfbGVuPWxlbih3b3Jkc19saXN0WzBdKWJyZWFrICAgIGZvciB3b3JkIGluIHdvcmRzX2xpc3Q6YnJlYWsgICAgICAgIGlmIGxlbih3b3JkKT5tYXhfbGVuOmJyZWFrICAgICAgICAgICAgbWF4X3;1;-1;148450;2017-12-06 13:26:26
1950;1636379;35;ZGVmIHNlcXVlbmNlcyhuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZSgxLG4rMSk6YnJlYWsgICAgICAgIGZvciBqIGluIHJhbmdlKDEsaSsxKTpicmVhayAgICAgICAgICAgIHByaW50KGosIGVuZD0iICIpYnJlYWsgICAgICAgIHByaW50KClicmVhaw==;1;-1;93700;2017-12-06 13:28:39
1951;1636379;36;ZGVmIHByb2R1Y3RzKG4pOmJyZWFrICAgIGZvciByb3cgaW4gcmFuZ2UoMSxuKzEpOmJyZWFrICAgICAgICBmb3IgY29sIGluIHJhbmdlKDEsbisxKTpicmVhayAgICAgICAgICAgIHByaW50KHJvdyAqIGNvbCwgZW5kPSIgIilicmVhayAgICAgICAgcHJpbnQoKWJyZWFr;1;-1;86150;2017-12-06 13:30:51
1952;1636379;37;ZGVmIHN0YXJzKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsbisxKTpicmVhayAgICAgICAgcHJpbnQoIioiLCBlbmQ9IiIpYnJlYWsgICAgICAgIGlmIGklNSA9PSAwOmJyZWFrICAgICAgICAgICAgcHJpbnQoInwiLCBlbmQ9IiIpYnJlYWsgICAgcHJpbnQoKWJyZWFr;1;-1;86400;2017-12-06 13:32:20
1953;1636379;38;ZGVmIGNyb3NzKG4pOiAgICBicmVhayAgICBmb3IgaSBpbiByYW5nZSgzKm4pOmJyZWFrICAgICAgICBmb3IgaiBpbiByYW5nZSgzKm4pOmJyZWFrICAgICAgICAgICAgaWYgKGkgPj0gbiBhbmQgaSA8IDIqbikgb3IgKGogPj0gbiBhbmQgaiA8IDIqbik6YnJlYWsgICAgICAgICAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiIpYnJlYW;1;-1;213950;2017-12-06 13:36:38
1954;1636379;1;ZGVmIG51bWJlcnMobik6YnJlYWsgICAgZm9yIGkgaW4gcmFuZ2UoMSxuKzEpOmJyZWFrICAgICAgICBwcmludChpKWJyZWFr;1;-1;38350;2017-12-06 13:38:47
1955;1636379;2;ZGVmIGZpYm9uYWNjaShuKTpicmVhayAgICBudW0gPSAxYnJlYWsgICAgbnVtMiA9IDBicmVhayAgICBudW0zID0gMGJyZWFrICAgIGZvciBpIGluIHJhbmdlKG4pOmJyZWFrICAgICAgICBudW0zID0gbnVtMmJyZWFrICAgICAgICBudW0yID0gc3VtKG51bSwgbnVtMilicmVhayAgICAgICAgbnVtID0gbnVtM2JyZWFrYnJlYWtkZW;1;-1;894950;2017-12-06 13:59:26
1956;1636379;3;ZGVmIGZhY3RvcmlhbChuKTpicmVhayAgICBmYWN0ID0gMWJyZWFrICAgIGZvciBpIGluIHJhbmdlKG4pOmJyZWFrICAgICAgICBmYWN0ID0gZmFjdCAqIChuLWkpYnJlYWsgICAgcmV0dXJuIGZhY3Q=;1;-1;557250;2017-12-06 14:11:44
1957;1636379;7;ZGVmIGRpdmlzb3JzKG4pOmJyZWFrICAgIGRpdiA9IDFicmVhayAgICB3aGlsZSBkaXYgIT0gbisxOmJyZWFrICAgICAgICBpZiBuJWRpdiA9PSAwOmJyZWFrICAgICAgICAgICAgcHJpbnQoZGl2KWJyZWFrICAgICAgICBkaXYgKz0gMWJyZWFr;1;-1;122950;2017-12-06 14:13:50
1958;1636379;18;ZGVmIGRpZ2l0X3N1bShuKTpicmVhayAgICBudW0gPSBzdHIobilicmVhayAgICBzdW0gPSAwYnJlYWsgICAgZm9yIGl0ZW0gaW4gbnVtOmJyZWFrICAgICAgICBzdW0gKz0gaW50KGl0ZW0pYnJlYWsgICAgcmV0dXJuKHN1bSlicmVhaw==;1;-1;126100;2017-12-06 14:16:21
1959;1636379;20;ZGVmIGRpdmlzb3JzX2NvdW50KG4pOmJyZWFrICAgIGRpdiA9IDFicmVhayAgICBjb3VudCA9IDBicmVhayAgICB3aGlsZSBkaXYgPD0gbjpicmVhayAgICAgICAgaWYgbiVkaXYgPT0gMDpicmVhayAgICAgICAgICAgIGNvdW50ICs9IDFicmVhayAgICAgICAgZGl2ICs9IDFicmVhayAgICByZXR1cm4oY291bnQpYnJlYWs=;1;-1;94100;2017-12-06 14:18:03
1960;1636379;21;ZGVmIHBvd2VycyhiYXNlLCBuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZSgxLG4rMSk6YnJlYWsgICAgICAgIHByaW50KGJhc2UqKmkpYnJlYWs=;1;-1;59200;2017-12-06 14:19:05
1961;1636379;22;ZGVmIHByaW50X3ByaW1lcyhuKTpicmVhayAgICBjb3VudCA9IDBicmVhayAgICBudW0gPSAyYnJlYWsgICAgd2hpbGUgY291bnQgIT0gbjpicmVhayAgICAgICAgcHJpbWUgPSBUcnVlYnJlYWsgICAgICAgIGZvciBpIGluIHJhbmdlKDIsbnVtKTpicmVhayAgICAgICAgICAgIGlmIG51bSVpID09IDA6YnJlYWsgICAgICAgICAgIC;1;-1;1262800;2017-12-06 14:43:48
1962;1636379;23;ZGVmIGdyZWF0ZXN0X2NvbW1vbl9kaXZpc29yKGEsIGIpOmJyZWFrICAgIGlmIGIgPiBhOmJyZWFrICAgICAgICBhLGIgPSBiLGFicmVhayAgICB3aGlsZSBiICE9IDA6YnJlYWsgICAgICAgIHBvbSA9IGJicmVhayAgICAgICAgYiA9IGElYmJyZWFrICAgICAgICBhID0gcG9tYnJlYWsgICAgcmV0dXJuKGEpYnJlYWs=;1;-1;78550;2017-12-06 14:50:45
1963;1636690;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCBuKWJyZWFr;0;-1;5800;2017-12-06 14:52:55
1964;1636379;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgZm9yIGogaW4gcmFuZ2Uobik6YnJlYWsgICAgICAgIAlwcmludCgiIyIsIGVuZD0iICIpYnJlYWsgICAgICAgIHByaW50KClicmVhaw==;1;-1;86550;2017-12-06 14:53:00
1965;1636379;9;ZGVmIGVtcHR5X3NxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgZm9yIGogaW4gcmFuZ2Uobik6YnJlYWsgICAgICAgICAgICBpZiBpID09IDAgb3IgaSA9PSBuLTE6YnJlYWsgICAgICAgIAkJcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgICAgICAgICAgZWxpZiBqID09IDAgb3IgaiA9PS;1;-1;179600;2017-12-06 14:56:24
1966;1625382;13;ZGVmIHN0cmluZ19pbnRlcnNlY3Rpb24obGVmdCwgcmlnaHQpOmJyZWFrICAgIHggPSBsZW4obGVmdClicmVhayAgICB5ID0gbGVuKHJpZ2h0KWJyZWFrICAgIGlmIHggPD0geTpicmVhayAgICAgICAgY291bnQgPSB4YnJlYWsgICAgZWxzZTpicmVhayAgICAgICAgY291bnQgPSB5YnJlYWsgICAgZm9yIGkgaW4gcmFuZ2UoY291bn;1;-1;423250;2017-12-06 15:12:17
1967;1625382;14;ZGVmIHBhbGluZHJvbSh0ZXh0KTpicmVhayAgICBpZiBsZW4odGV4dCkgJSAyID09IDE6YnJlYWsgICAgICAgIHggPSBsZW4odGV4dCkvLzIrMWJyZWFrICAgIGVsc2U6YnJlYWsgICAgICAgIHggPSBsZW4odGV4dCkvLzJicmVhayAgICBicmVhayAgICBmcm9udCA9ICIiYnJlYWsgICAgYmFjayA9ICIiYnJlYWsgICAgZm9yIGkgaW;1;-1;730000;2017-12-06 16:10:43
1968;1636966;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaiBpbiByYW5nZShuKTogYnJlYWsJICAgIGZvciBpIGluIHJhbmdlKG4pOmJyZWFrICAgIAkgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIAlwcmludCgpYnJlYWs=;1;-1;56250;2017-12-06 16:45:50
1969;1636966;17;ZGVmIGZpdmVfbXVsdGlwbGVzKG51bV9saXN0KTpicmVhayAgICBhID0gW11icmVhayAgICBmb3IgaSBpbiBudW1fbGlzdDpicmVhayAgICAgICAgaWYgaSU1ID09IDA6YnJlYWsgICAgICAgICAgYS5hcHBlbmQoaSlicmVhayAgICAgICAgYnJlYWsgICAgcmV0dXJuIGFicmVhaw==;1;-1;56750;2017-12-06 16:50:32
1970;1636966;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICBzID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgCXMqPSBpYnJlYWsgICAgcmV0dXJuIHNicmVhaw==;1;-1;75450;2017-12-06 16:51:52
1971;1616742;35;ZGVmIHNlcXVlbmNlcyhuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZSgxLCBuKzEpOmJyZWFrICAgICAgICBmb3IgaiBpbiByYW5nZSgxLCBpKzEpOmJyZWFrICAgICAgICAgICAgcHJpbnQoaiwgZW5kPSIgIilicmVhayAgICAgICAgcHJpbnQoKWJyZWFr;1;-1;217800;2017-12-06 17:10:34
1972;1616742;36;ZGVmIHByb2R1Y3RzKG4pOmJyZWFrICAgIGZvciByb3cgaW4gcmFuZ2UoMSwgbisxKTpicmVhayAgICAgICAgZm9yIGNvbCBpbiByYW5nZSgxLCBuKzEpOmJyZWFrICAgICAgICAgICAgcHJpbnQocm93ICogY29sLCBlbmQ9IiAiKWJyZWFrICAgICAgICBwcmludCgpYnJlYWs=;1;-1;25100;2017-12-06 17:16:33
1973;1616742;37;ZGVmIHN0YXJzKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKG4pOmJyZWFrICAgICAgICBwcmludCgiKiIsIGVuZD0iIilicmVhayAgICAgICAgZm9yIGsgaW4gcmFuZ2UobiAvLyA1KTogIGJyZWFrICAgICAgICAJaWYgaSA9PSBrICogNSArIDQ6YnJlYWsgICAgICAgICAgICAJcHJpbnQoInwiLCBlbmQ9IiIpYnJlYWsgICAgcH;1;-1;178600;2017-12-06 17:19:33
1974;1616742;1;ZGVmIG51bWJlcnMobik6YnJlYWsgICAgZm9yIGkgaW4gcmFuZ2UoMSwgbisxKTpicmVhayAgICAJcHJpbnQoaSlicmVhaw==;1;-1;61800;2017-12-06 17:22:40
1975;1636966;15;ZGVmIGV2ZXJ5X3NlY29uZF9udW1iZXIobnVtX2xpc3QpOmJyZWFrICAgIHByaW50KG51bV9saXN0WzBdKWJyZWFrICAgIGlmIGxlbihudW1fbGlzdCkgPj0gMzpicmVhayAgICAgICAgZXZlcnlfc2Vjb25kX251bWJlcihudW1fbGlzdFsyOmxlbihudW1fbGlzdCldKWJyZWFrICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC;1;-1;304000;2017-12-06 17:40:27
1976;1518209;31;ZGVmIGZpbmRfbG9uZ2VzdF93b3JkKHdvcmRzX2xpc3QpOmJyZWFrICAgIHJldHVybiAiImJyZWFr;0;-1;28350;2017-12-06 17:44:30
1977;1518209;31;ZGVmIGZpbmRfbG9uZ2VzdF93b3JkKHdvcmRzX2xpc3QpOmJyZWFrICAgIHJldHVybiAiImJyZWFr;0;-1;55100;2017-12-06 17:44:57
1978;1637182;25;ZGVmIGNvdW50X2EodGV4dCk6YnJlYWsgICAgY291bnQ9MGJyZWFrICAgIGZvciBpIGluIHJhbmdlIHRleHQ6YnJlYWsgICAgICAgIGlmIHRleHRbaV09PSJBIiBvciB0ZXh0W2ldPT0iYSI6YnJlYWsgICAgICAgICAgICBjb3VudD1jb3VudCsxYnJlYWsgICAgcmV0dXJuIGNvdW50YnJlYWs=;0;-1;174950;2017-12-06 17:45:09
1979;1518209;31;ZGVmIGZpbmRfbG9uZ2VzdF93b3JkKHdvcmRzX2xpc3QpOmJyZWFr;0;-1;151500;2017-12-06 17:46:33
1980;1518209;31;ZGVmIGZpbmRfbG9uZ2VzdF93b3JkKHdvcmRzX2xpc3QpOmJyZWFr;0;-1;193900;2017-12-06 17:48:45
1981;1518209;31;ZGVmIGZpbmRfbG9uZ2VzdF93b3JkKHdvcmRzX2xpc3QpOmJyZWFr;0;-1;194850;2017-12-06 17:48:46
1982;1518209;31;ZGVmIGZpbmRfbG9uZ2VzdF93b3JkKHdvcmRzX2xpc3QpOmJyZWFr;0;-1;195700;2017-12-06 17:48:47
1983;1518209;31;ZGVmIGZpbmRfbG9uZ2VzdF93b3JkKHdvcmRzX2xpc3QpOmJyZWFr;0;-1;196300;2017-12-06 17:48:47
1984;1518209;31;ZGVmIGZpbmRfbG9uZ2VzdF93b3JkKHdvcmRzX2xpc3QpOmJyZWFr;0;-1;196650;2017-12-06 17:48:48
1985;1518209;31;YnJlYWs=;0;-1;264550;2017-12-06 17:49:56
1986;1518209;31;YnJlYWs=;0;-1;272200;2017-12-06 17:50:03
1987;1518209;31;YnJlYWs=;0;-1;273250;2017-12-06 17:50:04
1988;1518209;31;YnJlYWs=;0;-1;275400;2017-12-06 17:50:07
1989;1518209;31;YnJlYWs=;0;-1;319250;2017-12-06 17:50:50
1990;1628030;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQobioiIyAiKWJyZWFrYnJlYWs=;1;-1;49050;2017-12-06 18:33:48
1991;1637371;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCAyKm4pYnJlYWsgICAgcHJpbnQoIlRyb2puYXNvYmVrIiwgMypuKWJyZWFrICAgIHByaW50KCJEZXNldGluYXNvYmVrIiwgMTAqbilicmVhaw==;1;-1;66850;2017-12-06 18:41:59
1992;1637371;32;ZGVmIG5lYXJfZmlmdHkobik6YnJlYWsgICAgaWYgNTAgLSBuIDw9IDEwIGFuZCA1MCAtIG4gPj0gLTEwOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIGlmIDE1MCAtIG4gPD0gMTAgYW5kIDE1MCAtIG4gPj0gLTEwOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;1;-1;128700;2017-12-06 18:44:11
1993;1628030;9;ZGVmIGVtcHR5X3NxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKzEpOmJyZWFrICAgICAgICBpZiBpID09IDAgb3IgaSA9PSBuIDpicmVhayAgICAgICAgCXByaW50KCIgIyIqbilicmVhayAgICAgICAgZWxzZTpicmVhayAgICAgICAgICAgIHByaW50KCIgIyIsICIuIiwgIi4iLCAiLiIsICIjIilicmVha2JyZWFr;0;-1;457550;2017-12-06 19:06:06
1994;1162084;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRGVzZXRpbuFzb2JlayIsIG4pYnJlYWs=;0;-1;47450;2017-12-06 19:07:19
1995;1628030;38;ZGVmIGNyb3NzKG4pOiAgICBicmVhayAgICBmb3IgaSBpbiByYW5nZSgyLCAzKm4rMik6ICAgICAgICBicmVhayAgICAgICAgaWYgaSA9PSAoMipuKSBvciBpID09ICgyKm4rMSk6YnJlYWsgICAgICAgICAgICBwcmludChuKiIuIm4qIiMibioiLiIpYnJlYWsgICAgICAgIGVsc2U6YnJlYWsgICAgICAgICAgICBwcmludCgzKm4qIi;0;-1;250700;2017-12-06 19:12:56
1996;1625234;2;ZGVmIGZpYm9uYWNjaShuKTpicmVhayAgICByZXMgPSBbMSwgMV1icmVhayAgICBmb3IgaSBpbiByYW5nZSgxLCBuICsgMSk6YnJlYWsgICAgICAgIGlmIGkgPCAzOmJyZWFrICAgICAgICAgICAgcHJpbnQocmVzW2kgLSAxXSlicmVhayAgICAgICAgZWxzZTpicmVhayAgICAgICAgCXJlcy5hcHBlbmQocmVzWy0xXSArIHJlc1stMl;1;-1;303350;2017-12-06 20:02:11
1997;1637894;14;ZGVmIHBhbGluZHJvbSh0ZXh0KTpicmVhayAgICBpZiBsZW4odGV4dCkgPCAyOiByZXR1cm4gVHJ1ZWJyZWFrICAgIGlmIHRleHRbMF0gIT0gdGV4dFstMV06IHJldHVybiBGYWxzZWJyZWFrICAgIHJldHVybiBwYWxpbmRyb20odGV4dFsxOi0xXSlicmVhayAgICByZXR1cm4gVHJ1ZWJyZWFr;1;-1;311850;2017-12-06 22:43:14
1998;1637979;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCAyKm4pYnJlYWsgICAgcHJpbnQoIlRyb2puYXNvYmVrIiwgMypuKWJyZWFrICAgIHByaW50KCJEZXNldGluYXNvYmVrIiwgMTAqbilicmVhaw==;1;-1;72450;2017-12-07 00:27:03
1999;1637979;32;ZGVmIG5lYXJfZmlmdHkobik6YnJlYWsgICAgaWYgNDA8PW48PTYwOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIGlmIDE0MDw9bjw9MTYwOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;1;-1;104550;2017-12-07 00:29:29
2000;1637979;33;ZGVmIGltcG9zZV9maW5lKGFnZSwgYmVlcik6YnJlYWsgICAgaWYgYWdlPDE4IGFuZCBiZWVyPT1UcnVlOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;1;-1;46550;2017-12-07 00:30:18
2001;1637979;35;ZGVmIHNlcXVlbmNlcyhuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgZm9yIGogaW4gcmFuZ2UoaSsxKTpicmVhayAgICAgICAgICAgIHByaW50KGorMSwgZW5kPSIgIilicmVhayAgICAgICAgcHJpbnQoKWJyZWFr;1;-1;37600;2017-12-07 00:31:37
2002;1637979;36;ZGVmIHByb2R1Y3RzKG4pOmJyZWFrICAgIGZvciByb3cgaW4gcmFuZ2Uobik6YnJlYWsgICAgICAgIGZvciBjb2wgaW4gcmFuZ2Uobik6YnJlYWsgICAgICAgICAgICBwcmludCgoY29sKzEpKihyb3crMSksIGVuZD0iICIpYnJlYWsgICAgICAgIHByaW50KClicmVhaw==;1;-1;155500;2017-12-07 00:35:48
2003;1637979;37;ZGVmIHN0YXJzKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKG4pOmJyZWFrICAgICAgICBwcmludCgiKiIsIGVuZD0iIilicmVhayAgICAgICAgaWYgaSU1PT00OmJyZWFrICAgICAgICAgICAgcHJpbnQoInwiLCBlbmQ9IiIpYnJlYWsgICAgcHJpbnQoKWJyZWFr;1;-1;111250;2017-12-07 00:40:21
2004;1618883;35;ZGVmIHNlcXVlbmNlcyhuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZSgxLCBuKzEpOmJyZWFrICAgICAgICBmb3IgaiBpbiByYW5nZSgxLCBpKzEpOmJyZWFrICAgICAgICAgICAgcHJpbnQoaiwgZW5kPSIgIilicmVhayAgICAgICAgcHJpbnQoKWJyZWFr;1;-1;106950;2017-12-07 12:55:38
2005;1618883;36;ZGVmIHByb2R1Y3RzKG4pOmJyZWFrICAgIGZvciByb3cgaW4gcmFuZ2UoMSwgbisxKTpicmVhayAgICAgICAgZm9yIGNvbCBpbiByYW5nZSgxLCBuKzEpOmJyZWFrICAgICAgICAgICAgcHJpbnQocm93ICogY29sLCBlbmQ9IiAiKWJyZWFrICAgICAgICBwcmludCgpYnJlYWs=;1;-1;45050;2017-12-07 12:56:28
2006;1639340;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBkb3VibGUgPSAyKm5icmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCBkb3VibGUpYnJlYWsgICAgdHJpcGxlID0gMypuYnJlYWsgICAgcHJpbnQoIlRyb2puYXNvYmVrIiwgdHJpcGxlKWJyZWFrICAgIHRlbnRpbWVzID0gMTAqbmJyZWFrICAgIHByaW50KCJEZXNldGluYXNvYmVrIi;1;-1;81800;2017-12-07 14:39:47
2007;1639340;32;ZGVmIG5lYXJfZmlmdHkobik6YnJlYWsgICAgaWYgbiAtIDUwIDwgMTAgYW5kIG4gLSA1MCA IC0xMDpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICBlbHNlOmJyZWFrICAgIAlyZXR1cm4gRmFsc2VicmVhaw==;0;-1;162250;2017-12-07 14:42:47
2008;1639340;32;ZGVmIG5lYXJfZmlmdHkobik6YnJlYWsgICAgaWYgbiAtIDUwIDw9IDEwIGFuZCBuIC0gNTAgPj0gLTEwOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIGVsc2U6YnJlYWsgICAgCXJldHVybiBGYWxzZWJyZWFr;0;-1;177750;2017-12-07 14:43:03
2009;1639340;32;ZGVmIG5lYXJfZmlmdHkobik6YnJlYWsgICAgaWYgbiAtIDUwIDw9IDEwIGFuZCBuIC0gNTAgPj0gLTEwOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIGVsaWYgbiAtIDE1MCA8PSAxMCBhbmQgbiAtIDE1MCA PSAtMTA6YnJlYWsgICAgICAgIHJldHVybiBUcnVlYnJlYWsgICAgZWxzZTpicmVhayAgICAJcmV0dXJuIE;1;-1;237100;2017-12-07 14:44:03
2010;1639340;33;ZGVmIGltcG9zZV9maW5lKGFnZSwgYmVlcik6YnJlYWsgICAgaWYgYWdlIDwgMTggYW5kIGJlZXIgaXMgVHJ1ZTpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICBlbGlmIGFnZSA8IDE4IGFuZCBiZWVyIGlzIEZhbHNlOmJyZWFrICAgICAgICByZXR1cm4gRmFsc2VicmVhayAgICBlbHNlOmJyZWFrICAgIAlyZXR1cm4gRm;1;-1;94550;2017-12-07 14:45:48
2011;1639340;35;ZGVmIHNlcXVlbmNlcyhuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgZm9yIGogaW4gcmFuZ2UoaSsxKTpicmVhayAgICAgICAgICAgIHByaW50KGorMSwgZW5kPSIgIilicmVhayAgICAgICAgcHJpbnQoKWJyZWFr;1;-1;112700;2017-12-07 14:48:56
2012;1639340;36;ZGVmIHByb2R1Y3RzKG4pOmJyZWFrICAgIGZvciByb3cgaW4gcmFuZ2Uobik6YnJlYWsgICAgICAgIGZvciBjb2wgaW4gcmFuZ2Uobik6YnJlYWsgICAgICAgICAgICBwcmludCgocm93KzEpICogKGNvbCsxKSwgZW5kPSIgIilicmVhayAgICAgICAgcHJpbnQoKWJyZWFr;1;-1;70500;2017-12-07 14:50:10
2013;1639340;37;ZGVmIHN0YXJzKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKG4pOmJyZWFrICAgICAgICBwcmludCgiKiIsIGVuZD0iIilicmVhayAgICAgICAgaWYgaSA9PSA0OmJyZWFrICAgICAgICAgICAgcHJpbnQoInwiLCBlbmQ9IiIpYnJlYWsgICAgcHJpbnQoKWJyZWFr;0;-1;33550;2017-12-07 14:50:47
2014;1639340;37;ZGVmIHN0YXJzKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKG4pOmJyZWFrICAgICAgICBwcmludCgiKiIsIGVuZD0iIilicmVhayAgICAgICAgaWYgaSAlIDUgPT0gNDpicmVhayAgICAgICAgICAgIHByaW50KCJ8IiwgZW5kPSIiKWJyZWFrICAgIHByaW50KClicmVhaw==;1;-1;109450;2017-12-07 14:52:04
2015;1639340;28;ZGVmIHN0cmluZ196aXAodGV4dDEsIHRleHQyKTpicmVhayAgICB0ZXh0NCA9ICIiYnJlYWsgICAgdGV4dDMgPSB6aXAodGV4dDEsIHRleHQyKWJyZWFrICAgIGZvciBpIGluIHRleHQzOmJyZWFrICAgIAlwcmludChpLCBlbmQ9IiIpYnJlYWs=;0;-1;274200;2017-12-07 15:18:02
2016;1639340;28;ZGVmIHN0cmluZ196aXAodGV4dDEsIHRleHQyKTpicmVhayAgICB0ZXh0NCA9ICIiYnJlYWsgICAgdGV4dDMgPSB6aXAodGV4dDEsIHRleHQyKWJyZWFrICAgIHJldHVybiBzdHIodGV4dDMpYnJlYWs=;0;-1;333950;2017-12-07 15:19:02
2017;1639809;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;12450;2017-12-07 15:56:17
2018;1639809;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;24450;2017-12-07 15:56:29
2019;1579127;35;YnJlYWs=;0;-1;15650;2017-12-07 16:02:46
2020;1579127;35;YnJlYWtURVJFWktBIA==;0;-1;26450;2017-12-07 16:02:57
2021;1579127;35;YnJlYWtURVJFWktBIA==;0;-1;33600;2017-12-07 16:03:04
2022;1579127;35;YnJlYWtURVJFWktBIA==;0;-1;41000;2017-12-07 16:03:12
2023;33163;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCBuKWJyZWFr;0;-1;10700;2017-12-07 16:26:00
2024;33163;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCBuKWJyZWFr;0;-1;12850;2017-12-07 16:26:02
2025;1356155;32;ZGVmIG5lYXJfZmlmdHkobik6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWs=;0;-1;5400;2017-12-07 16:27:20
2026;1356155;4;ZGVmIGFscGhhYmV0KG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKG4pOmJyZWFrICAgICAgICBwcmludCgnQScpYnJlYWsgICAgICAgIHByaW50KCdCJylicmVhayAgICAgICAgcHJpbnQoJ0MnKWJyZWFrICAgICAgICBwcmludCgnRCcpYnJlYWsgICAgICAgIHByaW50KCdFJylicmVhayAgICAgICAgcHJpbnQoJ0YnKQ==;0;-1;180050;2017-12-07 16:32:22
2027;1356155;4;ZGVmIGFscGhhYmV0KG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKG4pOmJyZWFrICAgICAgICBwcmludCgnQScpYnJlYWsgICAgICAgIHByaW50KCdCJylicmVhayAgICAgICAgcHJpbnQoJ0MnKWJyZWFrICAgICAgICBwcmludCgnRCcpYnJlYWsgICAgICAgIHByaW50KCdFJylicmVhayAgICAgICAgcHJpbnQoJ0YnKQ==;0;-1;189750;2017-12-07 16:32:32
2028;1356155;4;ZGVmIGFscGhhYmV0KG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKG4pOmJyZWFrICAgICAgICBwcmludCgnQScpYnJlYWsgICAgICAgIHByaW50KCdCJylicmVhayAgICAgICAgcHJpbnQoJ0MnKWJyZWFrICAgICAgICBwcmludCgnRCcpYnJlYWsgICAgICAgIHByaW50KCdFJylicmVhayAgICAgICAgcHJpbnQoJ0YnKWJyZWFrIC;0;-1;265600;2017-12-07 16:33:50
2029;1356155;4;ZGVmIGFscGhhYmV0KG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKG4pOmJyZWFrICAgICAgICBwcmludCgnQScpYnJlYWsgICAgICAgIHByaW50KCdCJylicmVhayAgICAgICAgcHJpbnQoJ0MnKWJyZWFrICAgICAgICBwcmludCgnRCcpYnJlYWsgICAgICAgIHByaW50KCdFJylicmVhayAgICAgICAgcHJpbnQoJ0YnKWJyZWFrIC;0;-1;340800;2017-12-07 16:35:08
2030;1356155;4;ZGVmIGFscGhhYmV0KG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKG4pOmJyZWFrICAgICAgICBwcmludCgnQScpYnJlYWsgICAgICAgIHByaW50KCdCJylicmVhayAgICAgICAgcHJpbnQoJ0MnKWJyZWFrICAgICAgICBwcmludCgnRCcpYnJlYWsgICAgICAgIHByaW50KCdFJylicmVhayAgICAgICAgcHJpbnQoJ0YnKWJyZWFrIC;0;-1;350300;2017-12-07 16:35:19
2031;1640079;4;ZGVmIGFscGhhYmV0KG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKG4pOmJyZWFrICAgICAgICBwcmludChjaHIoNjUraSUyNikpYnJlYWs=;1;-1;691350;2017-12-07 17:26:59
2032;1162084;1;ZGVmIG51bWJlcnMoMTApOmJyZWFrICAgIHByaW50KDEwKWJyZWFr;0;-1;19350;2017-12-07 17:35:02
2033;1162084;1;ZGVmIG51bWJlcnMoMyk6YnJlYWsgICAgcHJpbnQoMylicmVhaw==;0;-1;53100;2017-12-07 17:35:36
2034;1162084;34;YnJlYWs=;0;-1;71850;2017-12-07 17:38:14
2035;1162084;34;YnJlYWs=;0;-1;110600;2017-12-07 17:38:52
2036;1162084;34;YnJlYWs=;0;-1;76600;2017-12-07 17:43:08
2037;1162084;34;NmJyZWFr;0;-1;163150;2017-12-07 17:44:35
2038;1162084;34;bXVsdGlwbGVzKDYpYnJlYWs=;0;-1;181150;2017-12-07 17:44:53
2039;1162084;34;ZGVmIG11bHRpcGxlcyg2KTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCA2KWJyZWFr;0;-1;24800;2017-12-07 17:46:34
2040;1641420;30;ZGVmIG1vc3RfY29tbW9uKG15bGlzdCk6YnJlYWsgICAgYnJlYWsgICAgcmV0dXJuIDBicmVhaw==;0;-1;94100;2017-12-08 07:40:44
2041;1641420;30;ZGVmIG1vc3RfY29tbW9uKG15bGlzdCk6YnJlYWsgICAgYnJlYWsgICAgcmV0dXJuIDBicmVhaw==;0;-1;94500;2017-12-08 07:40:45
2042;1641722;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;47550;2017-12-08 09:38:28
2043;1343421;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCBuKWJyZWFr;0;-1;104300;2017-12-08 09:39:29
2044;1642209;33;ZGVmIGltcG9zZV9maW5lKGFnZSwgYmVlcik6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWtwcmludChpbXBvc2VfZmluZSg1NywgVHJ1ZSkp;0;-1;44050;2017-12-08 12:18:26
2045;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;453000;2017-12-08 13:03:30
2046;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;653750;2017-12-08 13:06:51
2047;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;806200;2017-12-08 13:10:31
2048;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;809450;2017-12-08 13:10:34
2049;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;811500;2017-12-08 13:10:36
2050;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;812150;2017-12-08 13:10:36
2051;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;812750;2017-12-08 13:10:37
2052;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;813200;2017-12-08 13:10:37
2053;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;813700;2017-12-08 13:10:38
2054;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;814450;2017-12-08 13:10:39
2055;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;815150;2017-12-08 13:10:39
2056;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;815550;2017-12-08 13:10:40
2057;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;816050;2017-12-08 13:10:40
2058;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;816500;2017-12-08 13:10:41
2059;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;816950;2017-12-08 13:10:41
2060;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;817500;2017-12-08 13:10:42
2061;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;817950;2017-12-08 13:10:42
2062;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;818400;2017-12-08 13:10:43
2063;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;818900;2017-12-08 13:10:43
2064;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;819400;2017-12-08 13:10:44
2065;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;820050;2017-12-08 13:10:44
2066;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;820550;2017-12-08 13:10:45
2067;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;822100;2017-12-08 13:10:46
2068;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;822600;2017-12-08 13:10:47
2069;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;821550;2017-12-08 13:10:47
2070;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;822750;2017-12-08 13:10:47
2071;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;822900;2017-12-08 13:10:47
2072;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;823100;2017-12-08 13:10:47
2073;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;823250;2017-12-08 13:10:48
2074;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;822250;2017-12-08 13:10:48
2075;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;822450;2017-12-08 13:10:48
2076;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;823650;2017-12-08 13:10:48
2077;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;823850;2017-12-08 13:10:48
2078;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;824050;2017-12-08 13:10:48
2079;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;824250;2017-12-08 13:10:49
2080;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;824450;2017-12-08 13:10:49
2081;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;824650;2017-12-08 13:10:49
2082;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;824800;2017-12-08 13:10:49
2083;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;825000;2017-12-08 13:10:49
2084;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;825200;2017-12-08 13:10:49
2085;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;825400;2017-12-08 13:10:50
2086;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;825550;2017-12-08 13:10:50
2087;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;825750;2017-12-08 13:10:50
2088;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;825950;2017-12-08 13:10:50
2089;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;826100;2017-12-08 13:10:50
2090;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;826300;2017-12-08 13:10:51
2091;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;826500;2017-12-08 13:10:51
2092;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;826650;2017-12-08 13:10:51
2093;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;826850;2017-12-08 13:10:51
2094;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;827050;2017-12-08 13:10:51
2095;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;827250;2017-12-08 13:10:52
2096;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;827400;2017-12-08 13:10:52
2097;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;827600;2017-12-08 13:10:52
2098;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;827750;2017-12-08 13:10:52
2099;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;827950;2017-12-08 13:10:52
2100;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;828150;2017-12-08 13:10:52
2101;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;828350;2017-12-08 13:10:53
2102;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;828500;2017-12-08 13:10:53
2103;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;828700;2017-12-08 13:10:53
2104;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;828900;2017-12-08 13:10:53
2105;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;829100;2017-12-08 13:10:53
2106;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;829300;2017-12-08 13:10:54
2107;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;829500;2017-12-08 13:10:54
2108;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;829700;2017-12-08 13:10:54
2109;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;829900;2017-12-08 13:10:54
2110;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;830100;2017-12-08 13:10:54
2111;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;830300;2017-12-08 13:10:55
2112;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;830500;2017-12-08 13:10:55
2113;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;830700;2017-12-08 13:10:55
2114;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;830900;2017-12-08 13:10:55
2115;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;831100;2017-12-08 13:10:55
2116;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;831300;2017-12-08 13:10:56
2117;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;831500;2017-12-08 13:10:56
2118;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;832100;2017-12-08 13:10:56
2119;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;832300;2017-12-08 13:10:57
2120;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;832450;2017-12-08 13:10:57
2121;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;832650;2017-12-08 13:10:57
2122;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhawlyZXR1cm4geA==;0;-1;833500;2017-12-08 13:10:58
2123;1642345;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhayAgICByZXR1cm4geA==;1;-1;19850;2017-12-08 13:11:34
2124;1642345;15;ZGVmIGV2ZXJ5X3NlY29uZF9udW1iZXIobnVtX2xpc3QpOmJyZWFrICAgIHg9MWJyZWFrICAgIGZvciBpIGluIG51bV9saXN0OmJyZWFrICAgICAgICB4PXgrMWJyZWFrICAgICAgICBpZiB4JTIgPT0gMDpicmVhayAgICAJCXByaW50KGkpYnJlYWs=;1;-1;102450;2017-12-08 13:13:22
2125;1622391;16;ZGVmIG1heF9wYWlyX3N1bShudW1fbGlzdCk6YnJlYWsgICAgeCA9IFtdYnJlYWsgICAgZm9yIGkgaW4gcmFuZ2UobGVuKG51bV9saXN0KS0xKTpicmVhayAgICAgICAgeC5hcHBlbmQobnVtX2xpc3RbaV0rbnVtX2xpc3RbaSsxXSlicmVhayAgICByZXR1cm4gbWF4KHgp;1;-1;200400;2017-12-08 13:32:12
2126;1622391;17;ZGVmIGZpdmVfbXVsdGlwbGVzKG51bV9saXN0KTpicmVhayAgICB4ID0gW11icmVhayAgICBmb3IgaSBpbiBudW1fbGlzdDpicmVhayAgICAgICAgaWYgaSU1ID09IDA6YnJlYWsgICAgICAgICAgICB4LmFwcGVuZChpKWJyZWFrICAgIHJldHVybih4KWJyZWFr;1;-1;61550;2017-12-08 13:36:15
2127;1622391;29;ZGVmIHVuaXF1ZShteWxpc3QpOmJyZWFrICAgIHg9W11icmVhayAgICBmb3IgaSBpbiBteWxpc3Q6YnJlYWsgICAgICAgIGFwcGVuZCA9IFRydWVicmVhayAgICAgICAgZm9yIGogaW4geDpicmVhayAgICAgICAgICAgIGlmIGkgPT0gajpicmVhayAgICAgICAgICAgICAgICBhcHBlbmQgPSBGYWxzZWJyZWFrICAgICAgICBpZiBhcH;1;-1;4500;2017-12-08 13:44:17
2128;1622391;29;ZGVmIHVuaXF1ZShteWxpc3QpOmJyZWFrICAgIHg9W11icmVhayAgICBmb3IgaSBpbiBteWxpc3Q6YnJlYWsgICAgICAgIGFwcGVuZCA9IFRydWVicmVhayAgICAgICAgZm9yIGogaW4geDpicmVhayAgICAgICAgICAgIGlmIGkgPT0gajpicmVhayAgICAgICAgICAgICAgICBhcHBlbmQgPSBGYWxzZWJyZWFrICAgICAgICBpZiBhcH;1;-1;69750;2017-12-08 13:46:01
2129;1622391;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICB4ID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIHggPSB4KmlicmVhayAgICByZXR1cm4geGJyZWFr;1;-1;121800;2017-12-08 13:53:40
2130;1622391;15;ZGVmIGV2ZXJ5X3NlY29uZF9udW1iZXIobnVtX2xpc3QpOmJyZWFrICAgIHggPSAxYnJlYWsgICAgZm9yIGkgaW4gbnVtX2xpc3Q6YnJlYWsgICAgICAgIHggPSB4ICsgMWJyZWFrICAgICAgICBpZiB4JTIgPT0gMDpicmVhayAgICAgICAgICAgIHByaW50KGkpYnJlYWs=;1;-1;140750;2017-12-08 13:56:03
2131;12;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIChhICUgMiAhPSBiJSAyKWJyZWFr;1;-1;47500;2017-12-08 14:58:11
2132;12;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiAoYSA8IDMgb3IgYiA8IDMpYnJlYWs=;0;-1;14150;2017-12-08 15:04:25
2133;12;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiAoYSA8IDMgb3IgYiA8IDMgb3IgYyA8IDMpYnJlYWs=;1;-1;21200;2017-12-08 15:04:32
2134;12;45;ZGVmIHByaW50X3N1bXMobik6YnJlYWsgICAgZm9yIGkgaW4gcmFuZ2UoMSwgbik6YnJlYWsgICAgICAgIHByaW50KG4sICI9IiwgaSwgIisiLCBuLWkpYnJlYWs=;1;-1;12300;2017-12-08 15:32:04
2135;1554097;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;8250;2017-12-08 15:55:53
2136;1642757;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgaWYgKGEgJSAyID09IDEgYW5kIGIgJSAyID09IDApIG9yIChhICUgMiA9PSAwIGFuZCBiICUgMiA9PSAxKTpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICBlbHNlOmJyZWFrICAgICAgICByZXR1cm4gRmFsc2VicmVhaw==;1;-1;92300;2017-12-08 16:08:04
2137;1642757;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgCWlmIGEgPCAzIG9yIGIgPCAzIG9yIGMgPCAzOmJyZWFrICAgIAlyZXR1cm4gVHJ1ZWJyZWFrICAgCWVsc2U6YnJlYWsgICAgCXJldHVybiBGYWxzZWJyZWFr;1;-1;136300;2017-12-08 16:10:28
2138;1642757;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCBuICogMilicmVhayAgICBwcmludCgiVHJvam5hc29iZWsiLCBuICogMylicmVhayAgICBwcmludCgiRGVzZXRpbmFzb2JlayIsIG4gKiAxMCk=;1;-1;280700;2017-12-08 16:15:11
2139;1642757;32;ZGVmIG5lYXJfZmlmdHkobik6YnJlYWsgICAgaWYgbiA IDM5IGFuZCBuIDwgNjEgb3IgbiA IDEzOSBhbmQgbiA8IDE2MTpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICBlbHNlOmJyZWFrICAgICAgICByZXR1cm4gRmFsc2VicmVhaw==;1;-1;165050;2017-12-08 16:17:59
2140;1642757;33;ZGVmIGltcG9zZV9maW5lKGFnZSwgYmVlcik6YnJlYWsgICAgaWYgYWdlIDwgMTggYW5kIGJlZXIgPT0gVHJ1ZTpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICBlbHNlOmJyZWFrICAgICAgICByZXR1cm4gRmFsc2VicmVhaw==;1;-1;59750;2017-12-08 16:19:03
2141;1642757;45;ZGVmIHByaW50X3N1bXMobik6YnJlYWsgICAgZm9yIGkgaW4gcmFuZ2UoMSwgbik6YnJlYWsgICAgICAgIHByaW50KG4sICI9IiwgaSwgIisiLCBuIC0gaSlicmVhaw==;1;-1;90300;2017-12-08 16:21:06
2142;1642757;35;ZGVmIHNlcXVlbmNlcyhuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgZm9yIGogaW4gcmFuZ2UoMSwgaSArIDIpOmJyZWFrICAgICAgICAgICAgcHJpbnQoaiwgZW5kPSIgIilicmVhayAgICAgICAgcHJpbnQoKWJyZWFr;1;-1;14350;2017-12-08 16:22:25
2143;1642757;43;ZGVmIG9kZF9ldmVuKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKDIpOmJyZWFrICAgICAgICBmb3IgaiBpbiByYW5nZSgxLCBuICsgMSk6YnJlYWsgICAgICAgICAgICBpZiAoaStqKSAlIDIgPT0gMTpicmVhayAgICAgICAgICAgICAgICBwcmludChqLCBlbmQ9IiIpYnJlYWsgICAgICAgICAgICBlbHNlOmJyZWFrICAgICAgIC;1;-1;179900;2017-12-08 16:25:27
2144;1642757;36;ZGVmIHByb2R1Y3RzKG4pOmJyZWFrICAgIGZvciByb3cgaW4gcmFuZ2UoMSwgbiArIDEpOmJyZWFrICAgICAgICBmb3IgY29sIGluIHJhbmdlKDEsIG4gKyAxKTpicmVhayAgICAgICAgICAgIHByaW50KHJvdyAqIGNvbCwgZW5kPSIgIilicmVhayAgICAgICAgcHJpbnQoKWJyZWFr;1;-1;94500;2017-12-08 16:27:23
2145;1642757;37;ZGVmIHN0YXJzKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsIG4gKyAxKTpicmVhayAgICAgICAgcHJpbnQoIioiLCBlbmQ9IiIpYnJlYWsgICAgICAgIGlmIGkgJSA1ID09IDA6YnJlYWsgICAgICAgICAgICBwcmludCgifCIsIGVuZD0iIilicmVhayAgICBwcmludCgpYnJlYWs=;1;-1;91000;2017-12-08 16:28:57
2146;33155;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICByZXR1cm4gRmFsc2VicmVha3ByaW50KG5pY2UoMywgNSkpIGJyZWFrcHJpbnQobmljZSgyLCA0KSlicmVha3ByaW50KG5pY2UoMiwgNSkpYnJlYWtwcmludChuaWNlKDMsIDYpKQ==;0;-1;85250;2017-12-08 18:02:44
2147;1618852;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgaWYgYSAlIDI9PTAgYW5kIGIgJSAyICE9MDpicmVhayAgICAJcmV0dXJuIFRydWVicmVhayAgICBlbGlmIGEgJSAyICE9MCBhbmQgYiAlIDIgPT0wOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIGVsc2U6YnJlYWsgICAgICAgIHJldHVybiBGYWxzZWJyZWFr;1;-1;299950;2017-12-08 18:10:15
2148;1618852;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIGlmIGEgPCAzIG9yIGIgPCAzIG9yIGMgPCAzOmJyZWFrICAgIAlyZXR1cm4gVHJ1ZWJyZWFrICAgIGJyZWFrICAgIGVsc2U6YnJlYWsgICAgICAgIHJldHVybiBGYWxzZWJyZWFr;1;-1;188150;2017-12-08 18:13:28
2149;33155;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICByZXR1cm4gRmFsc2VicmVha3ByaW50KG5pY2UoMywgNSkpIGJyZWFrcHJpbnQobmljZSgyLCA0KSlicmVha3ByaW50KG5pY2UoMiwgNSkpYnJlYWtwcmludChuaWNlKDMsIDYpKQ==;0;-1;144950;2017-12-08 18:13:44
2150;1618852;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCAyKm4pYnJlYWsgICAgcHJpbnQoIlRyb2puYXNvYmVrIiwgMypuKWJyZWFrICAgIHByaW50KCJEZXNldGluYXNvYmVrIiwgMTAqbilicmVhaw==;1;-1;47350;2017-12-08 18:14:22
2151;1618852;45;ZGVmIHByaW50X3N1bXMobik6YnJlYWsgICAgZm9yIGkgaW4gcmFuZ2Uobik6YnJlYWsgICAgICAgIHByaW50KG4sICI9IiwgaSwgIisiLCBuLWkpYnJlYWs=;0;-1;95850;2017-12-08 18:16:22
2152;1618852;45;ZGVmIHByaW50X3N1bXMobik6YnJlYWsgICAgZm9yIGkgaW4gcmFuZ2UoMSwgbi0xKTpicmVhayAgICAgICAgcHJpbnQobiwgIj0iLCBpLCAiKyIsIG4taSlicmVhaw==;0;-1;186700;2017-12-08 18:22:48
2153;1618852;45;ZGVmIHByaW50X3N1bXMobik6YnJlYWsgICAgZm9yIGkgaW4gcmFuZ2UoMSwgbik6YnJlYWsgICAgICAgIHByaW50KG4sICI9IiwgaSwgIisiLCBuLWkpYnJlYWs=;1;-1;204750;2017-12-08 18:23:06
2154;1618852;43;ZGVmIG9kZF9ldmVuKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsIG4pOmJyZWFrICAgICAgICBpZiBpICUgMiA9PSAxOmJyZWFrICAgICAgICAgICAgcHJpbnQoaSwgZW5kPSIgIiwgXG4pYnJlYWsgICAgZm9yIGkgaW4gcmFuZ2UgKDEsIG4pOmJyZWFrICAgICAgICBpZiBpICUgMiA9PSAwOmJyZWFrICAgICAgICAgICAgcH;0;-1;228300;2017-12-08 18:41:37
2155;1549050;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;0;-1;21400;2017-12-08 18:49:40
2156;1549050;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;0;-1;21400;2017-12-08 18:49:40
2157;1549050;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;0;-1;24750;2017-12-08 18:49:44
2158;1549050;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;0;-1;25900;2017-12-08 18:49:46
2159;1643022;8;ZGJyZWFrdWpjbiBmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;16050;2017-12-08 19:13:50
2160;1643022;8;ZGJyZWFrdWpjbiBmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQsIGVuZD1icmVhayAgICBwcmludCgpYnJlYWs=;0;-1;24450;2017-12-08 19:13:58
2161;1612861;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;1450;2017-12-08 19:52:22
2162;1612861;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoImJyZWFrICAgICAgICAgICAgICAsIEtha2FvPSIgIilicmVhayAgICBwcmludCgpYnJlYWs=;0;-1;29100;2017-12-08 19:52:54
2163;1612861;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoImJyZWFrICAgICAgICAgICAgICAsIEtha2FvPSIgIilicmVhayAgICBwcmludCgpYnJlYWs=;0;-1;29700;2017-12-08 19:52:55
2164;1612861;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;29150;2017-12-08 19:53:38
2165;1612861;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;30100;2017-12-08 19:53:39
2166;1612861;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;30450;2017-12-08 19:53:39
2167;1612861;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;32100;2017-12-08 19:53:42
2168;1612861;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;32250;2017-12-08 19:53:42
2169;1612861;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;32350;2017-12-08 19:53:42
2170;1612861;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIlByaW50IiwgZW5kPSIgIilicmVhayAgICBwcmludCgpYnJlYWs=;0;-1;40650;2017-12-08 19:53:52
2171;1447336;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;14750;2017-12-08 20:37:41
2172;1447336;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;16750;2017-12-08 20:37:41
2173;1631228;41;ZGVmIG5pY2UoMyw1KTpicmVhayAgICByZXR1cm4gRmFsc2VicmVha2RlZiBuaWNlKDIsNCk6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWtkZWYgbmljZSgyLDUpOmJyZWFrICAgIHJldHVybiBUcnVlYnJlYWtkZWYgbmljZSgzLDYpOmJyZWFrICAgIHJldHVybiB0cnVlYnJlYWs=;0;-1;153250;2017-12-08 22:16:30
2174;1631228;41;ZGVmIG5pY2UoMywgNSk6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWtkZWYgbmljZSgyLDQpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFrZGVmIG5pY2UoMiw1KTpicmVhayAgICByZXR1cm4gVHJ1ZWJyZWFrZGVmIG5pY2UoMyw2KTpicmVhayAgICByZXR1cm4gdHJ1ZWJyZWFr;0;-1;161450;2017-12-08 22:16:38
2175;1631228;41;ZGVmIG5pY2UoMywgNSkpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFrZGVmIG5pY2UoMiw0KTpicmVhayAgICByZXR1cm4gRmFsc2VicmVha2RlZiBuaWNlKDIsNSk6YnJlYWsgICAgcmV0dXJuIFRydWVicmVha2RlZiBuaWNlKDMsNik6YnJlYWsgICAgcmV0dXJuIHRydWVicmVhaw==;0;-1;168150;2017-12-08 22:16:45
2176;1631228;41;cHJpbnQgbmljZSgzLDUpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFrZGVmIG5pY2UoMiw0KTpicmVhayAgICByZXR1cm4gRmFsc2VicmVha2RlZiBuaWNlKDIsNSk6YnJlYWsgICAgcmV0dXJuIFRydWVicmVha2RlZiBuaWNlKDMsNik6YnJlYWsgICAgcmV0dXJuIHRydWVicmVhaw==;0;-1;186000;2017-12-08 22:17:03
2177;1631228;41;cHJpbnQgbmljZSgzLDUpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFrZGVmIG5pY2UoMiw0KTpicmVhayAgICByZXR1cm4gRmFsc2VicmVha2RlZiBuaWNlKDIsNSk6YnJlYWsgICAgcmV0dXJuIFRydWVicmVha2RlZiBuaWNlKDMsNik6YnJlYWsgICAgcmV0dXJuIHRydWVicmVhaw==;0;-1;188300;2017-12-08 22:17:06
2178;1631228;41;cHJpbnQgbmljZSgzLDUpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFrZGVmIG5pY2UoMiw0KTpicmVhayAgICByZXR1cm4gRmFsc2VicmVha2RlZiBuaWNlKDIsNSk6YnJlYWsgICAgcmV0dXJuIFRydWVicmVha2RlZiBuaWNlKDMsNik6YnJlYWsgICAgcmV0dXJuIHRydWVicmVhaw==;0;-1;189850;2017-12-08 22:17:07
2179;1631228;41;cHJpbnQgKG5pY2UoMyw1KSk6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWtkZWYgbmljZSgyLDQpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFrZGVmIG5pY2UoMiw1KTpicmVhayAgICByZXR1cm4gVHJ1ZWJyZWFrZGVmIG5pY2UoMyw2KTpicmVhayAgICByZXR1cm4gdHJ1ZWJyZWFr;0;-1;197700;2017-12-08 22:17:15
2180;1631228;41;cHJpbnQgKG5pY2UoMyw1KSk6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWtwcmludCAobmljZSgyLDQpKTpicmVhayAgICByZXR1cm4gRmFsc2VicmVha3ByaW50IChuaWNlKDIsNSkpOmJyZWFrICAgIHJldHVybiBUcnVlYnJlYWtwcmludCAobmljZSgzLDYpKTpicmVhayAgICByZXR1cm4gdHJ1ZWJyZWFr;0;-1;235900;2017-12-08 22:17:53
2181;1631228;41;cHJpbnQgKG5pY2UoMywgNSkpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFrcHJpbnQgKG5pY2UoMiwgNCkpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFrcHJpbnQgKG5pY2UoMiwgNSkpOmJyZWFrICAgIHJldHVybiBUcnVlYnJlYWtwcmludCAobmljZSgzLCA2KSk6YnJlYWsgICAgcmV0dXJuIHRydWVicmVhaw==;0;-1;244700;2017-12-08 22:18:02
2182;1631228;41;cHJpbnQgKG5pY2UoMywgNSkpYnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWtwcmludCAobmljZSgyLCA0KSlicmVhayAgICByZXR1cm4gRmFsc2VicmVha3ByaW50IChuaWNlKDIsIDUpKWJyZWFrICAgIHJldHVybiBUcnVlYnJlYWtwcmludCAobmljZSgzLCA2KSlicmVhayAgICByZXR1cm4gdHJ1ZWJyZWFr;0;-1;251950;2017-12-08 22:18:10
2183;1631228;41;cHJpbnQgKG5pY2UoMywgNSkpYnJlYWticmVha3ByaW50IChuaWNlKDIsIDQpKWJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFrcHJpbnQgKG5pY2UoMiwgNSkpYnJlYWsgICAgcmV0dXJuIFRydWVicmVha3ByaW50IChuaWNlKDMsIDYpKWJyZWFrICAgIHJldHVybiB0cnVlYnJlYWs=;0;-1;257050;2017-12-08 22:18:15
2184;1631228;41;cHJpbnQgKG5pY2UoMywgNSkpYnJlYWs=;0;-1;260850;2017-12-08 22:18:18
2185;1631228;41;cHJpbnQobmljZSgzLCA1KSlicmVhaw==;0;-1;32950;2017-12-08 22:18:55
2186;1631228;41;cHJpbnQobmljZSgzLCA1KSk6YnJlYWsgICAgRmFsc2VicmVhayAgICBicmVhaw==;0;-1;50600;2017-12-08 22:19:13
2187;1631228;41;ZGVmKG5pY2UoMywgNSkpOmJyZWFrICAgIGJyZWFr;0;-1;64350;2017-12-08 22:19:27
2188;1631228;41;cHJpbnQobmljZSgzLCA1KSlicmVhayAgICBicmVhaw==;0;-1;75450;2017-12-08 22:19:38
2189;1631228;41;cHJpbnQobmljZSgzLCA1KSlicmVhayAgICBicmVhaw==;0;-1;121800;2017-12-08 22:20:31
2190;1631228;41;cHJpbnQobmljZSgzLCA1KSlicmVhayAgICBicmVhaw==;0;-1;123250;2017-12-08 22:20:32
2191;1631228;41;cHJpbnQobmljZSgzLCA1KSlicmVhayAgICBicmVhaw==;0;-1;131400;2017-12-08 22:20:41
2192;1631228;41;cHJpbnQobmljZSgzLCA1KSlicmVhayAgICBicmVhaw==;0;-1;135450;2017-12-08 22:20:45
2193;1631228;41;ZGVmIG5pY2UoMywgNSk6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWtkZWYgbmljZSgyLCA0KTpicmVhayAgICByZXR1cm4gRmFsc2VicmVha2RlZiBuaWNlKDIsIDUpOmJyZWFrICAgIHJldHVybiBUcnVlYnJlYWtkZWYgbmljZSgzLCA2KTpicmVhayAgICByZXR1cm4gVHJ1ZWJyZWFrIGJyZWFr;0;-1;108350;2017-12-08 22:22:43
2194;1631228;41;ZGVmIG5pY2UoMywgNSk6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWtkZWYgbmljZSgyLCA0KTpicmVhayAgICByZXR1cm4gRmFsc2VicmVha2RlZiBuaWNlKDIsIDUpOmJyZWFrICAgIHJldHVybiBUcnVlYnJlYWtkZWYgbmljZSgzLCA2KTpicmVhayAgICByZXR1cm4gVHJ1ZWJyZWFrIGJyZWFr;0;-1;110900;2017-12-08 22:22:45
2195;1631228;41;YnJlYWtkZWYgbmljZSgzLCA1KTpicmVhayAgICByZXR1cm4gRmFsc2VicmVha2RlZiBuaWNlKDIsIDQpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFrZGVmIG5pY2UoMiwgNSk6YnJlYWsgICAgcmV0dXJuIFRydWVicmVha2RlZiBuaWNlKDMsIDYpOmJyZWFrICAgIHJldHVybiBUcnVlYnJlYWsgYnJlYWs=;0;-1;130350;2017-12-08 22:23:14
2196;1631228;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;0;-1;12800;2017-12-08 22:23:55
2197;1631228;42;ZGVmIGhhcHB5KDMsIDQsIDIpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;0;-1;26900;2017-12-08 22:24:09
2198;1631228;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;0;-1;36900;2017-12-08 22:24:19
2199;1631228;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFrZGVmIGhhcHB5KDMsIDQsIDQpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFrZGVmIGhhcHB5KDEsIDEsIDIpOmJyZWFrICAgIHJldHVybiBUcnVlYnJlYWtkZWYgaGFwcHkoNSwgNSwgNSk6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWtkZWYgaGFwcH;0;-1;143350;2017-12-08 22:26:51
2200;1609061;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCAyKm4pYnJlYWsgICAgcHJpbnQoIlRyb2puYXNvYmVrIiwgMypuKWJyZWFrICAgIHByaW50KCJEZXNldGluYXNvYmVrIiwgMTAqbik=;1;-1;328950;2017-12-09 16:15:10
2201;1609061;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgaWYgKGEgLyAyID09IGEgLy8gMiBhbmQgYiAvIDIgPT0gYiAvLyAyKSBvciAoYSAvIDIgIT0gYSAvLyAyIGFuZCBiIC8gMiAhPSBiIC8vIDIpOmJyZWFrICAgICAgICByZXR1cm4gRmFsc2VicmVhayAgICBlbHNlOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZQ==;1;-1;1535300;2017-12-09 16:54:14
2202;1609061;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIGlmIGEgPCAzIG9yIGIgPCAzIG9yIGMgPCAzOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIGVsc2U6YnJlYWsgICAgICAgIHJldHVybiBGYWxzZWJyZWFr;1;-1;167450;2017-12-09 16:57:43
2203;1609061;32;ZGVmIG5lYXJfZmlmdHkobik6YnJlYWsgICAgaWYgbjw9NTArMTAgYW5kIG4 PTUwLTEwIG9yIG48PTE1MCsxMCBhbmQgbj49MTUwLTEwOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIGVsc2U6YnJlYWsgICAgICAgIHJldHVybiBGYWxzZWJyZWFr;1;-1;193100;2017-12-09 17:01:40
2204;1609061;33;ZGVmIGltcG9zZV9maW5lKGFnZSwgYmVlcik6YnJlYWsgICAgaWYgYWdlPD0xOCBhbmQgYmVlcj09VHJ1ZTpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICBlbHNlOmJyZWFrICAgICAgICByZXR1cm4gRmFsc2VicmVhaw==;1;-1;133850;2017-12-09 17:04:26
2205;1609061;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICB4PW5icmVhayAgICB3aGlsZSB4PjA6YnJlYWsgICAgICAgIGZvciBpIGluIHJhbmdlKG4pOmJyZWFrICAgICAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgICAgICBwcmludCgpYnJlYWsgICAgICAgIHg9eC0x;1;-1;385550;2017-12-09 17:13:06
2206;1628813;45;ZGVmIHByaW50X3N1bXMobik6YnJlYWsgICAgZm9yIGkgaW4gcmFuZ2UoMSxuKTpicmVhayAgICAgICAgcHJpbnQobiwgIj0iLCBpLCAiKyIsIChuLWkpKWJyZWFr;1;-1;54050;2017-12-09 18:45:45
2207;1628813;40;ZGVmIGJpZ04obik6YnJlYWsgICAgZm9yIGkgaW4gcmFuZ2Uobik6YnJlYWsgICAgICAgIHByaW50KCJ8IitpKiIgIisiIiJcIiIiKyhuLWkpKiIgIisifCIp;0;-1;417300;2017-12-09 19:44:49
2208;1628813;40;ZGVmIGJpZ04obik6YnJlYWsgICAgZm9yIGkgaW4gcmFuZ2Uobik6YnJlYWsgICAgICAgIHByaW50KCJ8IitpKiIgIisiIiJcIiIiKyhuLWktMSkqIiAiKyJ8Iik=;1;-1;457450;2017-12-09 19:45:29
2209;1628813;20;ZGVmIGRpdmlzb3JzX2NvdW50KG4pOmJyZWFrICAgIHk9MGJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsbisxKTpicmVhayAgICAgICAgaWYgbiVpPT0wOmJyZWFrICAgICAgICAgICAgeSs9MSAgICAgIGJyZWFrICAgIHJldHVybiB5YnJlYWs=;1;-1;302200;2017-12-09 19:53:08
2210;1628813;46;ZGVmIHByaW50X3Byb2R1Y3RzKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsbisxKTpicmVhayAgICAJaWYgbiVpPT0wOmJyZWFrICAgICAgICAJcHJpbnQobiwiPSIsaSwiKiIsaW50KChuL2kpKSk=;1;-1;280250;2017-12-09 19:57:55
2211;1628813;21;ZGVmIHBvd2VycyhiYXNlLCBuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZSgxLG4rMSk6YnJlYWsgICAgICAgIHByaW50KGJhc2UqKmkpYnJlYWs=;1;-1;85400;2017-12-09 19:59:27
2212;1628813;18;ZGVmIGRpZ2l0X3N1bShuKTpicmVhayAgICBzPTBicmVhayAgICB3aGlsZSBuOmJyZWFrICAgIAlzKz1uJTEwYnJlYWsgICAgCW4vLz0xMGJyZWFrICAgIHJldHVybiBzYnJlYWs=;1;-1;148800;2017-12-09 20:07:01
2213;1628813;2;ZGVmIGZpYm9uYWNjaShuKTpicmVhayAgICBhLGI9MSwxYnJlYWsgICAgcHJpbnQoYSlicmVhayAgICBmb3IgaSBpbiByYW5nZShuLTEpOmJyZWFrICAgICAgICBhLGI9YixhK2JicmVhayAgICAgICAgcHJpbnQoYSk=;1;-1;233300;2017-12-09 20:53:31
2214;1628813;23;ZGVmIGdyZWF0ZXN0X2NvbW1vbl9kaXZpc29yKGEsIGIpOmJyZWFrCWlmIGEgPT0gMDpicmVhawkJcmV0dXJuIGJicmVhawl3aGlsZSBiICE9IDA6YnJlYWsJCWlmIGEgPiBiOmJyZWFrCQkJYSA9IGEgLSBiYnJlYWsJCWVsc2U6YnJlYWsJCQliID0gYiAtIGFicmVhawlyZXR1cm4gYWJyZWFr;1;-1;95300;2017-12-09 20:56:28
2215;1628813;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIGlmIGE8MyBvciBiPDMgb3IgYzwzOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;1;-1;104700;2017-12-09 21:06:30
2216;1628813;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgaWYgYSUyPT0wIGFuZCBiJTI9PTEgb3IgYSUyPT0xIGFuZCBiJTI9PTA6YnJlYWsgICAgICAgIHJldHVybiBUcnVlYnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWs=;1;-1;81850;2017-12-09 21:07:55
2217;1640079;5;ZGVmIGR1cGxpY2F0aW9uKHRleHQpOmJyZWFrICAgIHRleHRkb3VibGUgPSAnJ2JyZWFrICAgIGZvciBpIGluIHRleHQ6YnJlYWsgICAgCXRleHRkb3VibGUgPSB0ZXh0ZG91YmxlICsgaSArIGlicmVhayAgICByZXR1cm4gdGV4dGRvdWJsZWJyZWFr;1;-1;394000;2017-12-10 06:26:43
2218;1646085;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;0;-1;31500;2017-12-10 13:12:05
2219;1646085;42;ZGVmIGhhcHB5KGEpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;0;-1;47750;2017-12-10 13:12:22
2220;1646085;42;ZGVmIGhhcHB5KGEsIGIpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;0;-1;79850;2017-12-10 13:12:54
2221;1646085;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;0;-1;89100;2017-12-10 13:13:03
2222;1646085;42;ZGVmIGhhcHB5KGEsIGMpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;0;-1;99900;2017-12-10 13:13:14
2223;1646255;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIGJvb2woYSUyIGFuZCBub3QgYiUyIG9yIG5vdCBhJTIgYW5kIGIlMilicmVhaw==;1;-1;93700;2017-12-10 13:13:30
2224;1646085;42;ZGVmIGhhcHB5KGIsIGMpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;0;-1;116600;2017-12-10 13:13:31
2225;1646085;42;ZGVmIGhhcHB5KGIsIGMsIGEpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;0;-1;124750;2017-12-10 13:13:39
2226;1646085;42;ZGVmIGhhcHB5KGIsIGQsIGEpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;0;-1;134450;2017-12-10 13:13:48
2227;1646085;42;ZGVmIGhhcHB5KGIsIGIsIGEpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;0;-1;139750;2017-12-10 13:13:54
2228;1646085;42;ZGVmIGhhcHB5KGIsIGEsIGEpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;0;-1;146500;2017-12-10 13:14:00
2229;1646085;42;ZGVmIGhhcHB5KGIsIGEsIGMpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;0;-1;153400;2017-12-10 13:14:07
2230;1646085;42;ZGVmIGhhcHB5KGIsIGEsIGMpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;0;-1;158500;2017-12-10 13:14:12
2231;1646085;42;ZGVmIGhhcHB5KGEsIGEsIGEpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;0;-1;169600;2017-12-10 13:14:24
2232;1646255;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiBib29sKGE8MyBvciBiPDMgb3IgYzwzKWJyZWFr;1;-1;55750;2017-12-10 13:14:30
2233;1646085;42;ZGVmIGhhcHB5KGEsIGEsIGEpOmJyZWFrICAgIGJyZWFr;0;-1;176750;2017-12-10 13:14:32
2234;1646085;42;IGhhcHB5KGEsIGEsIGEpOmJyZWFrICAgIGJyZWFr;0;-1;182250;2017-12-10 13:14:36
2235;1646085;42;KGEsIGEsIGEpOmJyZWFrICAgIGJyZWFr;0;-1;186950;2017-12-10 13:14:41
2236;1646085;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;2150;2017-12-10 13:16:16
2237;1646085;8;YnJlYWs=;0;-1;59900;2017-12-10 13:17:16
2238;1646085;8;YnJlYWs=;0;-1;66450;2017-12-10 13:17:22
2239;1646085;8;YnJlYWs=;0;-1;72950;2017-12-10 13:17:29
2240;1646294;33;ZGVmIGltcG9zZV9maW5lKGFnZSwgYmVlcik6YnJlYWsgICAgcmV0dXJuIGFnZSA8IDE4IGFuZCBiZWVyYnJlYWs=;1;-1;35500;2017-12-10 13:18:33
2241;1646085;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICByZXR1cm4gMGJyZWFr;0;-1;2100;2017-12-10 13:19:10
2242;1646257;45;ZGVmIHByaW50X3N1bXMobik6YnJlYWsgICAgZm9yIGkgaW4gcmFuZ2Uobi0xKTpicmVhayAgICAgICAgcHJpbnQobiwgIj0iLCAoaSsxKSwgIisiLCBuLShpKzEpKWJyZWFr;1;-1;390050;2017-12-10 13:19:57
2243;1646294;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIGJvb2woKGErYiklMilicmVhaw==;1;-1;88500;2017-12-10 13:21:32
2244;1646288;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgaWYgKChhICUgMiA9PSAwKSBhbmQgKGIgJSAyICE9IDApKTpicmVhayAgICAJcmV0dXJuIFRydWVicmVhayAgICBicmVhayAgICBpZiAoYiAlIDIgPT0gMCBhbmQgYSAlIDIgIT0gMCk6YnJlYWsgICAgCXJldHVybiBUcnVlYnJlYWsgICAgcmV0dXJuIEZhbHNl;1;-1;281100;2017-12-10 13:21:59
2245;1646299;33;ZGVmIGltcG9zZV9maW5lKGFnZSwgYmVlcik6YnJlYWsgICAgcmV0dXJuIFRydWUgaWYgKGFnZTwxOCBhbmQgYmVlcikgZWxzZSBGYWxzZWJyZWFr;1;-1;164900;2017-12-10 13:22:07
2246;1646294;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiBtaW4oW2EsYixjXSk8M2JyZWFr;1;-1;37350;2017-12-10 13:22:12
2247;1646288;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIGlmIChhIDwgMyBvciBiIDwgMyBvciBjIDwgMyk6YnJlYWsgICAgICAgIHJldHVybiBUcnVlYnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWticmVhaw==;1;-1;80300;2017-12-10 13:23:25
2248;1646294;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsge30iLmZvcm1hdCgyKm4pKWJyZWFrICAgIHByaW50KCJUcm9qbmFzb2JlayB7fSIuZm9ybWF0KDMqbikpYnJlYWsgICAgcHJpbnQoIkRlc2V0aW5hc29iZWsge30iLmZvcm1hdCgxMCpuKSlicmVhaw==;1;-1;71800;2017-12-10 13:23:28
2249;1646257;35;ZGVmIHNlcXVlbmNlcyhuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgZm9yIGogaW4gcmFuZ2UoaSsxKTpicmVhayAgICAgICAgICAgIHByaW50KGorMSwgZW5kPSIgIilicmVhayAgICAgICAgcHJpbnQoKWJyZWFr;1;-1;235250;2017-12-10 13:24:23
2250;1646315;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgZm9yIGogaW4gcmFuZ2Uobik6YnJlYWsgICAgICAgIAlwcmludCgiIyIsIGVuZD0iICIpYnJlYWsgICAgICAgIHByaW50KClicmVhaw==;1;-1;85200;2017-12-10 13:24:34
2251;1646294;32;ZGVmIG5lYXJfZmlmdHkobik6YnJlYWsgICAgcmV0dXJuIGFicyhuLTUwKTw9MTAgb3IgYWJzKG4tMTUwKTw9MTBicmVhaw==;1;-1;62950;2017-12-10 13:24:35
2252;1646288;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCAyKm4pYnJlYWsgICAgcHJpbnQoIlRyb2puYXNvYmVrIiwgMypuKWJyZWFrICAgIHByaW50KCJEZXNldGluYXNvYmVrIiwgMTAqbilicmVhayAgICA=;1;-1;144350;2017-12-10 13:25:54
2253;1646294;45;ZGVmIHByaW50X3N1bXMobik6YnJlYWsgICAgZm9yIGkgaW4gcmFuZ2UoMSxuKTpicmVhayAgICAgICAgcHJpbnQobiwgIj0iLCBpLCAiKyIsIG4taSlicmVhaw==;1;-1;53050;2017-12-10 13:25:58
2254;1646294;35;ZGVmIHNlcXVlbmNlcyhuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgZm9yIGogaW4gcmFuZ2UoMSxpKzIpOmJyZWFrICAgICAgICAgICAgcHJpbnQoaiwgZW5kPSIgIilicmVhayAgICAgICAgcHJpbnQoKWJyZWFr;1;-1;44550;2017-12-10 13:26:46
2255;1646331;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuICgoYSAlIDIgPT0gMCkgYW5kIChiICUgMiA9PSAxKSkgb3IgKChhICUgMiA9PSAxKSBhbmQgKGIgJSAyID09IDApKWJyZWFr;1;-1;146850;2017-12-10 13:27:37
2256;1646337;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIGEgJSAyICE9IGIgJSAyYnJlYWs=;1;-1;69500;2017-12-10 13:28:04
2257;1646315;9;ZGVmIGVtcHR5X3NxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgZm9yIGogaW4gcmFuZ2Uobik6YnJlYWsgICAgICAgICAgICBpZiAoaSA9PSAwIG9yIGogPT0gMCBvciBpID09IG4tMSBvciBqID09IG4tMSk6YnJlYWsgICAgICAgIAkJcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgICAgIC;1;-1;172600;2017-12-10 13:28:16
2258;1646345;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuICgoYSAlIDIgPT0gMCkgYW5kIChiICUgMiA9PSAxKSkgb3IgKChhICUgMiA9PSAxKSBhbmQgKGIgJSAyID09IDApKWJyZWFr;1;-1;4000;2017-12-10 13:28:24
2259;1646337;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIGZvciBuIGluIChhLCBiLCBjKTpicmVhayAgICAgICAgaWYgbiA8IDM6YnJlYWsgICAgICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIGJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;1;-1;74000;2017-12-10 13:29:25
2260;1646294;43;ZGVmIG9kZF9ldmVuKG4pOmJyZWFrICAgIHJlcz1bIiIsIiJdYnJlYWsgICAgZm9yIGkgaW4gcmFuZ2UoMSwgbisxKTpicmVhayAgICAgICAgaWYgaSAlIDIgPT0gMTpicmVhayAgICAgICAgICAgIHJlc1swXSs9Int9ICIuZm9ybWF0KGkpYnJlYWsgICAgICAgIGVsc2U6YnJlYWsgICAgICAgICAgICByZXNbMV0rPSIge30iLmZvcm;1;-1;145450;2017-12-10 13:29:52
2261;1646345;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiBhIDwgMyBvciBiIDwgMyBvciBjIDwgMw==;1;-1;147350;2017-12-10 13:30:53
2262;1646294;36;ZGVmIHByb2R1Y3RzKG4pOmJyZWFrICAgIGZvciByb3cgaW4gcmFuZ2UoMSxuKzEpOmJyZWFrICAgICAgICBmb3IgY29sIGluIHJhbmdlKDEsbisxKTpicmVhayAgICAgICAgICAgIHByaW50KHJvdyAqIGNvbCwgZW5kPSIgIilicmVhayAgICAgICAgcHJpbnQoKWJyZWFr;1;-1;67400;2017-12-10 13:31:02
2263;1646345;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCBuKjIpYnJlYWs=;0;-1;15100;2017-12-10 13:31:11
2264;1646345;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCBuKjIpYnJlYWsJcHJpbnQoIlRyb2puYXNvYmVrIiwgbiozKWJyZWFrICAgIHByaW50KCJEZXNldGluYXNvYmVrIiwgbioxMCk=;0;-1;56550;2017-12-10 13:31:52
2265;1646345;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCBuKjIpYnJlYWsJcHJpbnQoIlRyb2puYXNvYmVrIiwgbiozKWJyZWFrICAgIHByaW50KCJEZXNldGluYXNvYmVrIiwgbioxMCk=;0;-1;65050;2017-12-10 13:32:01
2266;1646257;43;ZGVmIG9kZF9ldmVuKG4pOmJyZWFrICAgIHggPSBbXWJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsIG4rMSk6YnJlYWsgICAgICAgIGlmIGkgJSAyID09IDE6YnJlYWsgICAgICAgICAgICBwcmludChpLCBlbmQ9IiAiKWJyZWFrICAgICAgICBlbHNlOmJyZWFrICAgICAgICAgICAgeC5hcHBlbmQoaSlicmVhayAgICBwcmludCgiXG;0;-1;428900;2017-12-10 13:32:02
2267;1646345;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCBuKjIpYnJlYWs=;0;-1;76900;2017-12-10 13:32:12
2268;1646345;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCBuKjIpYnJlYWsJcHJpbnQoIlRyb2puYXNvYmVrIiwgbiozKWJyZWFrICAgIHByaW50KCJEZXNldGluYXNvYmVrIiwgbioxMCk=;0;-1;84950;2017-12-10 13:32:21
2269;1646294;37;ZGVmIHN0YXJzKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsbisxKTpicmVhayAgICAgICAgcHJpbnQoIioiLCBlbmQ9IiIpYnJlYWsgICAgICAgIGlmIGklNT09MDpicmVhayAgICAgICAgICAgIHByaW50KCJ8IiwgZW5kPSIiKWJyZWFrICAgIHByaW50KClicmVhaw==;1;-1;79550;2017-12-10 13:32:25
2270;1646257;43;ZGVmIG9kZF9ldmVuKG4pOmJyZWFrICAgIHggPSBbXWJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsIG4rMSk6YnJlYWsgICAgICAgIGlmIGkgJSAyID09IDE6YnJlYWsgICAgICAgICAgICBwcmludChpLCBlbmQ9IiAiKWJyZWFrICAgICAgICBlbHNlOmJyZWFrICAgICAgICAgICAgeC5hcHBlbmQoaSlicmVhayAgICBwcmludCgiXG;1;-1;503600;2017-12-10 13:33:20
2271;1646345;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCBuKjIpYnJlYWsgICAgcHJpbnQoIlRyb2puYXNvYmVrIiwgbiozKWJyZWFrICAgIHByaW50KCJEZXNldGluYXNvYmVrIiwgbioxMCk=;1;-1;155100;2017-12-10 13:33:31
2272;1646373;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgaWYgYSAlIDIgKyBiICUgMiA9PSAxOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIGVsc2U6YnJlYWsgICAgICAgIHJldHVybiBGYWxzZQ==;1;-1;12100;2017-12-10 13:34:15
2273;1646345;32;ZGVmIG5lYXJfZmlmdHkobik6YnJlYWsgICAgcmV0dXJuIG4gaW4gcmFuZ2UoNDAsNjEpIG9yIG4gaW4gcmFuZ2UoMTQwLCAxNjEpYnJlYWs=;1;-1;58750;2017-12-10 13:34:40
2274;1646373;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIGlmIGEgPCAzIG9yIGIgPCAzIG9yIGMgPDM6YnJlYWsgICAgICAgIHJldHVybiBUcnVlYnJlYWsgICAgZWxzZTpicmVhayAgICAgICAgcmV0dXJuIEZhbHNl;1;-1;47250;2017-12-10 13:35:08
2275;1646294;38;ZGVmIGNyb3NzKG4pOiAgICBicmVhayAgICBmb3IgaSBpbiByYW5nZSgzKm4pOmJyZWFrICAgICAgICBmb3IgaiBpbiByYW5nZSgzKm4pOmJyZWFrICAgICAgICAgICAgaWYgbjw9aTwyKm4gb3Igbjw9ajwyKm46YnJlYWsgICAgICAgICAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiIpYnJlYWsgICAgICAgICAgICBlbHNlOmJyZWFrIC;1;-1;167550;2017-12-10 13:35:15
2276;1646373;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCBuKjIpYnJlYWsgICAgcHJpbnQoIlRyb2puYXNvYmVrIiwgbiozKWJyZWFrICAgIHByaW50KCJEZXNldGluYXNvYmVrIiwgbioxMCk=;1;-1;27650;2017-12-10 13:36:13
2277;1646373;32;ZGVmIG5lYXJfZmlmdHkobik6YnJlYWsgICAgaWYgKDQwIDw9IG4gPD0gNjApIG9yICgxNDAgPD0gbiA8PSAxNjApOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIGVsc2U6YnJlYWsJICAgIHJldHVybiBGYWxzZWJyZWFr;1;-1;82250;2017-12-10 13:37:42
2278;1646373;33;ZGVmIGltcG9zZV9maW5lKGFnZSwgYmVlcik6YnJlYWsgICAgaWYgYWdlIDwgMTggYW5kIGJlZXIgPT0gVHJ1ZTpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICBlbHNlOmJyZWFrICAgICAgICByZXR1cm4gRmFsc2VicmVhaw==;1;-1;219050;2017-12-10 13:41:26
2279;1646373;45;ZGVmIHByaW50X3N1bXMobik6YnJlYWsgICAgZm9yIGkgaW4gcmFuZ2UoMSwgbik6YnJlYWsgICAgICAgIHByaW50KG4sICI9IiwgaSwgIisiLCBuLWkpYnJlYWs=;1;-1;42050;2017-12-10 13:42:32
2280;1646373;35;ZGVmIHNlcXVlbmNlcyhuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgZm9yIGogaW4gcmFuZ2UoMSwgaSsyKTpicmVhayAgICAgICAgICAgIHByaW50KGosIGVuZD0iICIpYnJlYWsgICAgICAgIHByaW50KClicmVhaw==;1;-1;80200;2017-12-10 13:44:34
2281;1646373;43;ZGVmIG9kZF9ldmVuKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsIG4rMSk6YnJlYWsgICAgICAgIGlmIGkgJSAyID09IDE6YnJlYWsgICAgICAgICAgICBwcmludChpLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KCJcbiAiLCBlbmQ9IiIpYnJlYWsgICAgZm9yIGogaW4gcmFuZ2UoMSwgbisxKTpicmVhayAgICAgICAgaWYgai;1;-1;132200;2017-12-10 13:46:51
2282;1646414;45;ZGVmIHByaW50X3N1bXMobik6YnJlYWsgICAgZm9yIGkgaW4gcmFuZ2UoMSxuKTpicmVhayAgICAgICAgcHJpbnQobiwgIj0iLCBpLCAiKyIsIG4taSlicmVhaw==;1;-1;64400;2017-12-10 13:47:28
2283;1646388;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIGlmIGEgb3IgYiBvciBjID49IDJicmVhayAgICAJcmV0dXJuIFRydWVicmVhayAgICBlbHNlOiBicmVhayAgICAgICAgcmV0dXJuIEZhbHNlYnJlYWs=;0;-1;119600;2017-12-10 13:48:34
2284;1646414;35;ZGVmIHNlcXVlbmNlcyhuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZSgxLG4rMSk6YnJlYWsgICAgICAgIGZvciBqIGluIHJhbmdlKDEsaSsxKTpicmVhayAgICAgICAgICAgIHByaW50KGosIGVuZD0iICIpYnJlYWsgICAgICAgIHByaW50KClicmVhaw==;1;-1;66400;2017-12-10 13:48:40
2285;1646388;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIGlmIGEgb3IgYiBvciBjID4gM2JyZWFrICAgIAlyZXR1cm4gVHJ1ZWJyZWFrICAgIGVsc2U6IGJyZWFrICAgICAgICByZXR1cm4gRmFsc2VicmVhaw==;0;-1;128300;2017-12-10 13:48:43
2286;1646414;43;ZGVmIG9kZF9ldmVuKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsIG4pOmJyZWFrICAgICAgICBpZiBpICUgMiA9PSAxOmJyZWFrICAgICAgICAgICAgcHJpbnQoaSwgZW5kPSIgIilicmVhayAgICBwcmludCgpYnJlYWsgICAgcHJpbnQoIiAiLCBlbmQgPSAiIilicmVhayAgICBmb3IgaSBpbiByYW5nZSgxLCBuKzEpOmJyZW;0;-1;130400;2017-12-10 13:50:55
2287;1646414;43;ZGVmIG9kZF9ldmVuKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsIG4rMSk6YnJlYWsgICAgICAgIGlmIGkgJSAyID09IDE6YnJlYWsgICAgICAgICAgICBwcmludChpLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhayAgICBwcmludCgiICIsIGVuZCA9ICIiKWJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsIG4rMSk6Yn;1;-1;173600;2017-12-10 13:51:38
2288;1646437;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWs=;0;-1;74250;2017-12-10 13:52:03
2289;1646437;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWs=;0;-1;76000;2017-12-10 13:52:05
2290;1646407;4;ZGVmIGFscGhhYmV0KG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKG4pOmJyZWFrICAgICAgICBwcmludChjaHIoaSAlIDI2ICsgNjUpKWJyZWFr;1;-1;207500;2017-12-10 13:52:29
2291;1646414;36;ZGVmIHByb2R1Y3RzKG4pOmJyZWFrICAgIGZvciByb3cgaW4gcmFuZ2UoMSxuKzEpOmJyZWFrICAgICAgICBmb3IgY29sIGluIHJhbmdlKDEsbisxKTpicmVhayAgICAgICAgICAgIHByaW50KHJvdyAqIGNvbCwgZW5kPSIgIilicmVhayAgICAgICAgcHJpbnQoKWJyZWFr;1;-1;53200;2017-12-10 13:52:39
2292;1646388;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgaWYgKGEgJSAyID0gMCkgYW5kIChiICUgMiA9IDEpIG9yIChiICUgMiA9IDApIGFuZCAoYSAlIDIgPSAxKWJyZWFrICAgIAlyZXR1cm4gVHJ1ZWJyZWFrICAgIGVsc2U6YnJlYWsgICAgCXJldHVybiBGYWxzZWJyZWFr;0;-1;99300;2017-12-10 13:55:57
2293;1646388;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgaWYgKGEgJSAyID0gMCkgYW5kIChiICUgMiA9IDEpOmJyZWFrICAgIAlyZXR1cm4gVHJ1ZWJyZWFrICAgIGVsaWYgKGIgJSAyID0gMCkgYW5kIChhICUgMiA9IDEpOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIGVsc2U6YnJlYWsgICAgCXJldHVybiBGYWxzZWJyZWFr;0;-1;143200;2017-12-10 13:56:42
2294;1646447;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiAiLmpvaW4oIiMiKm4pKWJyZWFrICAgIHByaW50KClicmVhaw==;1;-1;235950;2017-12-10 13:56:45
2295;1646454;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICByZXN1bHQgPSAxO2JyZWFrICAgIGZvciBuIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIChuID4gMCk6YnJlYWsgICAgICAgICAgICByZXN1bHQgKj0gbjticmVhayAgICByZXR1cm4gcmVzdWx0YnJlYWs=;0;-1;279000;2017-12-10 14:01:02
2296;1646454;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICByZXN1bHQgPSAxO2JyZWFrICAgIGZvciBuIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIChuICE9IDApOmJyZWFrICAgICAgICAgICAgcmVzdWx0ICo9IG47YnJlYWsgICAgcmV0dXJuIHJlc3VsdGJyZWFr;1;-1;302650;2017-12-10 14:01:34
2297;1646373;36;ZGVmIHByb2R1Y3RzKG4pOmJyZWFrICAgIGZvciByb3cgaW4gcmFuZ2UoMSwgbiArIDEpOmJyZWFrICAgICAgICBmb3IgY29sIGluIHJhbmdlKDEsIG4gKyAxKTpicmVhayAgICAgICAgICAgIHByaW50KHJvdyAqIGNvbCwgZW5kPSIgIilicmVhayAgICAgICAgcHJpbnQoKWJyZWFr;1;-1;200650;2017-12-10 14:11:44
2298;1646373;37;ZGVmIHN0YXJzKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsIG4rMSk6YnJlYWsgICAgICAgIHByaW50KCIqIiwgZW5kPSIiKWJyZWFrICAgICAgICBpZiBub3QgaSAlIDU6YnJlYWsgICAgICAgICAgICBwcmludCgifCIsIGVuZD0iIilicmVhayAgICBwcmludCgpYnJlYWs=;1;-1;78650;2017-12-10 14:13:10
2299;1646482;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgaWYgYSAlIDIgPT0gMDpicmVhayAgICAgICAgaWYgYiAlIDIgIT0gMDpicmVhayAgICAgICAgICAgIHJldHVybiBUcnVlYnJlYWsgICAgICAgIGVsc2U6YnJlYWsgICAgICAgICAgICByZXR1cm4gRmFsc2VicmVhayAgICBlbHNlOmJyZWFrICAgICAgICBpZiBiICUgMiA9PSAwOmJyZWFrIC;1;-1;436600;2017-12-10 14:14:19
2300;1646373;38;ZGVmIGNyb3NzKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKDMpOmJyZWFrICAgICAgICBmb3IgbXVsdCBpbiByYW5nZShuKTpicmVhayAgICAgICAgICAgIGZvciBqIGluIHJhbmdlKDMpOmJyZWFrICAgICAgICAgICAgICAgIGlmIGkgPT0gMSBvciBqID09IDE6YnJlYWsgICAgICAgICAgICAgICAgICAgIHByaW50KCIjIipuLC;1;-1;396050;2017-12-10 14:19:49
2301;1646482;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHggPSBbYSwgYiwgY11icmVhayAgICB4ID0gc3VtKHgpYnJlYWsgICAgaWYgeCA8IDk6YnJlYWsgICAgICAgIHJldHVybiBUcnVlYnJlYWsgICAgZWxzZTpicmVhayAgICAgICAgcmV0dXJuIEZhbHNl;0;-1;354100;2017-12-10 14:20:50
2302;1646373;1;ZGVmIG51bWJlcnMobik6YnJlYWsgICAgZm9yIGkgaW4gcmFuZ2UoMSwgbisxKTpicmVhayAgICAgICAgcHJpbnQoaSlicmVhaw==;1;-1;30350;2017-12-10 14:24:40
2303;1646482;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHogPSBbeCBmb3IgeCBpbiBbYSwgYiwgY10gaWYgeCA8IDNdYnJlYWsgICAgaWYgbGVuKHopID4gMDpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICBlbHNlOmJyZWFrICAgICAgICByZXR1cm4gRmFsc2U=;1;-1;499050;2017-12-10 14:29:49
2304;1646482;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCBuICogMilicmVhayAgICBwcmludCgiVHJvam5hc29iZWsiLCBuICogMylicmVhayAgICBwcmludCgiRGVzZXRpbmFzb2JlayIsIG4gKiAxMCk=;1;-1;249850;2017-12-10 14:34:08
2305;1646561;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiBhbnkobWFwKGxhbWJkYSB4OiB4IDwgMywgW2EsIGIsIGNdKSk=;1;-1;203400;2017-12-10 14:38:14
2306;1646482;32;ZGVmIG5lYXJfZmlmdHkobik6YnJlYWsgICAgaWYgbiBpbiBsaXN0KHJhbmdlKDQwLCA2MSkpOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIGVsaWYgbiBpbiBsaXN0KHJhbmdlKDE0MCwgMTYxKSk6YnJlYWsgICAgICAgIHJldHVybiBUcnVlYnJlYWsgICAgZWxzZTpicmVhayAgICAgICAgcmV0dXJuIEZhbHNlYnJlYW;1;-1;223900;2017-12-10 14:41:07
2307;1646482;33;ZGVmIGltcG9zZV9maW5lKGFnZSwgYmVlcik6YnJlYWsgICAgaWYgYWdlIDwgMTggYW5kIGJlZXIgPT0gVHJ1ZTpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICByZXR1cm4gRmFsc2U=;1;-1;112250;2017-12-10 14:43:07
2308;1646482;41;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHogPSBbeCBmb3IgeCBpbiBbYSwgYiwgY10gaWYgeCA8IDNdYnJlYWsgICAgaWYgbGVuKHopID4gMDpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICBlbHNlOmJyZWFrICAgICAgICByZXR1cm4gRmFsc2U=;0;-1;30300;2017-12-10 14:45:50
2309;1646671;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgZWEgPSBhICUgMmJyZWFrICAgIGViID0gYiAlIDJicmVhayAgICByZXR1cm4gZWEgKyBlYiA9PSAxYnJlYWs=;1;-1;210600;2017-12-10 15:14:42
2310;1646599;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgaWYgYSAlIDIgPT0gMDpicmVhayAgICAgICAgaWYgYiAlIDIgIT0gMDpicmVhayAgICAgICAgICAgIHJldHVybiBUcnVlYnJlYWsgICAgICAgIGVsc2U6YnJlYWsgICAgICAgICAgICByZXR1cm4gRmFsc2VicmVhayAgICBlbHNlOmJyZWFrICAgICAgICBpZiBiICUgMiA9PSAwOmJyZWFrIC;1;-1;27000;2017-12-10 15:20:42
2311;1646414;37;ZGVmIHN0YXJzKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsbisxKTpicmVhayAgICAgICAgcHJpbnQoIioiLCBlbmQ9IiIpYnJlYWsgICAgICAgIGlmIGkgJSA1ID09IDA6YnJlYWsgICAgICAgICAgICBwcmludCgifCIsIGVuZD0iIilicmVhayAgICBwcmludCgpYnJlYWs=;1;-1;4797950;2017-12-10 15:20:55
2312;1646599;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHogPSBbeCBmb3IgeCBpbiBbYSwgYiwgY10gaWYgeCA8IDNdYnJlYWsgICAgaWYgbGVuKHopID4gMDpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICBlbHNlOmJyZWFrICAgICAgICByZXR1cm4gRmFsc2U=;1;-1;33400;2017-12-10 15:21:20
2313;1646599;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCBuICogMilicmVhayAgICBwcmludCgiVHJvam5hc29iZWsiLCBuICogMylicmVhayAgICBwcmludCgiRGVzZXRpbmFzb2JlIiwgbiAqIDEwKWJyZWFr;0;-1;50300;2017-12-10 15:22:14
2314;1646599;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCBuICogMilicmVhayAgICBwcmludCgiVHJvam5hc29iZWsiLCBuICogMylicmVhayAgICBwcmludCgiRGVzZXRpbmFzb2JlIiwgbiAqIDEwKWJyZWFr;0;-1;67700;2017-12-10 15:22:32
2315;1646599;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCBuICogMilicmVhayAgICBwcmludCgiVHJvam5hc29iZWsiLCBuICogMylicmVhayAgICBwcmludCgiRGVzZXRpbmFzb2JlayIsIG4gKiAxMClicmVhaw==;1;-1;98900;2017-12-10 15:23:04
2316;1646599;32;ZGVmIG5lYXJfZmlmdHkobik6YnJlYWsgICAgaWYgbiBpbiBsaXN0KHJhbmdlKDQwLCA2MSkpOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIGVsaWYgbiBpbiBsaXN0KHJhbmdlKDE0MCwgMTYxKSk6YnJlYWsgICAgICAgIHJldHVybiBUcnVlYnJlYWsgICAgZWxzZTpicmVhayAgICAgICAgcmV0dXJuIEZhbHNl;1;-1;24650;2017-12-10 15:23:33
2317;1646599;33;ZGVmIGltcG9zZV9maW5lKGFnZSwgYmVlcik6YnJlYWsgICAgaWYgYWdlIDwgMTggYW5kIGJlZXIgPT0gVHJ1ZTpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICByZXR1cm4gRmFsc2U=;1;-1;15950;2017-12-10 15:23:53
2318;1646414;37;ZGVmIHN0YXJzKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKG4pOmJyZWFrICAgICAgICBwcmludCgiKiIsIGVuZD0iIilicmVhayAgICAgICAgaWYgaSA9PSA1OmJyZWFrICAgICAgICAgICAgcHJpbnQoInwiLCBlbmQ9IiIpYnJlYWsgICAgcHJpbnQoKWJyZWFr;0;-1;23500;2017-12-10 15:26:26
2319;1646414;37;ZGVmIHN0YXJzKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsbisxKTpicmVhayAgICAgICAgcHJpbnQoIioiLCBlbmQ9IiIpYnJlYWsgICAgICAgIGlmIGkgJSA1PT0wOmJyZWFrICAgICAgICAgICAgcHJpbnQoInwiLCBlbmQ9IiIpYnJlYWsgICAgcHJpbnQoKWJyZWFr;1;-1;56250;2017-12-10 15:26:59
2320;1646779;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIGEgJSAyICE9IGIgJSAyYnJlYWs=;1;-1;115400;2017-12-10 15:46:43
2321;1646779;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIGZvciBpIGluIChhLGIsYyk6YnJlYWsgICAgICAgIGlmIGkgPCAzOmJyZWFrICAgICAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICByZXR1cm4gRmFsc2VicmVhaw==;1;-1;77650;2017-12-10 15:48:43
2322;1646773;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgaWYgKGErYiklMj09MDpicmVhayAgICAJcmV0dXJuIEZhbHNlYnJlYWsgICAgZWxzZTpicmVhayAgICAJcmV0dXJuIFRydWVicmVhaw==;1;-1;40000;2017-12-10 15:49:50
2323;1646779;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCBuKjIpYnJlYWsgICAgcHJpbnQoIlRyb2puYXNvYmVrIiwgbiozKWJyZWFrICAgIHByaW50KCJEZXNldGluYXNvYmVrIiwgbioxMClicmVhaw==;1;-1;85450;2017-12-10 15:51:01
2324;1646800;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgaWYgKGErYiklMj09MDpicmVhayAgICAJcmV0dXJuIEZhbHNlYnJlYWsgICAgZWxzZTpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhaw==;1;-1;23550;2017-12-10 15:51:02
2325;1646779;32;ZGVmIG5lYXJfZmlmdHkobik6YnJlYWsgICAgaWYgYWJzKDUwLW4pIDw9IDEwIG9yIGFicygxNTAtbikgPD0xMDpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICByZXR1cm4gRmFsc2VicmVhaw==;1;-1;70400;2017-12-10 15:52:16
2326;1646779;33;ZGVmIGltcG9zZV9maW5lKGFnZSwgYmVlcik6YnJlYWsgICAgaWYgYmVlciBhbmQgYWdlIDwgMTg6YnJlYWsgICAgICAgIHJldHVybiBUcnVlYnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWs=;1;-1;86100;2017-12-10 15:53:46
2327;1646800;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIGlmIGE8MyBvciBiPDMgb3IgYzwzOmJyZWFrICAgIAlyZXR1cm4gVHJ1ZWJyZWFrICAgIGVsc2U6YnJlYWsgICAgICAgIHJldHVybiBGYWxzZWJyZWFr;1;-1;156500;2017-12-10 15:54:18
2328;1646800;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCBuKjIpYnJlYWsgICAgcHJpbnQoIlRyb2puYXNvYmVrIiwgbiozKWJyZWFrICAgIHByaW50KCJEZXNldGluYXNvYmVrIiwgbioxMClicmVhaw==;1;-1;72550;2017-12-10 15:55:47
2329;1646822;10;ZGVmIHB5cmFtaWQobik6YnJlYWsgICAgZm9yIGkgaW4gcmFuZ2Uobik6YnJlYWsgICAgICAgIHByaW50KCIjIiwgZW5kPSIgIilicmVhayAgICBwcmludCgpCWJyZWFr;0;-1;39150;2017-12-10 15:57:49
2330;1646800;32;ZGVmIG5lYXJfZmlmdHkobik6YnJlYWsgICAgaWYgbi0xMDw9NTAgb3Igbi0xMDw9MTUwIGFuZCBuKzEwPj0xNTA6YnJlYWsgICAgCXJldHVybiBUcnVlYnJlYWsgICAgZWxzZTpicmVhayAgICAJcmV0dXJuIEZhbHNlYnJlYWs=;0;-1;207700;2017-12-10 16:00:01
2331;1646800;32;ZGVmIG5lYXJfZmlmdHkobik6YnJlYWsgICAgaWYgbi0xMD49NDAgYW5kIG4rMTA8PTYwIG9yIG4tMTA PTE0MCBhbmQgbisxMDw9MTYwOmJyZWFrICAgIAlyZXR1cm4gVHJ1ZWJyZWFrICAgIGVsc2U6YnJlYWsgICAgCXJldHVybiBGYWxzZWJyZWFr;0;-1;307850;2017-12-10 16:02:00
2332;1646800;32;ZGVmIG5lYXJfZmlmdHkobik6YnJlYWsgICAgaWYgbi0xMD49NDAgb3IgbisxMDw9NjAgb3Igbi0xMD49MTQwIG9yIG4rMTA8PTE2MDpicmVhayAgICAJcmV0dXJuIFRydWVicmVhayAgICBlbHNlOmJyZWFrICAgIAlyZXR1cm4gRmFsc2VicmVhaw==;0;-1;356650;2017-12-10 16:02:58
2333;1646800;32;ZGVmIG5lYXJfZmlmdHkobik6YnJlYWsgICAgaWYgbj40MCBhbmQgbjw2MCBvciBuPjE0MCBhbmQgbjwxNjA6IGJyZWFrICAgIAlyZXR1cm4gVHJ1ZWJyZWFrICAgIGVsc2U6YnJlYWsgICAgCXJldHVybiBGYWxzZWJyZWFr;0;-1;427150;2017-12-10 16:04:22
2334;1646800;32;ZGVmIG5lYXJfZmlmdHkobik6YnJlYWsgICAgaWYgbj49NDAgYW5kIG48PTYwIG9yIG4 PTE0MCBhbmQgbjw9MTYwOiBicmVhayAgICAJcmV0dXJuIFRydWVicmVhayAgICBlbHNlOmJyZWFrICAgIAlyZXR1cm4gRmFsc2VicmVhaw==;1;-1;440250;2017-12-10 16:04:38
2335;1646800;33;ZGVmIGltcG9zZV9maW5lKGFnZSwgYmVlcik6YnJlYWsgICAgaWYgYWdlPDE4IGFuZCBiZWVyOmJyZWFrICAgIAlyZXR1cm4gVHJ1ZWJyZWFrICAgIGVsc2U6YnJlYWsgICAgICAgIHJldHVybiBGYWxzZWJyZWFr;1;-1;56950;2017-12-10 16:05:49
2336;1646599;1;ZGVmIG51bWJlcnMobik6YnJlYWsgICAgZm9yIGkgaW4gcmFuZ2UoMSwgbiArIDEpOmJyZWFrICAgICAgICBwcmludChpKWJyZWFr;1;-1;238700;2017-12-10 16:06:58
2337;1646869;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIChhJTIpICE9IChiJTIpYnJlYWs=;1;-1;15150;2017-12-10 16:07:59
2338;1646869;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiBsZW4oW2kgZm9yIGkgaW4gKGEsIGIsIGMpIGlmIGkgPCAzXSkgPiAwYnJlYWs=;1;-1;64250;2017-12-10 16:09:11
2339;1646869;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCBuKjIpYnJlYWsgICAgcHJpbnQoIlRyb2puYXNvYmVrIiwgbiozKWJyZWFrICAgIHByaW50KCJEZXNldGluYXNvYmVrIiwgbioxMClicmVhaw==;1;-1;51350;2017-12-10 16:10:43
2340;1646869;32;ZGVmIG5lYXJfZmlmdHkobik6YnJlYWsgICAgcmV0dXJuICg0MCA8PSBuIDw9IDYwKSBvciAoMTQwIDw9IG4gPD0gMTYwKWJyZWFr;1;-1;81250;2017-12-10 16:12:11
2341;1646800;45;ZGVmIHByaW50X3N1bXMobik6YnJlYWsgICAgZm9yIGkgaW4gcmFuZ2UoMSxuKTpicmVhayAgICAgICAgcHJpbnQobiwgIj0iLCBpLCAiKyIsIG4taSlicmVhaw==;1;-1;310300;2017-12-10 16:12:13
2342;1646869;33;ZGVmIGltcG9zZV9maW5lKGFnZSwgYmVlcik6YnJlYWsgICAgcmV0dXJuIGJlZXIgYW5kIGFnZSA8IDE4YnJlYWs=;1;-1;25650;2017-12-10 16:12:41
2343;1646869;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIGEgJSAyICE9IGIgJSAyYnJlYWs=;1;-1;20400;2017-12-10 16:13:05
2344;1646869;45;ZGVmIHByaW50X3N1bXMobik6YnJlYWsgICAgZm9yIGkgaW4gcmFuZ2Uobi0xKTpicmVhayAgICAgICAgcHJpbnQobiwgIj0iLCBpKzEsICIrIiwgbi1pLTEpYnJlYWs=;1;-1;68200;2017-12-10 16:14:38
2345;1646869;35;ZGVmIHNlcXVlbmNlcyhuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgZm9yIGogaW4gcmFuZ2UoaSsxKTpicmVhayAgICAgICAgICAgIHByaW50KGksIGVuZD0iICIpYnJlYWsgICAgICAgIHByaW50KClicmVhaw==;0;-1;15100;2017-12-10 16:14:57
2346;1646869;35;ZGVmIHNlcXVlbmNlcyhuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgZm9yIGogaW4gcmFuZ2UoaSsxKTpicmVhayAgICAgICAgICAgIHByaW50KGorMSwgZW5kPSIgIilicmVhayAgICAgICAgcHJpbnQoKWJyZWFr;1;-1;62100;2017-12-10 16:15:46
2347;1646800;35;ZGVmIHNlcXVlbmNlcyhuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgZm9yIGogaW4gcmFuZ2UoaSsxKTpicmVhayAgICAgICAgICAgIHByaW50KGorMSwgZW5kPSIgIilicmVhayAgICAgICAgcHJpbnQoKWJyZWFr;1;-1;229600;2017-12-10 16:16:48
2348;1646877;8;ZGVmIHNxdWFyZShuKTogIGJyZWFrICAgZm9yIGogaW4gcmFuZ2Uobik6IGJyZWFrICAgIGZvciBpIGluIHJhbmdlKG4pOmJyZWFrICAgICAgICBwcmludCgiIyIsIGVuZD0gIiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;1;-1;487900;2017-12-10 16:21:10
2349;1646800;43;ZGVmIG9kZF9ldmVuKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsIG4pOmJyZWFrICAgICAgICBpZiBpICUgMiA9PSAxOmJyZWFrICAgICAgICAgICAgcHJpbnQoaSwgZW5kPSIgIilicmVhayAgICBwcmludChlbmQ9J1xuJylicmVhayAgICBwcmludChlbmQ9IiAiKWJyZWFrCWJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsbi;0;-1;303500;2017-12-10 16:25:46
2350;1646800;43;ZGVmIG9kZF9ldmVuKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsIG4rMSk6YnJlYWsgICAgICAgIGlmIGkgJSAyID09IDE6YnJlYWsgICAgICAgICAgICBwcmludChpLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KGVuZD0nXG4nKWJyZWFrICAgIHByaW50KGVuZD0iICIpYnJlYWsJYnJlYWsgICAgZm9yIGkgaW4gcmFuZ2UoMS;1;-1;311250;2017-12-10 16:25:56
2351;1646800;36;ZGVmIHByb2R1Y3RzKG4pOmJyZWFrICAgIGZvciByb3cgaW4gcmFuZ2UoMSxuKzEpOmJyZWFrICAgICAgICBmb3IgY29sIGluIHJhbmdlKDEsbisxKTpicmVhayAgICAgICAgICAgIHByaW50KHJvdyAqIGNvbCwgZW5kPSIgIilicmVhayAgICAgICAgcHJpbnQoKWJyZWFr;1;-1;82200;2017-12-10 16:27:38
2352;1646800;37;ZGVmIHN0YXJzKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKG4pOmJyZWFrICAgICAgICBwcmludCgiKiIsIGVuZD0iIilicmVhayAgICAgICAgaWYgKGkrMSklNSA9PSAwOmJyZWFrICAgICAgICAgICAgcHJpbnQoInwiLCBlbmQ9IiIpYnJlYWsgICAgcHJpbnQoKWJyZWFr;1;-1;64300;2017-12-10 16:28:57
2353;1646877;9;ZGVmIGVtcHR5X3NxdWFyZShuKTpicmVhayAgIGZvciBqIGluIHJhbmdlKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKG4pOmJyZWFrICAgICAgICBwcmludCgiIyIsIGVuZD0iICIpYnJlYWsgICAgcHJpbnQoKQlicmVhaw==;0;-1;200400;2017-12-10 16:46:05
2354;1647004;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgaWYgYSAlIDIgPT0gMCBhbmQgYiAlIDIgIT0gMDpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICBlbGlmIGEgJSAyICE9IDAgYW5kIGIgJSAyID09IDA6YnJlYWsgICAgICAgIHJldHVybiBUcnVlYnJlYWsgICAgZWxzZTpicmVhayAgICAgICAgcmV0dXJuIEZhbHNlYnJlYWs=;1;-1;133900;2017-12-10 16:49:51
2355;1647004;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIGZvciBpIGluIFthLCBiLCBjXTpicmVhayAgICAgICAgaWYgaSA8IDM6YnJlYWsgICAgICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;1;-1;60000;2017-12-10 16:50:52
2356;1647048;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgaWYgKGElMj09MCBhbmQgYiUyID09MSkgb3IgKGElMj09MSBhbmQgYiUyID09MCk6YnJlYWsgICAgCXJldHVybiBUcnVlYnJlYWsgICAgZWxzZTpicmVhawkgICAgcmV0dXJuIEZhbHNlYnJlYWs=;1;-1;126150;2017-12-10 16:58:03
2357;1647048;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIGlmIGEgPCAzIG9yIGIgPDMgb3IgYzwzOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIGVsc2U6YnJlYWsJICAgIHJldHVybiBGYWxzZWJyZWFr;1;-1;37100;2017-12-10 16:58:43
2358;1647048;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCAyKm4pYnJlYWsgICAgcHJpbnQoIlRyb2puYXNvYmVrIiwgMypuKWJyZWFrICAgIHByaW50KCJEZXNldGluYXNvYmVrIiwgMTAqbilicmVhaw==;1;-1;38650;2017-12-10 16:59:29
2359;1647048;32;ZGVmIG5lYXJfZmlmdHkobik6YnJlYWsJaWYgYWJzKDUwLW4pIDw9IDEwIG9yIGFicygxNTAtbikgPD0gMTA6YnJlYWsJCXJldHVybiBUcnVlYnJlYWsJZWxzZTpicmVhawkJcmV0dXJuIEZhbHNl;1;-1;359950;2017-12-10 17:06:10
2360;1647065;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIGJvb2woKGEgKyBiKSAlIDIpYnJlYWs=;1;-1;44050;2017-12-10 17:06:41
2361;1647065;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiBhIDwgMyBvciBiIDwgMyBvciBjIDwgM2JyZWFrICAgIA==;1;-1;30650;2017-12-10 17:07:17
2362;1647065;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCAyKm4pYnJlYWsgICAgcHJpbnQoIlRyb2puYXNvYmVrIiwgMypuKWJyZWFrICAgIHByaW50KCJEZXNldGluYXNvYmVrIiwgMTAqbilicmVhaw==;1;-1;36950;2017-12-10 17:07:58
2363;1647065;32;ZGVmIG5lYXJfZmlmdHkobik6YnJlYWsgICAgcmV0dXJuIG4gPj0gNDAgYW5kIG4gPD0gNjAgb3IgbiA PSAxNDAgYW5kIG4gPD0gMTYw;1;-1;56800;2017-12-10 17:09:01
2364;1647048;33;ZGVmIGltcG9zZV9maW5lKGFnZSwgYmVlcik6YnJlYWsgICAgaWYgKGFnZSA IDE4IGFuZCBiZWVyKSBvciAoIGFnZSA8IDE4IGFuZCBub3QgYmVlcik6YnJlYWsgICAgICAgIHJldHVybiBGYWxzZWJyZWFrICAgIGVsc2U6YnJlYWsgICAgICAgIHJldHVybiBUcnVl;1;-1;281650;2017-12-10 17:10:58
2365;1646772;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIGElMiAhPSBiJTJicmVhayAgICBicmVhaw==;1;-1;268600;2017-12-10 17:26:32
2366;1647355;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgaWYgKGEgJSAyIGFuZCBub3QoYiAlIDIpKSBvciAoYiAlIDIgYW5kIG5vdChhICUgMikpOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIGVsc2U6YnJlYWsgICAgICAgIHJldHVybiBGYWxzZWJyZWFr;1;-1;289650;2017-12-10 19:10:37
2367;1647355;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIGlmIGEgPCAzIG9yIGIgPCAzIG9yIGMgPCAzOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIGVsc2U6YnJlYWsgICAgICAgIHJldHVybiBGYWxzZWJyZWFr;1;-1;60350;2017-12-10 19:11:43
2368;1647355;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCAyKm4pYnJlYWsgICAgcHJpbnQoIlRyb2puYXNvYmVrIiwgMypuKWJyZWFrICAgIHByaW50KCJEZXNldGluYXNvYmVrIiwgMTAqbilicmVhaw==;1;-1;57300;2017-12-10 19:12:45
2369;1647355;32;ZGVmIG5lYXJfZmlmdHkobik6YnJlYWsgICAgcmV0dXJuICg1MCAtIG4gPj0gLTEwIGFuZCA1MCAtIG4gPD0gMTApIG9yICgxNTAgLSBuID49IC0xMCBhbmQgMTUwIC0gbiA8PSAxMCk=;1;-1;142500;2017-12-10 19:15:12
2370;1647454;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIGJvb2woKGEgKyBiKSAlIDIpYnJlYWs=;1;-1;105950;2017-12-10 19:25:16
2371;1647454;42;ZGVmIGhhcHB5KCphcmdzKTpicmVhayAgICByZXR1cm4gYW55KG1hcmsgPCAzIGZvciBtYXJrIGluIGFyZ3MpYnJlYWs=;1;-1;38200;2017-12-10 19:25:57
2372;1647454;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCBuKjIpYnJlYWsgICAgcHJpbnQoIlRyb2puYXNvYmVrIiwgbiozKWJyZWFrICAgIHByaW50KCJUcm9qbmFzb2JlayIsIG4qMTApYnJlYWs=;0;-1;35800;2017-12-10 19:26:36
2373;1647454;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCBuKjIpYnJlYWsgICAgcHJpbnQoIlRyb2puYXNvYmVrIiwgbiozKWJyZWFrICAgIHByaW50KCJEZXNldGluYXNvYmVrIiwgbioxMClicmVhaw==;1;-1;51500;2017-12-10 19:26:51
2374;1647454;32;ZGVmIG5lYXJfZmlmdHkobik6YnJlYWsgICAgcmV0dXJuIG1pbigoYWJzKG4gLSAxNTApLCBhYnMobiAtIDUwKSkpIDw9IDEwYnJlYWs=;1;-1;77250;2017-12-10 19:28:11
2375;1647454;33;ZGVmIGltcG9zZV9maW5lKGFnZSwgYmVlcik6YnJlYWsgICAgcmV0dXJuIGFnZSA8IDE4IGFuZCBiZWVyYnJlYWs=;1;-1;30300;2017-12-10 19:28:45
2376;1646599;3;ZGVmIGZhY3RvcmlhbChuKTpicmVhayAgICBmID0gMWJyZWFrICAgIGZvciB4IGluIHJhbmdlKDEsIG4gKyAxKTpicmVhayAgICAgICAgZiAqPSB4YnJlYWsgICAgcmV0dXJuIGY=;1;-1;248250;2017-12-10 19:56:31
2377;1647583;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgaWYgKGEgJSAyID09IDAgYW5kIGIgJSAyID09IDEpIG9yIChhICUgMiA9PSAxIGFuZCBiICUgMiA9PSAwKTpicmVhayAgICAJcmV0dXJuIFRydWVicmVhayAgICByZXR1cm4gRmFsc2VicmVhaw==;1;-1;112700;2017-12-10 20:00:48
2378;1646599;21;ZGVmIHBvd2VycyhiYXNlLCBuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZSgxLCBuKTpicmVhayAgICAgICAgcHJpbnQoYmFzZSAqKiBpKWJyZWFrICAgIGJyZWFr;0;-1;296500;2017-12-10 20:01:43
2379;1647583;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIGlmIGEgPCAzIG9yIGIgPCAzIG9yIGMgPCAzOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;1;-1;88350;2017-12-10 20:02:24
2380;1646599;21;ZGVmIHBvd2VycyhiYXNlLCBuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZSgxLCBuICsgMSk6YnJlYWsgICAgICAgIHByaW50KGJhc2UgKiogaSlicmVhayAgICBicmVhaw==;1;-1;456400;2017-12-10 20:04:23
2381;1647583;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCBuKjIpYnJlYWsgICAgcHJpbnQoIlRyb2puYXNvYmVrIiwgbiozKWJyZWFrICAgIHByaW50KCJEZXNldGluYXNvYmVrIiwgbioxMClicmVhaw==;1;-1;287550;2017-12-10 20:07:19
2382;1647583;32;ZGVmIG5lYXJfZmlmdHkobik6YnJlYWsgICAgaWYgKG4gPD0gNjAgYW5kIG4gPj0gNDApIG9yIChuID49IDE0MCBhbmQgbiA8PSAxNjApOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;1;-1;221750;2017-12-10 20:11:07
2383;1647583;33;ZGVmIGltcG9zZV9maW5lKGFnZSwgYmVlcik6YnJlYWsgICAgaWYgYWdlIDwgMTggYW5kIGJlZXI6YnJlYWsgICAgICAgIHJldHVybiBUcnVlYnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWs=;1;-1;64350;2017-12-10 20:12:15
2384;1646599;18;ZGVmIGRpZ2l0X3N1bShuKTpicmVhayAgICByZXR1cm4gc3VtKFtpbnQoaSkgZm9yIGkgaW4gbGlzdChzdHIobikpXSlicmVhaw==;1;-1;7200;2017-12-10 20:20:35
2385;1646599;15;ZGVmIGV2ZXJ5X3NlY29uZF9udW1iZXIobnVtX2xpc3QpOmJyZWFrICAgIGZvciBpLCBqIGluIGVudW1lcmF0ZShudW1fbGlzdCk6YnJlYWsgICAgCWlmIGkgJSAyID09IDA6YnJlYWsgICAgICAgIAlwcmludChqKWJyZWFr;1;-1;33500;2017-12-10 20:29:00
2386;1647660;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICByZXMgPSAxYnJlYWsgICAgZm9yIHggaW4gbnVtYmVyczpicmVhayAgICAgICAgaWYgeDpicmVhayAgICAgICAgICAgIHJlcyAqPSB4YnJlYWsgICAgcmV0dXJuIHJlc2JyZWFr;1;-1;121900;2017-12-10 20:29:09
2387;1646599;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICBub256ZXJvID0gW2kgZm9yIGkgaW4gbnVtYmVycyBpZiBpICE9IDBdYnJlYWsgICAgcHJvZHVjdCA9IDFicmVhayAgICBmb3IgaSBpbiBub256ZXJvOmJyZWFrICAgICAgICBwcm9kdWN0ICo9IGlicmVhayAgICByZXR1cm4gcHJvZHVjdA==;1;-1;8900;2017-12-10 20:38:57
2388;1647703;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgaWYgYSAlIDIgPT0gMCBhbmQgYiAlIDIgPT0gMTpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICBlbGlmIGIgJSAyID09IDAgYW5kIGEgJSAyID09IDE6YnJlYWsgICAgCXJldHVybiBUcnVlYnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWs=;1;-1;108050;2017-12-10 20:45:12
2389;1646599;17;ZGVmIGZpdmVfbXVsdGlwbGVzKG51bV9saXN0KTpicmVhayAgICByZXR1cm4gW3ggZm9yIHggaW4gbnVtX2xpc3QgaWYgeCAlIDUgPT0gMF0=;1;-1;21500;2017-12-10 20:47:27
2390;1646599;14;ZGVmIHBhbGluZHJvbSh0ZXh0KTpicmVhayAgICB6ID0gbGlzdCh0ZXh0KWJyZWFrICAgIHggPSBsaXN0KHJldmVyc2VkKHopKWJyZWFrICAgIGlmIHogPT0geDpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICByZXR1cm4gRmFsc2U=;1;-1;11850;2017-12-10 20:54:13
2391;1646599;3;ZGVmIGZhY3RvcmlhbChuKTpicmVhayAgICBmID0gMWJyZWFrICAgIGZvciB4IGluIHJhbmdlKDEsIG4gKyAxKTpicmVhayAgICAgICAgZiAqPSB4YnJlYWsgICAgcmV0dXJuIGY=;1;-1;34400;2017-12-10 20:55:00
2392;1646599;29;ZGVmIHVuaXF1ZShteWxpc3QpOmJyZWFrICAgIHJldHVybiBzZXQobXlsaXN0KWJyZWFr;0;-1;59350;2017-12-10 20:59:56
2393;1646599;29;ZGVmIHVuaXF1ZShteWxpc3QpOmJyZWFrICAgIHJldHVybiBsaXN0KHNldChteWxpc3QpKWJyZWFr;0;-1;79900;2017-12-10 21:00:17
2394;1646255;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCAyKm4pYnJlYWsgICAgcHJpbnQoIlRyb2puYXNvYmVrIiwgMypuKWJyZWFrICAgIHByaW50KCJEZXNldGluYXNvYmVrIiwgMTAqbilicmVhaw==;1;-1;48150;2017-12-10 23:08:01
2395;1648305;13;ZGVmIHN0cmluZ19pbnRlcnNlY3Rpb24obGVmdCwgcmlnaHQpOmJyZWFrICAgIGZvciBhLCBiIGluIHppcChsZWZ0LCByaWdodCk6YnJlYWsgICAgICAgIGlmIGEgPT0gYjogcHJpbnQoYSkgICAgICBicmVhaw==;1;-1;159350;2017-12-11 02:22:51
2396;1648305;4;ZGVmIGFscGhhYmV0KG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKG4pOmJyZWFrICAgICAgICBwcmludChjaHIob3JkKCJBIikgKyBpJTI2KSlicmVhaw==;1;-1;74700;2017-12-11 02:24:17
2397;1646599;25;ZGVmIGNvdW50X2EodGV4dCk6YnJlYWsgICAgdGV4dCA9IHRleHQubG93ZXIoKWJyZWFrICAgIHJldHVybiB0ZXh0LmNvdW50KCdhJyk=;1;-1;9350;2017-12-11 06:33:08
2398;1646599;27;ZGVmIGZpcnN0X2xldHRlcnModGV4dCk6YnJlYWsgICAgdGV4dF9zcGxpdCA9IHRleHQuc3BsaXQoKWJyZWFrICAgIGZpcnN0ID0gW11icmVhayAgICBmb3IgaSBpbiAgdGV4dF9zcGxpdDpicmVhayAgICAgICAgZmlyc3QuYXBwZW5kKGlbMF0pYnJlYWsgICAgcmV0dXJuIGZpcnN0;0;-1;39350;2017-12-11 06:34:08
2399;1646599;29;ZGVmIHVuaXF1ZShteWxpc3QpOmJyZWFrICAgIHUgPSBbXWJyZWFrICAgIGZvciBpIGluIG15bGlzdDpicmVhayAgICAgICAgaWYgaSBub3QgaW4gdTpicmVhayAgICAgICAgICAgIHUuYXBwZW5kKGkpYnJlYWsgICAgcmV0dXJuIHU=;1;-1;12250;2017-12-11 06:35:29
2400;1646599;26;ZGVmIGNlbnNvcnNoaXAodGV4dCk6YnJlYWsgICAgcmV0dXJuICcnLmpvaW4oJ3gnIGlmIGkgJSAyID09IDAgZWxzZSBjaGFyIGZvciBpLCBjaGFyIGluIGVudW1lcmF0ZSh0ZXh0LCAxKSlicmVhaw==;0;-1;24500;2017-12-11 06:58:53
2401;1646599;26;ZGVmIGNlbnNvcnNoaXAodGV4dCk6YnJlYWsgICAgcmV0dXJuICcnLmpvaW4oJ1gnIGlmIGkgJSAyID09IDAgZWxzZSBjaGFyIGZvciBpLCBjaGFyIGluIGVudW1lcmF0ZSh0ZXh0LCAxKSlicmVhaw==;1;-1;37750;2017-12-11 06:59:07
2402;1646599;13;ZGVmIHN0cmluZ19pbnRlcnNlY3Rpb24obGVmdCwgcmlnaHQpOmJyZWFrICAgIHggPSBsaXN0KHppcChsZWZ0LCByaWdodCkpYnJlYWsgICAgZm9yIGkgaW4geDpicmVhayAgICAgICAgaWYgaVswXSA9PSBpWzFdOmJyZWFrICAgICAgICAgICAgcHJpbnQoaVswXSlicmVhaw==;1;-1;138150;2017-12-11 07:08:25
2403;1646599;30;YnJlYWtkZWYgbW9zdF9jb21tb24obXlsaXN0KTpicmVhayAgICBtID0gMGJyZWFrICAgIHIgPSAwYnJlYWsgICAgZm9yIGkgaW4gc2V0KG15bGlzdCk6YnJlYWsgICAgICAgIHggPSBteWxpc3QuY291bnQoaSlicmVhayAgICAgICAgaWYgeCA IG06YnJlYWsgICAgICAgICAgICBtID0geGJyZWFrICAgICAgICAgICAgciA9IGlicm;1;-1;26050;2017-12-11 07:26:25
2404;1646599;5;ZGVmIGR1cGxpY2F0aW9uKHRleHQpOmJyZWFrICAgIHogPSAnJ2JyZWFrICAgIGZvciBpIGluIHRleHQ6YnJlYWsgICAgICAgIHogKz0gaSArIGlicmVhayAgICByZXR1cm4gemJyZWFr;1;-1;8850;2017-12-11 08:06:12
2405;1648703;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIChhJTIgPT0gMSBhbmQgYiUyID09IDApIG9yIChhJTIgPT0gMCBhbmQgYiUyID09IDEpYnJlYWs=;1;-1;56400;2017-12-11 08:13:13
2406;1648703;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiBhIDwgMyBvciBiIDwgMyBvciBjIDwgM2JyZWFr;1;-1;36050;2017-12-11 08:13:56
2407;1648703;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCAyKm4pYnJlYWsgICAgcHJpbnQoIlRyb2puYXNvYmVrIiwgMypuKWJyZWFrICAgIHByaW50KCJEZXNldGluYXNvYmVrIiwgMTAqbik=;1;-1;62100;2017-12-11 08:15:00
2408;1646599;28;ZGVmIHN0cmluZ196aXAodGV4dDEsIHRleHQyKTpicmVhayAgICByZXR1cm4gJycuam9pbignJy5qb2luKHgpIGZvciB4IGluIHppcCh0ZXh0MSwgdGV4dDIpKQ==;0;-1;25150;2017-12-11 08:20:13
2409;1648730;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgYV9qZV9zdWRlID0gYSAlIDIgPT0gMGJyZWFrICAgIGFfamVfbGljaGUgPSBub3QgYV9qZV9zdWRlYnJlYWsgICAgYl9qZV9zdWRlID0gYiAlIDIgPT0gMGJyZWFrICAgIGJfamVfbGljaGUgPSBub3QgYl9qZV9zdWRlYnJlYWsgICAgaWYgYV9qZV9zdWRlIGFuZCBiX2plX2xpY2hlIG9yIG;1;-1;150700;2017-12-11 10:04:40
2410;1648730;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIGxpc3QgPSBbYSwgYiwgY11icmVhayAgICBoYXBweSA9IFtUcnVlIGZvciB4IGluIGxpc3QgaWYgeCA8IDNdYnJlYWsgICAgaWYgaGFwcHk6YnJlYWsgICAgICAgIHJldHVybiBUcnVlYnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWs=;1;-1;101600;2017-12-11 10:06:34
2411;1649033;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIGlmIChhPDMpIG9yIChiPDMpIG9yIChjPDMpOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIGVsc2U6YnJlYWsJCXJldHVybiBGYWxzZWJyZWFr;1;-1;168950;2017-12-11 10:50:00
2412;1649033;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgaWYgKCgoYSUyKSA9PSAwKSBhbmQgKChiJTIpICE9IDApIG9yICgoYiUyKSA9PSAwKSBhbmQgKChhJTIpICE9IDApKTpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICByZXR1cm4gRmFsc2VicmVhaw==;1;-1;278150;2017-12-11 10:59:21
2413;1649271;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgaWYgYSUyID09IDAgYW5kIGIlMiE9MCBvciBiJTIgPT0gMCBhbmQgYSUyIT0wOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIGVsc2U6YnJlYWsgICAgICAgIHJldHVybiBGYWxzZWJyZWFr;1;-1;866450;2017-12-11 11:04:09
2414;1649271;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIGlmIGEgPCAzIG9yIGIgPCAzIG9yIGMgPCAzOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIGVsc2U6YnJlYWsgICAgICAgIHJldHVybiBGYWxzZWJyZWFr;1;-1;160400;2017-12-11 11:07:06
2415;1649290;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIGlmIGEgPCAzIG9yIGIgPCAzIG9yIGMgPCAzOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIGJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;1;-1;134250;2017-12-11 11:11:29
2416;1649271;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBuKj0yYnJlYWsgICAgcHJpbnQoIkR2b2puYXNvYmVrIiwgbilicmVhayAgICBuKz03YnJlYWsgICAgcHJpbnQoIlRyb2puYXNvYmVrIiwgbilicmVhayAgICBuKz00OWJyZWFrICAgIHByaW50KCJEZXNldGluYXNvYmVrIiwgbilicmVhaw==;0;-1;392300;2017-12-11 11:16:01
2417;1649271;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBuKj0yYnJlYWsgICAgcHJpbnQoIkR2b2puYXNvYmVrIiwgbilicmVhayAgICBuPW4qM2JyZWFrICAgIHByaW50KCJUcm9qbmFzb2JlayIsIG4pYnJlYWsgICAgbj00OWJyZWFrICAgIHByaW50KCJEZXNldGluYXNvYmVrIiwgbilicmVhaw==;0;-1;498400;2017-12-11 11:17:47
2418;1649756;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIHNldCgoYSAlIDIsIGIgJSAyKSkgPT0gc2V0KCgwLCAxKSlicmVhaw==;1;-1;402100;2017-12-11 13:00:14
2419;1649756;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiAoaW50KGEgPCAzKSArIGludChiIDwgMykgKyBpbnQoYyA8IDMpKSA IDBicmVhaw==;1;-1;209700;2017-12-11 13:04:12
2420;1649756;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCBuICogMilicmVhayAgICBwcmludCgiVHJvam5hc29iZWsiLCBuICogMylicmVhayAgICBwcmludCgiRGVzZXRpbmFzb2JlayIsIG4gKiAxMClicmVhaw==;1;-1;66100;2017-12-11 13:05:31
2421;1649756;32;ZGVmIG5lYXJfZmlmdHkobik6YnJlYWsgICAgcmV0dXJuIGFicyg1MCAtIGFicyhuKSkgPCAxMSBvciBhYnMoMTUwIC0gYWJzKG4pKSA8IDExYnJlYWs=;1;-1;394800;2017-12-11 13:13:36
2422;1649756;33;ZGVmIGltcG9zZV9maW5lKGFnZSwgYmVlcik6YnJlYWsgICAgcmV0dXJuIGFnZSA8IDE4IGlmIGJlZXIgZWxzZSBGYWxzZWJyZWFr;1;-1;227600;2017-12-11 13:17:29
2423;1649978;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgaXNBID0gKGEgJSAyID09IDApYnJlYWsgICAgaXNCID0gKGIgJSAyID09IDApYnJlYWsgICAgaWYgKGlzQSk6YnJlYWsgICAgICAgIGlmKG5vdCBpc0IpOmJyZWFrICAgICAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICBlbHNlOmJyZWFrICAgICAgICBpZihpc0IpOmJyZWFrICAgICAgIC;1;-1;250100;2017-12-11 14:03:41
2424;1649978;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIGxpc3QgPSBbYSwgYiwgY11icmVhayAgICBmb3IgaSBpbiBsaXN0OmJyZWFrICAgICAgICBpZiAoaSA8IDMpOmJyZWFrICAgICAgICAJcmV0dXJuIFRydWU7YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWs=;1;-1;238150;2017-12-11 14:07:48
2425;1649978;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCAyKm4pYnJlYWsgICAgcHJpbnQoIlRyb2puYXNvYmVrIiwgMypuKWJyZWFrICAgIHByaW50KCJEZXNldGluYXNvYmVrIiwgMTAqbilicmVhaw==;1;-1;1058500;2017-12-11 14:25:31
2426;1510496;33;ZGVmIGltcG9zZV9maW5lKGFnZSwgYmVlcik6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWs=;0;-1;8250;2017-12-11 14:28:33
2427;1649978;32;ZGVmIG5lYXJfZmlmdHkobik6YnJlYWsgICAgYSA9IDE1MCAtIG5icmVhayAgICBiID0gNTAgLSBuYnJlYWsgICAgaWYgKGFicyhhKSA8PSAxMCBvciBhYnMoYikgPD0gMTApOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;1;-1;258200;2017-12-11 14:43:23
2428;1649978;33;ZGVmIGltcG9zZV9maW5lKGFnZSwgYmVlcik6YnJlYWsgICAgaWYgKGFnZSA8IDE4IGFuZCBiZWVyKTpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICByZXR1cm4gRmFsc2VicmVhaw==;1;-1;64750;2017-12-11 14:44:32
2429;1649978;45;ZGVmIHByaW50X3N1bXMobik6YnJlYWsgICAgZm9yIGkgaW4gcmFuZ2UoMSwgbik6YnJlYWsgICAgICAgIHByaW50KG4sICI9IiwgaSwgIisiLCBuIC0gaSlicmVhaw==;1;-1;63850;2017-12-11 14:46:00
2430;1649978;35;ZGVmIHNlcXVlbmNlcyhuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZSgxLCBuICsgMSk6YnJlYWsgICAgICAgIGZvciBqIGluIHJhbmdlKDEsIGkrMSk6YnJlYWsgICAgICAgICAgICBwcmludChqLCBlbmQ9IiAiKWJyZWFrICAgICAgICBwcmludCgpYnJlYWs=;1;-1;81600;2017-12-11 14:47:24
2431;1649978;43;ZGVmIG9kZF9ldmVuKG4pOmJyZWFrICAgIHMgPSAiICJicmVhayAgICBmb3IgaSBpbiByYW5nZSgxLCBuICsgMSk6YnJlYWsgICAgICAgIGlmIGkgJSAyID09IDE6YnJlYWsgICAgICAgICAgICBwcmludChpLCBlbmQ9IiAiKWJyZWFrICAgICAgICBlbHNlOmJyZWFrICAgICAgICAgICAgcyArPSBzdHIoaSkgKyAiICJicmVhayAgIC;1;-1;133050;2017-12-11 14:49:40
2432;1649978;36;ZGVmIHByb2R1Y3RzKG4pOmJyZWFrICAgIGZvciByb3cgaW4gcmFuZ2UoMSwgbiArIDEpOmJyZWFrICAgICAgICBmb3IgY29sIGluIHJhbmdlKDEsIG4gKyAxKTpicmVhayAgICAgICAgICAgIHByaW50KHJvdyAqIGNvbCwgZW5kPSIgIilicmVhayAgICAgICAgcHJpbnQoKWJyZWFr;1;-1;103000;2017-12-11 14:51:51
2433;1649978;37;ZGVmIHN0YXJzKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsIG4gKyAxKTpicmVhayAgICAgICAgcHJpbnQoIioiLCBlbmQ9IiIpYnJlYWsgICAgICAgIGlmIChpICUgNSA9PSAwKTpicmVhayAgICAgICAgICAgIHByaW50KCJ8IiwgZW5kPSIiKWJyZWFrICAgIHByaW50KClicmVhaw==;1;-1;76800;2017-12-11 14:53:11
2434;1649978;38;ZGVmIGNyb3NzKG4pOiAgICBicmVhayAgICBmb3IgaSBpbiByYW5nZSgzKm4pOmJyZWFrICAgICAgICBpZiAoaSA PSBuIGFuZCBpIDwgbiAqIDIpOmJyZWFrICAgICAgICAgICAgcHJpbnQoMypuICogIiMiKWJyZWFrICAgICAgICAgICAgY29udGludWVicmVhayAgICAgICAgZm9yIGogaW4gcmFuZ2UoMypuKTpicmVhayAgICAgIC;1;-1;341650;2017-12-11 14:59:17
2435;1649978;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICBwcm9kdWN0ID0gMWJyZWFrICAgIGZvciB4IGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmICh4ID09IDApOmJyZWFrICAgICAgICAgICAgY29udGludWVicmVhayAgICAgICAgcHJvZHVjdCAqPSB4YnJlYWsgICAgcmV0dXJuIHByb2R1Y3RicmVhaw==;1;-1;77650;2017-12-11 15:04:36
2436;1649978;15;ZGVmIGV2ZXJ5X3NlY29uZF9udW1iZXIobnVtX2xpc3QpOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKDAsIGxlbihudW1fbGlzdCkpOmJyZWFrICAgICAgICBpZiAoaSAlIDIgPT0gMCk6YnJlYWsgICAgCQlwcmludChudW1fbGlzdFtpXSlicmVhaw==;1;-1;172000;2017-12-11 15:07:34
2437;1649978;16;ZGVmIG1heF9wYWlyX3N1bShudW1fbGlzdCk6YnJlYWsgICAgcmVzdWx0ID0gbnVtX2xpc3RbMF0gKyBudW1fbGlzdFsxXWJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsIGxlbihudW1fbGlzdCkgLSAxKTpicmVhayAgICAgICAgaWYgKHJlc3VsdCA PSBudW1fbGlzdFtpXSArIG51bV9saXN0W2krMV0pOmJyZWFrICAgICAgICAgIC;1;-1;255750;2017-12-11 15:12:08
2438;1649978;17;ZGVmIGZpdmVfbXVsdGlwbGVzKG51bV9saXN0KTpicmVhayAgICByZXN1bHQgPSBbXWJyZWFrICAgIGZvciB4IGluIG51bV9saXN0OmJyZWFrICAgICAgICBpZiAoeCAlIDUgPT0gMCk6YnJlYWsgICAgICAgICAgICByZXN1bHQgKz0gW3hdYnJlYWsgICAgcmV0dXJuIHJlc3VsdGJyZWFr;1;-1;80800;2017-12-11 15:13:36
2439;1649978;29;ZGVmIHVuaXF1ZShteWxpc3QpOmJyZWFrICAgIHJlc3VsdCA9IFtdYnJlYWsgICAgZm9yIHggaW4gbXlsaXN0OmJyZWFrICAgICAgICBpZiAoeCBpbiByZXN1bHQpOmJyZWFrICAgICAgICAgICAgY29udGludWVicmVhayAgICAgICAgZWxzZTpicmVhayAgICAgICAgICAgIHJlc3VsdCArPSBbeF1icmVhayAgICBicmVhayAgICByZX;1;-1;199400;2017-12-11 15:16:58
2440;1649978;4;ZGVmIGFscGhhYmV0KG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKG4pOmJyZWFrICAgICAgICBwcmludChjaHIoNjUgKyBpICUgMjYpKWJyZWFr;1;-1;144850;2017-12-11 15:23:17
2441;1649978;5;ZGVmIGR1cGxpY2F0aW9uKHRleHQpOmJyZWFrICAgIHJlc3VsdF90ZXh0ID0gIiJicmVhayAgICBmb3IgeCBpbiB0ZXh0OmJyZWFrICAgICAgICByZXN1bHRfdGV4dCArPSAyICogeCBicmVhayAgICAgICAgYnJlYWsgICAgcmV0dXJuIHJlc3VsdF90ZXh0YnJlYWs=;1;-1;846650;2017-12-11 15:44:47
2442;1650315;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICBwcmQgPSBOb25lYnJlYWsgICAgZm9yIG51bWJlciBpbiBudW1iZXJzOmJyZWFrICAgICAgICBpZiBudW1iZXI6YnJlYWsgICAgICAgICAgICBpZiBwcmQgaXMgTm9uZTpicmVhayAgICAgICAgICAgICAgICBwcmQgPSBudW1iZXJicmVhayAgICAgICAgICAgIGVsc2;1;-1;182250;2017-12-11 15:48:13
2443;1650315;15;ZGVmIGV2ZXJ5X3NlY29uZF9udW1iZXIobnVtX2xpc3QpOmJyZWFrICAgIGZvciBpLG4gaW4gZW51bWVyYXRlKG51bV9saXN0KTpicmVhayAgICAgICAgaWYgbm90IGkgJSAyOmJyZWFrICAgIAkJcHJpbnQobilicmVhaw==;1;-1;62350;2017-12-11 15:49:19
2444;1620867;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgaWYgYSAlIDIgPT0gMDogYnJlYWsgICAgICAgIHJldHVybiBUcnVlYnJlYWsgICAgaWYgYiAlIDIgPT0gMDpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICBpZiBhICUgMiA9PSAwIGFuZCBiICUgMiA9PSAwOmJyZWFrICAgICAgICByZXR1cm4gRmFsc2VicmVhayAgICBlbHNlOm;0;-1;188250;2017-12-11 15:50:46
2445;1620867;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgaWYgYSAlIDIgPT0gMCBhbmQgYiAlIDIgPT0gMTpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICBlbHNlOmJyZWFrICAgICAgICByZXR1cm4gRmFsc2VicmVhayAgICAgYnJlYWs=;0;-1;216300;2017-12-11 15:51:14
2446;1620867;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgaWYgYSAlIDIgPT0gMCBhbmQgYiAlIDIgPT0gMTpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICBpZiBiICUgMiA9PSAwIGFuZCBhICUgMiA9PSAxOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIGVsc2U6YnJlYWsgICAgICAgIHJldHVybiBGYWxzZWJyZWFrICAgIC;1;-1;240050;2017-12-11 15:51:38
2447;1650315;16;ZGVmIG1heF9wYWlyX3N1bShudW1fbGlzdCk6YnJlYWsgICAgbWF4aWsgPSBOb25lYnJlYWsgICAgZm9yIGkgaW4gcmFuZ2UobGVuKG51bV9saXN0KS0xKTpicmVhayAgICAgICAgcyA9IG51bV9saXN0W2ldICsgbnVtX2xpc3RbaSsxXWJyZWFrICAgICAgICBpZiAobWF4aWsgaXMgTm9uZSkgb3IgKHMgPiBtYXhpayk6YnJlYWsgIC;1;-1;280700;2017-12-11 15:54:15
2448;1620867;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrCWlmIGEgPD0gMiBvciBiIDw9IDIgb3IgYyA8PSAyOmJyZWFrCQlyZXR1cm4gVHJ1ZWJyZWFrCWVsc2U6YnJlYWsJCXJldHVybiBGYWxzZQ==;1;-1;395200;2017-12-11 16:00:50
2449;1620867;45;;0;-1;129550;2017-12-11 16:03:09
2450;1620867;45;ZGVmIHByaW50X3N1bXMobik6YnJlYWsgICAgayA9IG5icmVhayAgICBmb3IgaSBpbiByYW5nZSgxLG4pOmJyZWFrICAgICAgICBrIC09IDFicmVhawlwcmludChuLCAiPSIsIGksICIrIiwgaylicmVhaw==;1;-1;284950;2017-12-11 16:10:53
2451;463967;43;ZGVmIG9kZF9ldmVuKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsIG4pOmJyZWFrICAgICAgICBpZiBpICUgMiA9PSAxOmJyZWFrICAgICAgICAgICAgcHJpbnQoaSwgZW5kPSIgIilicmVhayAgICAgICAgaWYgaSAlMiA9PSAwOmJyZWFrICAgICAgICAgICAgcHJpbnQoaSlicmVhayAgICBwcmludCgpYnJlYWs=;0;-1;107800;2017-12-11 16:24:39
2452;1649535;1;ZGVmIG51bWJlcnMobik6YnJlYWsgICAgZm9yIGkgaW4gcmFuZ2UobilicmVhayAgICAJcHJpbnQoaSsxKWJyZWFr;0;-1;29350;2017-12-11 16:58:17
2453;1649535;1;ZGVmIG51bWJlcnMobik6YnJlYWsgICAgZm9yIGkgaW4gcmFuZ2Uobik6YnJlYWsgICAgCXByaW50KGkrMSlicmVhaw==;1;-1;37900;2017-12-11 16:58:26
2454;1649535;46;ZGVmIHByaW50X3Byb2R1Y3RzKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlICgxLG4rMSk6YnJlYWsgICAgICAgIGlmIG4gJSBpID09IDA6YnJlYWsgICAgICAgICAgICBwcmludChuLCAnPScsIGksICcqJywgbi8vaSApYnJlYWsgICAgICAgICAgICBicmVhayAgIGJyZWFr;1;-1;180400;2017-12-11 17:05:21
2455;1649535;3;ZGVmIGZhY3RvcmlhbChuKTpicmVhayAgICBqID0gMWJyZWFrICAgIGZvciBpIGluIHJhbmdlKG4pOmJyZWFrICAgIAlqPShpKzEpKmogICAgYnJlYWsgICAgcmV0dXJuIGpicmVhaw==;1;-1;120500;2017-12-11 17:07:25
2456;1649535;7;ZGVmIGRpdmlzb3JzKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsbisxKTpicmVhayAgICAgICAgaWYgbiVpPT0wOmJyZWFrICAgIAkJcHJpbnQoaSlicmVhaw==;1;-1;155450;2017-12-11 17:10:05
2457;1649535;20;ZGVmIGRpdmlzb3JzX2NvdW50KG4pOmJyZWFrICAgIGNvdW50ZXI9MGJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsbisxKTpicmVhayAgICAgICAgaWYgbiVpPT0wOmJyZWFrICAgICAgICAgICAgY291bnRlciArPSAxYnJlYWsgICAgcmV0dXJuIGNvdW50ZXJicmVhaw==;1;-1;120700;2017-12-11 17:12:09
2458;1649535;21;ZGVmIHBvd2VycyhiYXNlLCBuKTpicmVhayAgICBicmVhayAgICBmb3IgaSBpbiByYW5nZSgxLG4rMSk6YnJlYWsgICAgICAgIGo9MWJyZWFrICAgICAgICBmb3IgXyBpbiByYW5nZShpKTpicmVhayAgICAgICAgCWo9aipiYXNlYnJlYWsgICAgICAgIHByaW50KGopYnJlYWs=;1;-1;239700;2017-12-11 17:16:13
2459;1650575;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgaWYgKGElMiA9PSAxKSBhbmQgKGIlMiA9PSAwKTpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICBlbGlmIChhJTIgPT0gMCkgYW5kIChiJTIgPT0gMSk6YnJlYWsgICAgICAgIHJldHVybiBUcnVlYnJlYWsgICAgZWxzZTpicmVhawkgICAgcmV0dXJuIEZhbHNlYnJlYWs=;1;-1;259300;2017-12-11 17:16:43
2460;1650575;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIGlmIGEgPCAzIGFuZCBiIDwgMyBhbmQgYyA8IDM6YnJlYWsgICAgICAgIHJldHVybiBUcnVlYnJlYWsgICAgZWxzZTpicmVhawkgICAgcmV0dXJuIEZhbHNlYnJlYWs=;0;-1;104800;2017-12-11 17:18:31
2461;1649535;18;ZGVmIGRpZ2l0X3N1bShuKTpicmVhayAgICBjb3VudGVyPTBicmVhayAgICB3aGlsZSBuID4gOSA6YnJlYWsgICAgICAgIGNvdW50ZXIgPSBuICUgMTAgKyBjb3VudGVyYnJlYWsgICAgICAgIG4gPSBuIC8vIDEwYnJlYWsgICAgY291bnRlciArPSBuICAgYnJlYWsgICAgcmV0dXJuIGNvdW50ZXJicmVhaw==;1;-1;124200;2017-12-11 17:25:22
2462;1649535;2;ZGVmIGZpYm9uYWNjaShuKTpicmVhayAgICBhPTFicmVhayAgICBwcmludChhKWJyZWFrICAgIGI9MWJyZWFrICAgIHByaW50KGIpYnJlYWsgICAgYyA9IDBicmVhayAgICBmb3IgaSBpbiByYW5nZShuLTIpOmJyZWFrICAgICAgICBjID0gYSArIGJicmVhayAgICAgICAgcHJpbnQgKGMpYnJlYWsgICAgICAgIGEgPSBiYnJlYWsgIC;1;-1;285950;2017-12-11 17:30:13
2463;1649535;45;ZGVmIHByaW50X3N1bXMobik6YnJlYWsgICAgZm9yIGkgaW4gcmFuZ2UoMSxuKTpicmVhayAgICAgICAgcHJpbnQobiwgIj0iLCBpLCAiKyIsIG4taSlicmVhaw==;1;-1;44200;2017-12-11 17:32:42
2464;1649535;35;ZGVmIHNlcXVlbmNlcyhuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZSgxLG4rMSk6YnJlYWsgICAgICAgIGZvciBqIGluIHJhbmdlKDEsaSsxKTpicmVhayAgICAgICAgICAgIHByaW50KGosIGVuZD0iICIpYnJlYWsgICAgICAgIHByaW50KClicmVhaw==;1;-1;72200;2017-12-11 17:35:41
2465;1649535;43;ZGVmIG9kZF9ldmVuKG4pOmJyZWFrICAgIGZvciBqIGluICgxLDApOmJyZWFrICAgICAgICBmb3IgaSBpbiByYW5nZSgxLCBuKzEpOmJyZWFrICAgICAgICAgICAgaWYgaSAlIDIgPT0gajpicmVhayAgICAgICAgICAgICAgICBwcmludChpLCBlbmQ9IiAiKWJyZWFrICAgICAgICBwcmludCgpYnJlYWsgICAgICAgIHByaW50KCcgJy;1;-1;127000;2017-12-11 17:51:28
2466;1649535;36;ZGVmIHByb2R1Y3RzKG4pOmJyZWFrICAgIGZvciByb3cgaW4gcmFuZ2UoMSxuKzEpOmJyZWFrICAgICAgICBmb3IgY29sIGluIHJhbmdlKDEsbisxKTpicmVhayAgICAgICAgICAgIHByaW50KHJvdyAqIGNvbCwgZW5kPSIgIilicmVhayAgICAgICAgcHJpbnQoKWJyZWFr;1;-1;80950;2017-12-11 17:52:56
2467;1649535;37;ZGVmIHN0YXJzKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsbisxKTpicmVhayAgICAgICAgcHJpbnQoIioiLCBlbmQ9IiIpYnJlYWsgICAgICAgIGlmIGklNSA9PSAwOmJyZWFrICAgICAgICAgICAgcHJpbnQoInwiLCBlbmQ9IiIpYnJlYWsgICAgcHJpbnQoKWJyZWFr;1;-1;40800;2017-12-11 17:53:40
2468;1650575;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgaWYgKGElMiA9PSAxKSBhbmQgKGIlMiA9PSAwKTpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICBlbGlmIChhJTIgPT0gMCkgYW5kIChiJTIgPT0gMSk6YnJlYWsgICAgICAgIHJldHVybiBUcnVlYnJlYWsgICAgZWxzZTpicmVhayAgICAgICAgcmV0dXJuIEZhbHNlYnJlYWs=;1;-1;16550;2017-12-11 17:54:58
2469;1649535;38;ZGVmIGNyb3NzKG4pOiAgICBicmVhayAgICBmb3IgaSBpbiByYW5nZSgzKm4pOmJyZWFrICAgICAgICBmb3IgaiBpbiByYW5nZSgzKm4pOmJyZWFrICAgICAgICAgICAgaWYgaS8vbiA9PSAxIG9yIGovL24gPT0gMTpicmVhayAgICAgICAgICAgICAgICBwcmludCgiIyIsIGVuZD0iIilicmVhayAgICAgICAgICAgIGVsc2U6YnJlYW;1;-1;199450;2017-12-11 17:57:03
2470;1649535;45;ZGVmIHByaW50X3N1bXMobik6YnJlYWsgICAgZm9yIGkgaW4gcmFuZ2UoMSxuKTpicmVhayAgICAgICAgcHJpbnQobiwgIj0iLCBpLCAiKyIsIG4taSlicmVhaw==;1;-1;29800;2017-12-11 17:57:40
2471;1650747;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgaWYgKGElMj09MCBhbmQgYiUyPT0xKSBvciAoYSUyPT0xIGFuZCBiJTI9PTApOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;1;-1;129600;2017-12-11 18:01:24
2472;1650747;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIGlmIGE8MyBvciBiPDMgb3IgYzwzIDpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICByZXR1cm4gRmFsc2VicmVhaw==;1;-1;114550;2017-12-11 18:03:28
2473;1650747;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCAyKm4pYnJlYWsgICAgcHJpbnQoJ1Ryb2puYXNvYmVrJywgMypuKWJyZWFrICAgIHByaW50KCdEZXNldGluYXNvYmVrJywgMTAqbilicmVhaw==;1;-1;114700;2017-12-11 18:05:27
2474;1650747;32;ZGVmIG5lYXJfZmlmdHkobik6YnJlYWsgICAgaWYgLTEwPDUwIC0gbjwxMCBvciAtMTA8MTUwIC0gbjwxMDpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICByZXR1cm4gRmFsc2VicmVhaw==;0;-1;128850;2017-12-11 18:07:39
2475;1650747;32;ZGVmIG5lYXJfZmlmdHkobik6YnJlYWsgICAgaWYgLTEwPD01MCAtIG48PTEwIG9yIC0xMDw9MTUwIC0gbjw9MTA6YnJlYWsgICAgICAgIHJldHVybiBUcnVlYnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWs=;1;-1;142650;2017-12-11 18:07:53
2476;1650747;33;ZGVmIGltcG9zZV9maW5lKGFnZSwgYmVlcik6YnJlYWsgICAgaWYgYWdlPDE4IGFuZCBiZWVyPT1UcnVlOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;1;-1;74550;2017-12-11 18:09:15
2477;1414037;42;aXNrZGZza2Z2bG9kamdvdmZsb2dicmVhayAgICByZXR1cm4gRmFsc2VicmVhaw==;0;-1;43200;2017-12-11 18:09:31
2478;1414037;42;aXNrZGZza2Z2bG9kamdvdmZsb2dicmVhayAgICByZXR1cm4gRmFsc2VicmVhaw==;0;-1;50550;2017-12-11 18:09:38
2479;1414037;42;aXNrZGZza2Z2bG9kamdvdmZsb2dicmVhayAgICByZXR1cm4gRmFsc2VicmVhaw==;0;-1;52300;2017-12-11 18:09:40
2480;1414037;42;aXNrZGZza2Z2bG9kamdvdmZsb2dicmVhayAgICByZXR1cm4gRmFsc2VicmVhaw==;0;-1;53250;2017-12-11 18:09:41
2481;1414037;42;aXNrZGZza2Z2bG9kamdvdmZsb2dicmVhayAgICByZXR1cm4gRmFsc2VicmVhaw==;0;-1;53550;2017-12-11 18:09:41
2482;1414037;42;aXNrZGZza2Z2bG9kamdvdmZsb2dicmVhayAgICByZXR1cm4gRmFsc2VicmVhaw==;0;-1;53800;2017-12-11 18:09:42
2483;1414037;42;aXNrZGZza2Z2bG9kamdvdmZsb2dicmVhayAgICByZXR1cm4gRmFsc2VicmVhaw==;0;-1;54050;2017-12-11 18:09:42
2484;1414037;42;aXNrZGZza2Z2bG9kamdvdmZsb2dicmVhayAgICByZXR1cm4gRmFsc2VicmVhaw==;0;-1;66050;2017-12-11 18:09:54
2485;1650747;4;ZGVmIGFscGhhYmV0KG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsbisxKTpicmVhayAgICAgICAgaWYgaT09MjY6YnJlYWsgICAgICAgIAlhbHBoYWJldChuLWkpYnJlYWsgICAgICAgIGVsaWYgaTwyNzpicmVhayAgICAgICAgCXByaW50KGNocihpKzY0KSlicmVhayAgICAgICAgYnJlYWsgICAgICAgIGJyZWFr;0;-1;690750;2017-12-11 18:23:17
2486;1650747;4;ZGVmIGFscGhhYmV0KG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsbisxKTpicmVhayAgICAgICAgaWYgaT09Mjc6YnJlYWsgICAgICAgIAlhbHBoYWJldChuLWkpYnJlYWsgICAgICAgIGVsaWYgaTwyNzpicmVhayAgICAgICAgCXByaW50KGNocihpKzY0KSlicmVhayAgICAgICAgYnJlYWsgICAgICAgIGJyZWFr;0;-1;721650;2017-12-11 18:23:48
2487;1650747;4;ZGVmIGFscGhhYmV0KG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsbisxKTpicmVhayAgICAgICAgaWYgaT09Mjc6YnJlYWsgICAgICAgIAlhbHBoYWJldChuLWkrMSlicmVhayAgICAgICAgZWxpZiBpPDI3OmJyZWFrICAgICAgICAJcHJpbnQoY2hyKGkrNjQpKWJyZWFrICAgICAgICBicmVhayAgICAgICAgYnJlYWs=;1;-1;741650;2017-12-11 18:24:08
2488;1650747;5;ZGVmIGR1cGxpY2F0aW9uKHRleHQpOmJyZWFrICAgIHRleHRiPScnYnJlYWsgICAgZm9yIGkgaW4gcmFuZ2UobGVuKHRleHQpKTpicmVhayAgICAgICAgICAgICAgICAgICB0ZXh0Yj10ZXh0Yit0ZXh0W2ldK3RleHRbaV1icmVhayAgICByZXR1cm4gdGV4dGJicmVhaw==;1;-1;383750;2017-12-11 18:31:01
2489;1650931;45;ZGVmIHByaW50X3N1bXMobik6YnJlYWsgICAgZm9yIGkgaW4gcmFuZ2UoMSxuKTpicmVhayAgICAgICAgaiA9IG4taWJyZWFrICAgICAgICBwcmludChuLCAiPSIsIGksICIrIiwgailicmVhaw==;1;-1;94300;2017-12-11 19:03:34
2490;1650931;35;ZGVmIHNlcXVlbmNlcyhuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZSgxLG4rMSk6YnJlYWsgICAgICAgIGZvciBqIGluIHJhbmdlKDEsaSsxKTpicmVhayAgICAgICAgICAgIHByaW50KGosIGVuZD0iICIpYnJlYWsgICAgICAgIHByaW50KClicmVhaw==;1;-1;118450;2017-12-11 19:05:41
2491;1651019;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICBudW1iZXJzID0gZmlsdGVyKE5vbmUsIG51bWJlcnMpYnJlYWsgICAgc291Y2luID0gbnVtYmVyc1swXWJyZWFrICAgIGZvciBjaW5pdGVsIGluIG51bWJlcnNbMTpdOmJyZWFrICAgICAgICBzb3VjaW4gKj0gY2luaXRlbGJyZWFrICAgIHJldHVybiBzb3VjaW5icm;1;-1;333150;2017-12-11 19:32:16
2492;1651201;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgaWYgYSViID09IDAgb3IgYiVhID09IDA6YnJlYWsgICAgICAgIHJldHVybiBUcnVlYnJlYWsgICAgZWxzZTpicmVhayAgICAgICAgcmV0dXJuIEZhbHNl;0;-1;529450;2017-12-11 20:38:08
2493;1651201;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgaWYgYSViPT0wIGFuZCBiJWEhPTAgb3IgYiVhPT0wIGFuZCBhJWIhPTAgICA6YnJlYWsgICAgICAgIHJldHVybiBUcnVlYnJlYWsgICAgZWxzZTpicmVhayAgICAgICAgcmV0dXJuIEZhbHNlYnJlYWs=;0;-1;1027100;2017-12-11 21:00:29
2494;1651323;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICBpZiBub3QgbnVtYmVyczpicmVhayAgICAgICAgcmV0dXJuIDBicmVhayAgICBlbHNlOmJyZWFrICAgICAgICBwcm9kdWN0ID0gMWJyZWFrICAgICAgICBmb3IgaSBpbiBudW1iZXJzOmJyZWFrICAgICAgICAgICAgaWYgaSAhPSAwOmJyZWFrICAgICAgICAgICAgIC;1;-1;217000;2017-12-11 21:27:04
2495;1651323;15;ZGVmIGV2ZXJ5X3NlY29uZF9udW1iZXIobnVtX2xpc3QpOmJyZWFrICAgIGkgPSAwYnJlYWsgICAgZm9yIGkgaW4gcmFuZ2UobGVuKG51bV9saXN0KSk6YnJlYWsgICAgICAgIGlmIGklMiA9PSAwOmJyZWFrICAgICAgICAgICAgcHJpbnQobnVtX2xpc3RbaV0pYnJlYWs=;1;-1;72350;2017-12-11 21:28:40
2496;1651201;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgaWYgYSUyPT0wIGFuZCBiJTIhPTA6YnJlYWsgICAgICAgIHJldHVybiBUcnVlYnJlYWsgICAgZWxpZiBiJTI9PTAgYW5kIGElMiE9MDpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICBlbHNlOmJyZWFrICAgICAgICByZXR1cm4gRmFsc2U=;1;-1;246500;2017-12-11 22:58:17
2497;1651201;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIGlmIGEgPCAzIG9yIGIgPCAzIG9yIGMgPCAzOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIGVsc2U6YnJlYWsgICAgICAgIHJldHVybiBGYWxzZWJyZWFr;1;-1;45550;2017-12-11 22:59:08
2498;1618306;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;28100;2017-12-12 08:26:57
2499;1652894;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;78950;2017-12-12 13:23:29
2500;1652985;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KG4pYnJlYWs=;0;-1;36700;2017-12-12 13:42:36
2501;1652985;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KG4pYnJlYWs=;0;-1;38950;2017-12-12 13:42:38
2502;1652985;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KG4pYnJlYWs=;0;-1;39600;2017-12-12 13:42:39
2503;479602;41;ZGVmIG5pY2UoYSwgYik6YnJlYWtwcmludCAgICByZXR1cm4gRmFsc2VicmVhaw==;0;-1;27300;2017-12-12 17:17:22
2504;479602;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgcHJpbnQobmljZSgzLCA1KSlicmVha3ByaW50KG5pY2UoMiwgNCkpYnJlYWtwcmludChuaWNlKDIsIDUpKWJyZWFrcHJpbnQobmljZSgzLCA2KSkgICByZXR1cm4gRmFsc2VicmVhaw==;0;-1;14200;2017-12-12 17:17:39
2505;1653878;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCBuKWJyZWFrYm1iY25hIG1jeWIgYiBudnluY2h5aiA0MiAyNCBhM2EyNCA1NCA0MnM0XDQxMDEwMDAxMDExMDEwMTAyMDEwMTAxMDEwMTAxMDEwMTEwMTAxMDEwMTEwMTAxMTAxMDEwMTAxMDEw;0;-1;32650;2017-12-12 18:45:53
2506;1656042;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;22400;2017-12-13 12:10:52
2507;1656042;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;24300;2017-12-13 12:10:54
2508;1656042;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;27100;2017-12-13 12:10:56
2509;1656042;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;80850;2017-12-13 12:11:51
2510;1656042;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;164100;2017-12-13 12:13:14
2511;1656042;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;165300;2017-12-13 12:13:15
2512;1656042;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;166000;2017-12-13 12:13:16
2513;1656042;8;;0;-1;246150;2017-12-13 12:14:36
2514;1656042;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWs=;0;-1;6100;2017-12-13 12:15:23
2515;1656042;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIFRydWVicmVhaw==;0;-1;24450;2017-12-13 12:15:41
2516;1656042;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIFRydWVicmVhaw==;0;-1;25850;2017-12-13 12:15:43
2517;1656042;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIFRydWVicmVhaw==;0;-1;26750;2017-12-13 12:15:44
2518;1656042;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIFRydWVicmVhaw==;0;-1;28100;2017-12-13 12:15:45
2519;1656042;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIFRydWVicmVhaw==;0;-1;68000;2017-12-13 12:16:54
2520;1656042;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIFRydWVicmVhaw==;0;-1;71100;2017-12-13 12:16:57
2521;1656042;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIFRydWVicmVhaw==;0;-1;74150;2017-12-13 12:17:00
2522;1656042;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIFRydWVicmVhaw==;0;-1;88650;2017-12-13 12:17:15
2523;1656042;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIFRydWVicmVhaw==;0;-1;91000;2017-12-13 12:17:17
2524;1656042;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWticmVhaw==;0;-1;100950;2017-12-13 12:17:27
2525;1656042;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWticmVhaw==;0;-1;103400;2017-12-13 12:17:30
2526;1426035;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWs=;0;-1;19050;2017-12-13 18:43:21
2527;1426035;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWs=;0;-1;23550;2017-12-13 18:43:26
2528;1426035;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWs=;0;-1;24450;2017-12-13 18:43:27
2529;1426035;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWs=;0;-1;24850;2017-12-13 18:43:27
2530;1426035;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWs=;0;-1;25200;2017-12-13 18:43:27
2531;1426035;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWs=;0;-1;46350;2017-12-13 18:43:48
2532;1426035;41;YnJlYWsgICAgYnJlYWs=;0;-1;67500;2017-12-13 18:44:09
2533;1657091;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgeD1hJTI7YnJlYWsgICAgeT1iJTI7YnJlYWsgICAgaWYgeCt5PT0xOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIGVsc2U6YnJlYWsgICAgCXJldHVybiBGYWxzZWJyZWFr;1;-1;706650;2017-12-13 18:44:35
2534;1657116;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgYyA9IGEgKyBiYnJlYWsgICAgaWYgYyAlIDIgPT0gMTpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICBlbHNlOmJyZWFrICAgICAgICByZXR1cm4gRmFsc2VicmVhaw==;1;-1;310900;2017-12-13 18:45:27
2535;1657116;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIGlmIGEgPCAzIG9yIGIgPCAzIG9yIGMgPCAzOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIGVsc2U6YnJlYWsgICAgICAgIHJldHVybiBGYWxzZWJyZWFr;1;-1;71550;2017-12-13 18:47:32
2536;1657144;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgaWYgKGEgKyBiKSAlIDIgPT0gMTpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICBlbHNlOmJyZWFrICAgIAlyZXR1cm4gRmFsc2VicmVhaw==;1;-1;46700;2017-12-13 18:51:06
2537;1657144;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIGlmIGEgPCAzIG9yIGIgPCAzIG9yIGMgPCAzOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIGVsc2U6YnJlYWsgICAgICAgIHJldHVybiBGYWxzZWJyZWFr;1;-1;42400;2017-12-13 18:51:51
2538;1657144;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCBuKjIpYnJlYWsgICAgcHJpbnQoIlRyb2puYXNvYmVrIiwgbiozKWJyZWFrICAgIHByaW50KCJEZXNldGluYXNvYmVrIiwgbioxMClicmVhaw==;1;-1;97350;2017-12-13 18:53:32
2539;1657144;32;ZGVmIG5lYXJfZmlmdHkobik6YnJlYWsgICAgaWYgYWJzKG4gLSA1MCkgPD0gMTAgb3IgYWJzKG4gLSAxNTApIDw9IDEwOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIGVsc2U6YnJlYWsgICAgCXJldHVybiBGYWxzZWJyZWFr;1;-1;258750;2017-12-13 18:58:00
2540;1657144;33;ZGVmIGltcG9zZV9maW5lKGFnZSwgYmVlcik6YnJlYWsgICAgaWYgYWdlIDwgMTggYW5kIGJlZXIgPT0gVHJ1ZTpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICBlbHNlOmJyZWFrICAgIAlyZXR1cm4gRmFsc2VicmVhaw==;1;-1;58650;2017-12-13 18:59:03
2541;1657144;45;ZGVmIHByaW50X3N1bXMobik6YnJlYWsgICAgZm9yIGkgaW4gcmFuZ2Uobi0xKTpicmVhayAgICAgICAgcHJpbnQobiwgIj0iLCBpICsgMSwgIisiLCBuIC0gaSAtIDEpYnJlYWs=;1;-1;200050;2017-12-13 19:04:52
2542;1657144;35;ZGVmIHNlcXVlbmNlcyhuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgZm9yIGogaW4gcmFuZ2UoaSsxKTpicmVhayAgICAgICAgICAgIHByaW50KGogKyAxLCBlbmQ9IiAiKWJyZWFrICAgICAgICBwcmludCgpYnJlYWs=;1;-1;184300;2017-12-13 19:08:00
2543;1657144;43;ZGVmIG9kZF9ldmVuKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsIG4pOmJyZWFrICAgICAgICBpZiBpICUgMiA9PSAxOmJyZWFrICAgICAgICAgICAgcHJpbnQoaSwgZW5kPSIgIilicmVhayAgICBwcmludCgpYnJlYWsgICAgZm9yIGkgaW4gcmFuZ2UoMSwgbiArIDEpOmJyZWFrICAgICAgICBpZiBpICUgMiA9PSAwOmJyZW;0;-1;572500;2017-12-13 19:19:01
2544;1657144;43;ZGVmIG9kZF9ldmVuKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsIG4gKyAxKTpicmVhayAgICAgICAgaWYgaSAlIDIgPT0gMTpicmVhayAgICAgICAgICAgIHByaW50KGksIGVuZD0iICIpYnJlYWsgICAgcHJpbnQoKWJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsIG4gKyAxKTpicmVhayAgICAgICAgaWYgaSAlIDIgPT0gMD;1;-1;593650;2017-12-13 19:19:22
2545;1657144;36;ZGVmIHByb2R1Y3RzKG4pOmJyZWFrICAgIGZvciByb3cgaW4gcmFuZ2Uobik6YnJlYWsgICAgICAgIGZvciBjb2wgaW4gcmFuZ2Uobik6YnJlYWsgICAgICAgICAgICBwcmludCgocm93ICsgMSkgKiAoY29sICsgMSksIGVuZD0iICIpYnJlYWsgICAgICAgIHByaW50KClicmVhaw==;1;-1;136100;2017-12-13 19:21:40
2546;1657144;37;ZGVmIHN0YXJzKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKG4pOmJyZWFrICAgICAgICBwcmludCgiKiIsIGVuZD0iIilicmVhayAgICAgICAgaWYgKGkgKyAxKSAlIDUgPT0gMDpicmVhayAgICAgICAgICAgIHByaW50KCJ8IiwgZW5kPSIiKWJyZWFrICAgIHByaW50KClicmVhaw==;1;-1;72900;2017-12-13 19:22:56
2547;1657144;38;ZGVmIGNyb3NzKG4pOiAgICBicmVhayAgICBmb3IgaSBpbiByYW5nZSgzKm4pOmJyZWFrICAgICAgICBmb3IgaiBpbiByYW5nZSgzKm4pOmJyZWFrICAgICAgICAgICAgaWYgKChpICsgMSkgPiBuIGFuZCAoaSArIDEpIDw9IDIgKiBuKSBvciAoKGogKyAxKSA IG4gYW5kIChqICsgMSkgPD0gMiAqIG4pOmJyZWFrICAgICAgICAgIC;1;-1;513900;2017-12-13 19:31:34
2548;1657144;1;ZGVmIG51bWJlcnMobik6YnJlYWsgICAgZm9yIGkgaW4gcmFuZ2UoMSwgbiArIDEpOmJyZWFrICAgIAlwcmludChpKWJyZWFr;1;-1;68950;2017-12-13 19:40:24
2549;1657144;46;ZGVmIHByaW50X3Byb2R1Y3RzKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsIG4gKyAxKTpicmVhayAgICAJaWYgbiAlIGkgPT0gMDogYnJlYWsgICAgCQlwcmludChzdHIobikgKyAnID0gJyArIHN0cihpKSArICcgKiAnICsgc3RyKGludChuL2kpKSlicmVhaw==;1;-1;399550;2017-12-13 20:04:21
2550;1657144;3;ZGVmIGZhY3RvcmlhbChuKTpicmVhayAgICBmYWMgPSAxYnJlYWsgICAgZm9yIGkgaW4gcmFuZ2UoMSwgbik6YnJlYWsgICAgICAgIGZhYyA9IGZhYyAqIChpKzEpYnJlYWsgICAgcmV0dXJuIGZhY2JyZWFr;1;-1;178500;2017-12-13 20:07:23
2551;1654255;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWs=;0;-1;30750;2017-12-13 20:38:19
2552;1654255;41;ZGVmIG5pY2UoIGIpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;0;-1;39500;2017-12-13 20:38:28
2553;1657144;7;ZGVmIGRpdmlzb3JzKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsIG4gKyAxKTpicmVhayAgICAJaWYgbiAlIGkgPT0gMDpicmVhayAgICAJCXByaW50KGkpYnJlYWs=;1;-1;191250;2017-12-13 20:41:36
2554;1654255;33;ZGVmIGltcG9zZV9maW5lKGFnZSwgYmVlcik6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWtwcmludChpbXBvc2VfZmluZSgyMCwgVHJ1ZSkpYnJlYWs=;0;-1;103900;2017-12-13 20:43:13
2555;1657144;20;ZGVmIGRpdmlzb3JzX2NvdW50KG4pOmJyZWFrICAgIGEgPSAwYnJlYWsgICAgZm9yIGkgaW4gcmFuZ2UoMSwgbisxKTpicmVhayAgICAgICAgaWYgbiAlIGkgPT0gMDpicmVhayAgICAgICAgICAgIGEgKz0gMWJyZWFrICAgIHJldHVybiBhYnJlYWs=;1;-1;98750;2017-12-13 20:43:19
2556;1654255;33;ZGVmIGltcG9zZV9maW5lKGFnZSwgYmVlcik6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWs=;0;-1;3550;2017-12-13 20:43:32
2557;1657144;21;ZGVmIHBvd2VycyhiYXNlLCBuKTpicmVhayAgICByZXMgPSAxYnJlYWsgICAgZm9yIGkgaW4gcmFuZ2UoMSwgbisxKTpicmVhayAgICAgICAgcmVzID0gcmVzICogYmFzZWJyZWFrICAgICAgICBwcmludChyZXMpYnJlYWs=;1;-1;161300;2017-12-13 20:46:04
2558;1658780;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgaWYoYSUyPT0wIGFuZCBiJTIhPTApOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIGVsaWYoYiUyPT0wIGFuZCBhJTIhPTApOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;1;-1;173300;2017-12-14 09:27:38
2559;1658780;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIGlmKGE8MyBvciBiPDMgb3IgYzwzKTpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICByZXR1cm4gRmFsc2VicmVhaw==;1;-1;61400;2017-12-14 09:28:46
2560;1658780;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCBuKjIpYnJlYWsgICAgcHJpbnQoIlRyb2puYXNvYmVrIiwgbiozKWJyZWFrICAgIHByaW50KCJEZXNldGluYXNvYmVrIiwgbioxMClicmVhayAgICBicmVhaw==;1;-1;108400;2017-12-14 09:30:39
2561;1658780;32;ZGVmIG5lYXJfZmlmdHkobik6YnJlYWsgICAgaWYoKG4 MzkgYW5kIG48NjEpIG9yIChuPjEzOSBhbmQgbjwxNjEpKTpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICByZXR1cm4gRmFsc2VicmVhaw==;1;-1;91250;2017-12-14 09:32:15
2562;1658780;33;ZGVmIGltcG9zZV9maW5lKGFnZSwgYmVlcik6YnJlYWsgICAgaWYoYWdlPDE4IGFuZCBiZWVyPT1UcnVlKTpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICByZXR1cm4gRmFsc2VicmVhaw==;1;-1;76000;2017-12-14 09:33:36
2563;1658780;45;ZGVmIHByaW50X3N1bXMobik6YnJlYWsgICAgZm9yIGkgaW4gcmFuZ2Uobik6YnJlYWsgICAgICAgIHByaW50KG4sICI9IixpLCAiKyIsIG4taSlicmVhaw==;0;-1;100400;2017-12-14 09:35:43
2564;1658780;45;ZGVmIHByaW50X3N1bXMobik6YnJlYWsgICAgZm9yIGkgaW4gcmFuZ2Uobik6YnJlYWsgICAgICAgIGlmKGk9PTApOmJyZWFrICAgICAgICAgICAgY29udGludWVicmVhayAgICAgICAgcHJpbnQobiwgIj0iLGksICIrIiwgbi1pKWJyZWFr;1;-1;166350;2017-12-14 09:36:49
2565;1658780;35;ZGVmIHNlcXVlbmNlcyhuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZSgxLG4rMSwxKTpicmVhayAgICAgICAgZm9yIGogaW4gcmFuZ2UoMSxpKzEsMSk6YnJlYWsgICAgICAgICAgICBwcmludChqLCBlbmQ9IiAiKWJyZWFrICAgICAgICBwcmludCgpYnJlYWs=;1;-1;74000;2017-12-14 09:40:45
2566;1658780;43;ZGVmIG9kZF9ldmVuKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsIG4pOmJyZWFrICAgICAgICBpZiBpICUgMiA9PSAxOmJyZWFrICAgICAgICAgICAgcHJpbnQoaSwgZW5kPSIgIilicmVhayAgICBwcmludCgpYnJlYWsgICAgcHJpbnQoZW5kPSIgIilicmVhayAgICBmb3IgaSBpbiByYW5nZSgxLCBuKzEpOmJyZWFrICAgIC;0;-1;205650;2017-12-14 09:44:50
2567;1658780;43;ZGVmIG9kZF9ldmVuKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsIG4rMSk6YnJlYWsgICAgICAgIGlmIGkgJSAyID09IDE6YnJlYWsgICAgICAgICAgICBwcmludChpLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhayAgICBwcmludChlbmQ9IiAiKWJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsIG4rMSk6YnJlYWsgIC;1;-1;220750;2017-12-14 09:45:05
2568;1658780;36;ZGVmIHByb2R1Y3RzKG4pOmJyZWFrICAgIGZvciByb3cgaW4gcmFuZ2UoMSxuKzEpOmJyZWFrICAgICAgICBmb3IgY29sIGluIHJhbmdlKDEsbisxKTpicmVhayAgICAgICAgICAgIHByaW50KHJvdyAqIGNvbCwgZW5kPSIgIilicmVhayAgICAgICAgcHJpbnQoKWJyZWFr;1;-1;163900;2017-12-14 09:47:54
2569;1658780;37;ZGVmIHN0YXJzKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsbisxKTpicmVhayAgICAgICAgcHJpbnQoIioiLCBlbmQ9IiIpYnJlYWsgICAgICAgIGlmIGkgJSA1PT0wOmJyZWFrICAgICAgICAgICAgcHJpbnQoInwiLCBlbmQ9IiIpYnJlYWsgICAgcHJpbnQoKWJyZWFr;1;-1;93050;2017-12-14 09:49:32
2570;1658973;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;8350;2017-12-14 11:18:00
2571;1642261;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWs=;0;-1;158950;2017-12-14 12:17:27
2572;1653385;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgYyA9IGEgKyBiYnJlYWsgICAgaWYgYyAlIDIgPT0gMTpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICByZXR1cm4gRmFsc2VicmVhaw==;1;-1;50250;2017-12-14 17:20:08
2573;1653385;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIGlmIChhIDwgMykgb3IgKGIgPCAzKSBvciAoYyA8IDMpOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;1;-1;178200;2017-12-14 17:23:16
2574;1426035;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFrcHJpbnQ=;0;-1;42600;2017-12-14 19:36:23
2575;1426035;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFrcHJpbnQoaGFwcHkoMyA0IDIpKQ==;0;-1;106300;2017-12-14 19:37:27
2576;1426035;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFrcHJpbnQoaGFwcHkoMyA0IDIpKQ==;0;-1;132700;2017-12-14 19:37:53
2577;1426035;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFrcHJpbnQoaGFwcHkoMyA0IDIpKQ==;0;-1;132900;2017-12-14 19:37:53
2578;1426035;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFrcHJpbnQoaGFwcHkoMyA0IDIpKQ==;0;-1;133150;2017-12-14 19:37:53
2579;1426035;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFrcHJpbnQoaGFwcHkoMyA0IDIpKQ==;0;-1;133350;2017-12-14 19:37:53
2580;1426035;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFrcHJpbnQoaGFwcHkoMyA0IDIpKQ==;0;-1;133550;2017-12-14 19:37:53
2581;1426035;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFrcHJpbnQoaGFwcHkoMyA0IDIpKQ==;0;-1;133800;2017-12-14 19:37:54
2582;1660487;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWsJcHJpbnQobmljZSgzLCA1KSlicmVhayAgICBwcmludChuaWNlKDIsIDQpKWJyZWFrCXByaW50KG5pY2UoMiwgNSkpYnJlYWsJcHJpbnQobmljZSgzLCA2KSlicmVhaw==;0;-1;137950;2017-12-14 19:54:33
2583;1660487;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWsJcHJpbnQobmljZSgzLCA1KSlicmVhayAgICBwcmludChuaWNlKDIsIDQpKWJyZWFrCXByaW50KG5pY2UoMiwgNSkpYnJlYWsJcHJpbnQobmljZSgzLCA2KSlicmVhaw==;0;-1;163700;2017-12-14 19:54:59
2584;1413554;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWs=;0;-1;13150;2017-12-14 20:07:27
2585;1413554;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;14750;2017-12-14 20:08:15
2586;1413554;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;26000;2017-12-14 20:08:27
2587;1353945;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWs=;0;-1;27450;2017-12-14 21:22:07
2588;1353945;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWs=;0;-1;31950;2017-12-14 21:22:12
2589;1662324;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgbGljaGVhID0gYSAlIDJicmVhayAgICBsaWNoZWIgPSBiICUgMmJyZWFrICAgIGlmIGxpY2hlYSArIGxpY2hlYiA9PSAxOmJyZWFrICAgICAgICBuaWNlID0gVHJ1ZWJyZWFrICAgIGVsc2U6YnJlYWsgICAgICAgIG5pY2U9RmFsc2VicmVhayAgICByZXR1cm4gbmljZWJyZWFr;1;-1;389750;2017-12-15 14:30:53
2590;1346987;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWtydHRyeChuanlhanliankpbGxta215;0;-1;18700;2017-12-15 18:23:50
2591;1346987;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWtydHRyeChuanlhanliankpbGxta215;0;-1;26750;2017-12-15 18:23:58
2592;1663723;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;123150;2017-12-16 08:19:06
2593;1371291;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;132600;2017-12-16 11:27:06
2594;1664216;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWs=;0;-1;15350;2017-12-16 13:27:32
2595;1664216;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWs=;0;-1;18200;2017-12-16 13:27:34
2596;1664216;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWs=;0;-1;24050;2017-12-16 13:27:40
2597;1664216;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcHJpbnQobmljZSgzLDUpYnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWsgICAgcHJpbnQobmljZSgyLDQpYnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWsgICAgcHJpbnQobmljZTIsNSlicmVhayAgICByZXR1cm4gVHJ1ZWJyZWFrICAgICAgICAgIGJyZWFrICAgICAgICAgICAgICBicmVhay;0;-1;197600;2017-12-16 13:37:24
2598;1664340;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWs=;0;-1;14550;2017-12-16 14:28:27
2599;1657144;18;ZGVmIGRpZ2l0X3N1bShuKTpicmVhayAgICBhID0gMGJyZWFrICAgIHdoaWxlIG4gPiAwOmJyZWFrICAgICAgICBhID0gYSArIG4gJSAxMGJyZWFrICAgICAgICBuID0gaW50KG4gLyAxMClicmVhayAgICByZXR1cm4gYWJyZWFr;1;-1;193650;2017-12-16 18:58:32
2600;1657144;2;ZGVmIGZpYm9uYWNjaShuKTpicmVhayAgICBmaXJzdCA9IDFicmVhayAgICBzZWNvbmQgPSAxYnJlYWsgICAgcHJpbnQoZmlyc3QpYnJlYWsgICAgcHJpbnQoc2Vjb25kKWJyZWFrICAgIGhlbHAgPSAwYnJlYWsgICAgZm9yIGkgaW4gcmFuZ2UoMywgbiArIDEpOmJyZWFrICAgICAgICBmaXJzdCA9IGZpcnN0ICsgc2Vjb25kYnJlYW;1;-1;491950;2017-12-16 19:06:53
2601;1657144;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgZm9yIGogaW4gcmFuZ2Uobik6YnJlYWsgICAgICAgICAgICBwcmludCgiIyIsIGVuZD0iICIpYnJlYWsgICAgICAgIHByaW50KClicmVhayAgICBwcmludCgpYnJlYWs=;1;-1;60500;2017-12-16 19:10:37
2602;1657144;9;ZGVmIGVtcHR5X3NxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgZm9yIGogaW4gcmFuZ2Uobik6YnJlYWsgICAgICAgICAgICBpZiBpID09IDAgb3IgaSA9PSBuLTE6YnJlYWsgICAgICAgIAkJcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgICAgICAgICAgZWxpZiBqID09IDAgb3IgaiA9PS;1;-1;320900;2017-12-16 19:16:01
2603;1664872;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICBub256ZXJvID0gW11icmVhayAgICBzdW1tID0gMWJyZWFrICAgIGZvciBpIGluIG51bWJlcnM6YnJlYWsgICAgICAgIGlmIGkgIT0gMDpicmVhayAgICAgICAgICAgIG5vbnplcm8uYXBwZW5kKGkpYnJlYWsgICAgZm9yIGkgaW4gbm9uemVybzpicmVhayAgICAgIC;1;-1;196500;2017-12-16 19:31:48
2604;1355630;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWtwcmludChuaWNlKDMsIDUpKQ==;0;-1;136350;2017-12-16 19:40:36
2605;1355630;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWtwcmludChuaWNlKDMsIDUpKQ==;0;-1;137900;2017-12-16 19:40:37
2606;1355630;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWtwcmludChuaWNlKDMsIDUpKQ==;0;-1;138800;2017-12-16 19:40:38
2607;1355630;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWtwcmludChuaWNlKDMsIDUpKQ==;0;-1;139700;2017-12-16 19:40:39
2608;1355630;41;YnJlYWtwcmludChuaWNlKDMsIDUpKQ==;0;-1;151600;2017-12-16 19:40:51
2609;1664872;15;ZGVmIGV2ZXJ5X3NlY29uZF9udW1iZXIobnVtX2xpc3QpOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKChsZW4obnVtX2xpc3QpICsgMSkvLyAyKTpicmVhayAgICAgICAgcHJpbnQobnVtX2xpc3RbaSAqIDJdKWJyZWFr;1;-1;421600;2017-12-16 19:56:50
2610;1664872;16;ZGVmIG1heF9wYWlyX3N1bShudW1fbGlzdCk6YnJlYWsgICAgbWF4X3N1bSA9IDBicmVhayAgICBmb3IgaSBpbiByYW5nZShsZW4obnVtX2xpc3QpIC0gMSk6YnJlYWsgICAgICAgIGlmIG51bV9saXN0W2ldICsgbnVtX2xpc3RbaSArIDFdID4gbWF4X3N1bTpicmVhayAgICAgICAgICAgIG1heF9zdW0gPSBudW1fbGlzdFtpXSArIG;1;-1;163600;2017-12-16 19:59:37
2611;1664872;17;ZGVmIGZpdmVfbXVsdGlwbGVzKG51bV9saXN0KTpicmVhayAgICBtdWx0XzUgPSBbXWJyZWFrICAgIGZvciBpIGluIG51bV9saXN0OmJyZWFrICAgICAgICBpZiBpICUgNSA9PSAwOmJyZWFrICAgICAgICAgICAgbXVsdF81LmFwcGVuZChpKWJyZWFrICAgIHJldHVybiBtdWx0XzVicmVhaw==;1;-1;89600;2017-12-16 20:01:19
2612;1664872;29;ZGVmIHVuaXF1ZShteWxpc3QpOmJyZWFrICAgIHVuaXF1ZWxpc3QgPSBbXWJyZWFrICAgIGZvciBpIGluIG15bGlzdDpicmVhayAgICAgICAgaWYgaSBub3QgaW4gdW5pcXVlbGlzdDpicmVhayAgICAgICAgICAgIHVuaXF1ZWxpc3QuYXBwZW5kKGkpYnJlYWsgICAgcmV0dXJuIHVuaXF1ZWxpc3RicmVhaw==;1;-1;85700;2017-12-16 20:02:47
2613;1665195;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIGElMiAhPSBiJTJicmVhaw==;1;-1;49250;2017-12-16 22:59:54
2614;1666861;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWs=;0;-1;4650;2017-12-17 16:44:09
2615;1667135;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;16050;2017-12-17 18:15:17
2616;1667389;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWs=;0;-1;15200;2017-12-17 19:55:42
2617;1667237;6;ZGVmIG5vbnplcm9fcHJvZHVjdChudW1iZXJzKTpicmVhayAgICBzdW0gPSAxYnJlYWsgICAgZm9yIGkgaW4gbnVtYmVyczpicmVhayAgICAgICAgaWYoaSAhPSAwKTpicmVhayAgICAgICAgICAgIHN1bSAqPSBpYnJlYWsgICAgcmV0dXJuIHN1bWJyZWFr;1;-1;275400;2017-12-17 20:43:37
2618;1667237;15;ZGVmIGV2ZXJ5X3NlY29uZF9udW1iZXIobnVtX2xpc3QpOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKGxlbihudW1fbGlzdCkpOmJyZWFrICAgICAgICBpZiBpJTIgPT0gMDpicmVhayAgICAgICAgICAgIHByaW50KG51bV9saXN0W2ldKWJyZWFr;1;-1;266750;2017-12-17 20:48:08
2619;1667237;16;ZGVmIG1heF9wYWlyX3N1bShudW1fbGlzdCk6YnJlYWsgICAgbWF4ID0gMGJyZWFrICAgIGZvciBpIGluIHJhbmdlKGxlbihudW1fbGlzdCkpOmJyZWFrICAgICAgICBpZiAobnVtX2xpc3RbaV0gKyBudW1fbGlzdFtpLTFdKSA IG1heDpicmVhayAgICAgICAgICAgIG1heCA9IG51bV9saXN0W2ldICsgbnVtX2xpc3RbaV1icmVhay;0;-1;273900;2017-12-17 20:53:06
2620;918021;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgaWYgc3VtKGEsIGIpID09IHN1bShhLCBiKSByZXR1cm4gdHJ1ZWJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;0;-1;522400;2017-12-17 21:56:27
2621;918021;3;ZGVmIGZhY3RvcmlhbChuKTpicmVhayAgICBpZiBuID09IDA6YnJlYWsgICAgCXJldHVybiAxYnJlYWsgICAgaWYgbiA9PSAxOmJyZWFrICAgIAlyZXR1cm4gMWJyZWFrICAgIGlmIG4gPT0gMjpicmVhayAgICAJcmV0dXJuIDJicmVhayAgICBpZiBuID09IDM6YnJlYWsgICAgCXJldHVybiA2YnJlYWsgICAgaWYgbiA9PSA0OmJyZW;0;-1;544200;2017-12-17 22:06:32
2622;918021;3;ZGVmIGZhY3RvcmlhbChuKTpicmVhayAgICBpZiBuID09IDA6YnJlYWsgICAgCXJldHVybiAxYnJlYWsgICAgaWYgbiA9PSAxOmJyZWFrICAgIAlyZXR1cm4gMWJyZWFrICAgIGlmIG4gPT0gMjpicmVhayAgICAJcmV0dXJuIDJicmVhayAgICBpZiBuID09IDM6YnJlYWsgICAgCXJldHVybiA2YnJlYWsgICAgaWYgbiA9PSA0OmJyZW;0;-1;563050;2017-12-17 22:06:51
2623;918021;3;ZGVmIGZhY3RvcmlhbChuKTpicmVhayAgICBpZiBuID09IDA6YnJlYWsgICAgCXJldHVybiAxYnJlYWsgICAgaWYgbiA9PSAxOmJyZWFrICAgIAlyZXR1cm4gMWJyZWFrICAgIGlmIG4gPT0gMjpicmVhayAgICAJcmV0dXJuIDJicmVhayAgICBpZiBuID09IDM6YnJlYWsgICAgCXJldHVybiA2YnJlYWsgICAgaWYgbiA9PSA0OmJyZW;0;-1;595600;2017-12-17 22:07:24
2624;918021;3;ZGVmIGZhY3RvcmlhbChuKTpicmVhayAgICBpZiBuID09IDA6YnJlYWsgICAgCXJldHVybiAxYnJlYWsgICAgaWYgbiA9PSAxOmJyZWFrICAgIAlyZXR1cm4gMWJyZWFrICAgIGlmIG4gPT0gMjpicmVhayAgICAJcmV0dXJuIDJicmVhayAgICBpZiBuID09IDM6YnJlYWsgICAgCXJldHVybiA2YnJlYWsgICAgaWYgbiA9PSA0OmJyZW;0;-1;616300;2017-12-17 22:07:45
2625;918021;3;ZGVmIGZhY3RvcmlhbChuKTpicmVhayAgICBpZiBuID09IDA6YnJlYWsgICAgCXJldHVybiAxYnJlYWsgICAgaWYgbiA9PSAxOmJyZWFrICAgIAlyZXR1cm4gMWJyZWFrICAgIGlmIG4gPT0gMjpicmVhayAgICAJcmV0dXJuIDJicmVhayAgICBpZiBuID09IDM6YnJlYWsgICAgCXJldHVybiA2YnJlYWsgICAgaWYgbiA9PSA0OmJyZW;0;-1;617000;2017-12-17 22:07:46
2626;918021;3;ZGVmIGZhY3RvcmlhbChuKTpicmVhayAgICBpZiBuID09IDA6YnJlYWsgICAgCXJldHVybiAxYnJlYWsgICAgaWYgbiA9PSAxOmJyZWFrICAgIAlyZXR1cm4gMWJyZWFrICAgIGlmIG4gPT0gMjpicmVhayAgICAJcmV0dXJuIDJicmVhayAgICBpZiBuID09IDM6YnJlYWsgICAgCXJldHVybiA2YnJlYWsgICAgaWYgbiA9PSA0OmJyZW;1;-1;624850;2017-12-17 22:07:54
2627;918021;3;ZGVmIGZhY3RvcmlhbChuKTpicmVhayAgICBpZiBuID09IDA6YnJlYWsgICAgCXJldHVybiAxYnJlYWsgICAgaWYgbiA9PSAxOmJyZWFrICAgIAlyZXR1cm4gMWJyZWFrICAgIGlmIG4gPT0gMjpicmVhayAgICAJcmV0dXJuIDJicmVhayAgICBpZiBuID09IDM6YnJlYWsgICAgCXJldHVybiA2YnJlYWsgICAgaWYgbiA9PSA0OmJyZW;1;-1;3550;2017-12-17 22:08:11
2628;1667723;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgaWYgYSAlIDIgPT0gMCBhbmQgYiAlIDIgIT0gMDpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICBlbGlmIGEgJSAyICE9IDAgYW5kIGIgJSAyID09IDA6YnJlYWsgICAgICAgIHJldHVybiBUcnVlYnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWs=;1;-1;63600;2017-12-17 23:09:50
2629;1667723;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIGlmIGEgPCAzIG9yIGIgPCAzIG9yIGMgPCAzOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;1;-1;40550;2017-12-17 23:10:37
2630;1667723;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCAyKm4pYnJlYWsgICAgcHJpbnQoIlRyb2puYXNvYmVrIiwgMypuKWJyZWFrICAgIHByaW50KCJEZXNldGluYXNvYmVrIiwgMTAqbilicmVhaw==;1;-1;69850;2017-12-17 23:12:01
2631;1667723;32;ZGVmIG5lYXJfZmlmdHkobik6YnJlYWsgICAgaWYgYWJzKDUwLW4pIDw9IDEwOmJyZWFrICAgICAgICByZXR1cm4gVHJ1ZWJyZWFrICAgIGVsaWYgYWJzKDE1MC1uKSA8PSAxMDpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICByZXR1cm4gRmFsc2VicmVhaw==;1;-1;282050;2017-12-17 23:16:49
2632;1667723;33;ZGVmIGltcG9zZV9maW5lKGFnZSwgYmVlcik6YnJlYWsgICAgaWYgYWdlIDwgMTggYW5kIGJlZXI6YnJlYWsgICAgICAgIHJldHVybiBUcnVlYnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWs=;1;-1;44150;2017-12-17 23:17:37
2633;1667723;45;ZGVmIHByaW50X3N1bXMobik6YnJlYWsgICAgZm9yIGkgaW4gcmFuZ2Uobi0xKTpicmVhayAgICAgICAgcHJpbnQobiwgIj0iLCBpKzEsICIrIiwgbi0oaSsxKSlicmVhaw==;1;-1;81000;2017-12-17 23:21:03
2634;1667723;35;ZGVmIHNlcXVlbmNlcyhuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgZm9yIGogaW4gcmFuZ2UoaSsxKTpicmVhayAgICAgICAgICAgIHByaW50KGorMSwgZW5kPSIgIilicmVhayAgICAgICAgcHJpbnQoKWJyZWFr;1;-1;67250;2017-12-17 23:22:16
2635;1667723;43;ZGVmIG9kZF9ldmVuKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsIG4pOmJyZWFrICAgICAgICBpZiBpICUgMiA9PSAxOmJyZWFrICAgICAgICAgICAgcHJpbnQoaSwgZW5kPSIgIilicmVhayAgICBwcmludCgpYnJlYWsgICAgZm9yIGkgaW4gcmFuZ2UoMSwgbik6YnJlYWsgICAgICAgIGlmIGkgJSAyID09IDA6YnJlYWsgIC;0;-1;152950;2017-12-17 23:24:55
2636;1667723;43;ZGVmIG9kZF9ldmVuKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKDEsIG4rMSk6YnJlYWsgICAgICAgIGlmIGkgJSAyID09IDE6YnJlYWsgICAgICAgICAgICBwcmludChpLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhayAgICBmb3IgaSBpbiByYW5nZSgxLCBuKzEpOmJyZWFrICAgICAgICBpZiBpICUgMiA9PSAwOmJyZW;1;-1;239600;2017-12-17 23:26:21
2637;1667723;36;ZGVmIHByb2R1Y3RzKG4pOmJyZWFrICAgIGZvciByb3cgaW4gcmFuZ2UoMSwgbisxKTpicmVhayAgICAgICAgZm9yIGNvbCBpbiByYW5nZSgxLCBuKzEpOmJyZWFrICAgICAgICAgICAgcHJpbnQocm93KmNvbCwgZW5kPSIgIilicmVhayAgICAgICAgcHJpbnQoKWJyZWFr;1;-1;64900;2017-12-17 23:27:29
2638;1667723;37;ZGVmIHN0YXJzKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKG4pOmJyZWFrICAgICAgICBpZiBpICUgNSA9PSAwOmJyZWFrICAgICAgICAgICAgcHJpbnQoInwiLCBlbmQ9IiIpYnJlYWsgICAgICAgIHByaW50KCIqIiwgZW5kPSIiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;46000;2017-12-17 23:28:18
2639;1667723;37;ZGVmIHN0YXJzKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKG4pOmJyZWFrICAgICAgICBpZiBpICUgNSA9PSAwIGFuZCBpICE9IDA6YnJlYWsgICAgICAgICAgICBwcmludCgifCIsIGVuZD0iIilicmVhayAgICAgICAgcHJpbnQoIioiLCBlbmQ9IiIpYnJlYWsgICAgcHJpbnQoKWJyZWFr;1;-1;58900;2017-12-17 23:28:31
2640;1667872;37;ZGVmIHN0YXJzKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKG4pOmJyZWFrICAgICAgICBwcmludCgiKiIsIGVuZD0iIilicmVhayAgICAgICAgaWYgaSA9PSA1OmJyZWFrICAgICAgICAgICAgcHJpbnQoInwiLCBlbmQ9IiIpYnJlYWsgICAgcHJpbnQoKWJyZWFr;0;-1;19300;2017-12-18 01:38:20
2641;1667872;37;ZGVmIHN0YXJzKG4pOmJyZWFrICAgIGZvciBpIGluIHJhbmdlKG4pOmJyZWFrICAgICAgICBwcmludCgiKiIsIGVuZD0iIilicmVhayAgICAgICAgaWYgaSA9PSA1OmJyZWFrICAgICAgICAgICAgcHJpbnQoInwiLCBlbmQ9IiIpYnJlYWsgICAgcHJpbnQoKWJyZWFr;0;-1;36250;2017-12-18 01:39:07
2642;1667872;44;ZGVmIG1ha2VfZmFuY3kodGV4dCwgbik6YnJlYWsgICAgcHJpbnQodGV4dClicmVhaw==;0;-1;15800;2017-12-18 01:40:33
2643;1669241;34;ZGVmIG11bHRpcGxlcyhuKTpicmVhayAgICBwcmludCgiRHZvam5hc29iZWsiLCBuKWJyZWFr;0;-1;6050;2017-12-18 13:09:04
2644;1669821;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;19450;2017-12-18 17:00:57
2645;1669821;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;24300;2017-12-18 17:01:02
2646;1669821;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;24650;2017-12-18 17:01:02
2647;1669821;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;24950;2017-12-18 17:01:03
2648;1669821;8;ZGVmIHNxdWFyZShuKTpicmVhayAgICBmb3IgaSBpbiByYW5nZShuKTpicmVhayAgICAgICAgcHJpbnQoIiMiLCBlbmQ9IiAiKWJyZWFrICAgIHByaW50KClicmVhaw==;0;-1;32500;2017-12-18 17:01:10
2649;1670136;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgaWYgKGElMj09MCBhbmQgYiUyPT0wKTpicmVhayAgICAgICAgcHJpbnQgInN1ZOEiYnJlYWsgICAgZWxzZTpicmVhayAgICAgICAgcHJpbnQgImxpY2jhImJyZWFr;0;-1;180900;2017-12-18 19:12:53
2650;1670136;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgaWYgKGElMj09MCBhbmQgYiUyPT0wKTpicmVhayAgICAgICAgcmV0dXJuICBUcnVlYnJlYWsgICAgZWxzZTpicmVhayAgICAgICAgcmV0dXJuIEZhbHNlYnJlYWs=;0;-1;252550;2017-12-18 19:14:19
2651;1670136;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgaWYgKGElMj09MCBhbmQgYiUyPT0wKTpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICBlbHNlOmJyZWFrICAgICAgICByZXR1cm4gRmFsc2VicmVhaw==;0;-1;263050;2017-12-18 19:14:31
2652;1670136;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgaWYgKGElMj09MCBhbmQgYiUyPT0xKTpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICBlbHNlOmJyZWFrICAgICAgICByZXR1cm4gRmFsc2VicmVhaw==;0;-1;305050;2017-12-18 19:15:22
2653;1670136;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgaWYgKGElMj09MCBhbmQgYiUyIT0wKTpicmVhayAgICAgICAgcmV0dXJuIFRydWVicmVhayAgICBlbHNlOmJyZWFrICAgICAgICByZXR1cm4gRmFsc2VicmVhaw==;0;-1;336250;2017-12-18 19:16:00
2654;1344831;12;ZGVmIGJpZ1gobik6YnJlYWsgICAgcGFzc2JyZWFrY3Jvc3MoNSk=;0;-1;33350;2017-12-18 19:37:05
2655;1344831;12;ZGVmIGJpZ1gobik6YnJlYWsgICAgcGFzc2JyZWFrY3Jvc3MoNyk=;0;-1;45250;2017-12-18 19:37:17
2656;1344831;12;ZGVmIGJpZ1goNyk6YnJlYWsgICAg;0;-1;65300;2017-12-18 19:37:37
2657;1501836;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWs=;0;-1;9450;2017-12-18 20:24:50
2658;1501836;41;ZGVmIG5pY2UoYSwgYik6YnJlYWsgICAgcmV0dXJuIEZhbHNlYnJlYWs=;0;-1;9750;2017-12-18 20:24:50
2659;1671126;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;0;-1;1950;2017-12-19 07:30:18
2660;1671126;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;0;-1;2250;2017-12-19 07:30:19
2661;1671126;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;0;-1;2500;2017-12-19 07:30:19
2662;1671126;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;0;-1;2750;2017-12-19 07:30:19
2663;1671126;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;0;-1;3000;2017-12-19 07:30:20
2664;1671126;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFr;0;-1;3200;2017-12-19 07:30:20
2665;1671126;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFrdGZmcnZndGZnZ2ZiIG0g;0;-1;9500;2017-12-19 07:30:26
2666;1671126;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFrdGZmcnZndGZnZ2ZiIG0g;0;-1;10200;2017-12-19 07:30:27
2667;1671126;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFrdGZmcnZndGZnZ2ZiIG0g;0;-1;10400;2017-12-19 07:30:27
2668;1671126;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFrdGZmcnZndGZnZ2ZiIG0g;0;-1;20150;2017-12-19 07:30:37
2669;1671126;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFrdGZmcnZndGZnZ2ZiIG0g;0;-1;20950;2017-12-19 07:30:37
2670;1671126;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFrdGZmcnZndGZnZ2ZiIG0g;0;-1;21200;2017-12-19 07:30:38
2671;1671126;42;ZGVmIGhhcHB5KGEsIGIsIGMpOmJyZWFrICAgIHJldHVybiBGYWxzZWJyZWFrdGZmcnZndGZnZ2ZiIG0g;0;-1;21450;2017-12-19 07:30:38